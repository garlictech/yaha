
enum TextualDescriptionType {
  markdown
  html
}

type TextualDescription @aws_iam @aws_api_key {
  languageKey: String!
  title: String
  summary: String
  fullDescription: String
  type: TextualDescriptionType!
}

type GeoJson @aws_iam @aws_api_key {
  type: String!
  coordinates: [[[Float]]]!
}

type Poi @aws_iam @aws_api_key {
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Hike @aws_iam @aws_api_key {
  id: ID!
  description: [TextualDescription]
  route: GeoJson
  imageUrls: [String]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type SearchablePoiConnection @aws_api_key @aws_iam {
  items: [Poi]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

type SearchableAggregateResult @aws_iam @aws_api_key {
  name: String!
  result: SearchableAggregateGenericResult
}

type SearchableAggregateScalarResult @aws_iam @aws_api_key {
  value: Float!
}

type SearchableAggregateBucketResult @aws_iam @aws_api_key {
  buckets: [SearchableAggregateBucketResultItem]
}

type SearchableAggregateBucketResultItem @aws_iam @aws_api_key {
  key: String!
  doc_count: Int!
}

union SearchableAggregateGenericResult = SearchableAggregateScalarResult | SearchableAggregateBucketResult

type Query {
  getPoi(id: ID!): Poi @aws_api_key @aws_iam
  listPois(filter: ModelPoiFilterInput, limit: Int, nextToken: String): ModelPoiConnection @aws_api_key @aws_iam
  syncPois(filter: ModelPoiFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPoiConnection @aws_api_key @aws_iam
  searchPois(filter: SearchablePoiFilterInput, sort: [SearchablePoiSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchablePoiAggregationInput]): SearchablePoiConnection @aws_api_key @aws_iam
  getHike(id: ID!): Hike @aws_api_key @aws_iam
  listHikes(filter: ModelHikeFilterInput, limit: Int, nextToken: String): ModelHikeConnection @aws_api_key @aws_iam
  syncHikes(filter: ModelHikeFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelHikeConnection @aws_api_key @aws_iam
  searchHikes(filter: SearchableHikeFilterInput, sort: [SearchableHikeSortInput], limit: Int, nextToken: String, from: Int, aggregates: [SearchableHikeAggregationInput]): SearchableHikeConnection @aws_api_key @aws_iam
}

type SearchableHikeConnection @aws_api_key @aws_iam {
  items: [Hike]!
  nextToken: String
  total: Int
  aggregateItems: [SearchableAggregateResult]!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPoiConnection @aws_api_key @aws_iam {
  items: [Poi]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPoiFilterInput {
  id: ModelIDInput
  and: [ModelPoiFilterInput]
  or: [ModelPoiFilterInput]
  not: ModelPoiFilterInput
}

input ModelPoiConditionInput {
  and: [ModelPoiConditionInput]
  or: [ModelPoiConditionInput]
  not: ModelPoiConditionInput
}

input CreatePoiInput {
  id: ID
  _version: Int
}

input UpdatePoiInput {
  id: ID!
  _version: Int
}

input DeletePoiInput {
  id: ID!
  _version: Int
}

type Mutation {
  createPoi(input: CreatePoiInput!, condition: ModelPoiConditionInput): Poi @aws_api_key @aws_iam
  updatePoi(input: UpdatePoiInput!, condition: ModelPoiConditionInput): Poi @aws_api_key @aws_iam
  deletePoi(input: DeletePoiInput!, condition: ModelPoiConditionInput): Poi @aws_api_key @aws_iam
  createHike(input: CreateHikeInput!, condition: ModelHikeConditionInput): Hike @aws_api_key @aws_iam
  updateHike(input: UpdateHikeInput!, condition: ModelHikeConditionInput): Hike @aws_api_key @aws_iam
  deleteHike(input: DeleteHikeInput!, condition: ModelHikeConditionInput): Hike @aws_api_key @aws_iam
}

type Subscription {
  onCreatePoi: Poi @aws_subscribe(mutations: ["createPoi"]) @aws_api_key @aws_iam
  onUpdatePoi: Poi @aws_subscribe(mutations: ["updatePoi"]) @aws_api_key @aws_iam
  onDeletePoi: Poi @aws_subscribe(mutations: ["deletePoi"]) @aws_api_key @aws_iam
  onCreateHike: Hike @aws_subscribe(mutations: ["createHike"]) @aws_api_key @aws_iam
  onUpdateHike: Hike @aws_subscribe(mutations: ["updateHike"]) @aws_api_key @aws_iam
  onDeleteHike: Hike @aws_subscribe(mutations: ["deleteHike"]) @aws_api_key @aws_iam
}

input TextualDescriptionInput {
  languageKey: String!
  title: String
  summary: String
  fullDescription: String
  type: TextualDescriptionType!
}

input GeoJsonInput {
  type: String!
  coordinates: [[[Float]]]!
}

type ModelHikeConnection @aws_api_key @aws_iam {
  items: [Hike]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelHikeFilterInput {
  id: ModelIDInput
  imageUrls: ModelStringInput
  and: [ModelHikeFilterInput]
  or: [ModelHikeFilterInput]
  not: ModelHikeFilterInput
}

input ModelHikeConditionInput {
  imageUrls: ModelStringInput
  and: [ModelHikeConditionInput]
  or: [ModelHikeConditionInput]
  not: ModelHikeConditionInput
}

input CreateHikeInput {
  id: ID
  description: [TextualDescriptionInput]
  route: GeoJsonInput
  imageUrls: [String]
  _version: Int
}

input UpdateHikeInput {
  id: ID!
  description: [TextualDescriptionInput]
  route: GeoJsonInput
  imageUrls: [String]
  _version: Int
}

input DeleteHikeInput {
  id: ID!
  _version: Int
}

input SearchableStringFilterInput {
  ne: String
  gt: String
  lt: String
  gte: String
  lte: String
  eq: String
  match: String
  matchPhrase: String
  matchPhrasePrefix: String
  multiMatch: String
  exists: Boolean
  wildcard: String
  regexp: String
  range: [String]
}

input SearchableIntFilterInput {
  ne: Int
  gt: Int
  lt: Int
  gte: Int
  lte: Int
  eq: Int
  range: [Int]
}

input SearchableFloatFilterInput {
  ne: Float
  gt: Float
  lt: Float
  gte: Float
  lte: Float
  eq: Float
  range: [Float]
}

input SearchableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input SearchableIDFilterInput {
  ne: ID
  gt: ID
  lt: ID
  gte: ID
  lte: ID
  eq: ID
  match: ID
  matchPhrase: ID
  matchPhrasePrefix: ID
  multiMatch: ID
  exists: Boolean
  wildcard: ID
  regexp: ID
  range: [ID]
}

input SearchablePoiFilterInput {
  id: SearchableIDFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  _version: SearchableIntFilterInput
  _deleted: SearchableBooleanFilterInput
  _lastChangedAt: SearchableIntFilterInput
  and: [SearchablePoiFilterInput]
  or: [SearchablePoiFilterInput]
  not: SearchablePoiFilterInput
}

enum SearchableSortDirection {
  asc
  desc
}

enum SearchablePoiSortableFields {
  id
  createdAt
  updatedAt
  _version
  _deleted
  _lastChangedAt
}

input SearchablePoiSortInput {
  field: SearchablePoiSortableFields
  direction: SearchableSortDirection
}

enum SearchableAggregateType {
  terms
  avg
  min
  max
  sum
}

enum SearchablePoiAggregateField {
  id
  createdAt
  updatedAt
  _version
  _deleted
  _lastChangedAt
}

input SearchablePoiAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchablePoiAggregateField!
}

input SearchableHikeFilterInput {
  id: SearchableIDFilterInput
  imageUrls: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  _version: SearchableIntFilterInput
  _deleted: SearchableBooleanFilterInput
  _lastChangedAt: SearchableIntFilterInput
  and: [SearchableHikeFilterInput]
  or: [SearchableHikeFilterInput]
  not: SearchableHikeFilterInput
}

enum SearchableHikeSortableFields {
  id
  imageUrls
  createdAt
  updatedAt
  _version
  _deleted
  _lastChangedAt
}

input SearchableHikeSortInput {
  field: SearchableHikeSortableFields
  direction: SearchableSortDirection
}

enum SearchableHikeAggregateField {
  id
  imageUrls
  createdAt
  updatedAt
  _version
  _deleted
  _lastChangedAt
}

input SearchableHikeAggregationInput {
  name: String!
  type: SearchableAggregateType!
  field: SearchableHikeAggregateField!
}

