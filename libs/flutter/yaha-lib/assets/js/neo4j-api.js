'use strict';
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) =>
    function __init() {
      return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])((fn = 0))), res;
    };
  var __commonJS = (cb, mod) =>
    function __require() {
      return (
        mod ||
          (0, cb[__getOwnPropNames(cb)[0]])(
            (mod = { exports: {} }).exports,
            mod,
          ),
        mod.exports
      );
    };
  var __copyProps = (to, from, except, desc) => {
    if ((from && typeof from === 'object') || typeof from === 'function') {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, {
            get: () => from[key],
            enumerable:
              !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
          });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (
    (target = mod != null ? __create(__getProtoOf(mod)) : {}),
    __copyProps(
      isNodeMode || !mod || !mod.__esModule
        ? __defProp(target, 'default', { value: mod, enumerable: true })
        : target,
      mod,
    )
  );
  var __async = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = value => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = value => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = x =>
        x.done
          ? resolve(x.value)
          : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };

  // node_modules/@babel/runtime/helpers/interopRequireDefault.js
  var require_interopRequireDefault = __commonJS({
    'node_modules/@babel/runtime/helpers/interopRequireDefault.js'(
      exports,
      module,
    ) {
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule
          ? obj
          : {
              default: obj,
            };
      }
      (module.exports = _interopRequireDefault),
        (module.exports.__esModule = true),
        (module.exports['default'] = module.exports);
    },
  });

  // node_modules/@babel/runtime/helpers/classCallCheck.js
  var require_classCallCheck = __commonJS({
    'node_modules/@babel/runtime/helpers/classCallCheck.js'(exports, module) {
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function');
        }
      }
      (module.exports = _classCallCheck),
        (module.exports.__esModule = true),
        (module.exports['default'] = module.exports);
    },
  });

  // node_modules/@babel/runtime/helpers/createClass.js
  var require_createClass = __commonJS({
    'node_modules/@babel/runtime/helpers/createClass.js'(exports, module) {
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, 'prototype', {
          writable: false,
        });
        return Constructor;
      }
      (module.exports = _createClass),
        (module.exports.__esModule = true),
        (module.exports['default'] = module.exports);
    },
  });

  // node_modules/@babel/runtime/helpers/setPrototypeOf.js
  var require_setPrototypeOf = __commonJS({
    'node_modules/@babel/runtime/helpers/setPrototypeOf.js'(exports, module) {
      function _setPrototypeOf(o, p) {
        (module.exports = _setPrototypeOf =
          Object.setPrototypeOf
            ? Object.setPrototypeOf.bind()
            : function _setPrototypeOf2(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              }),
          (module.exports.__esModule = true),
          (module.exports['default'] = module.exports);
        return _setPrototypeOf(o, p);
      }
      (module.exports = _setPrototypeOf),
        (module.exports.__esModule = true),
        (module.exports['default'] = module.exports);
    },
  });

  // node_modules/@babel/runtime/helpers/inherits.js
  var require_inherits = __commonJS({
    'node_modules/@babel/runtime/helpers/inherits.js'(exports, module) {
      var setPrototypeOf = require_setPrototypeOf();
      function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            'Super expression must either be null or a function',
          );
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true,
          },
        });
        Object.defineProperty(subClass, 'prototype', {
          writable: false,
        });
        if (superClass) setPrototypeOf(subClass, superClass);
      }
      (module.exports = _inherits),
        (module.exports.__esModule = true),
        (module.exports['default'] = module.exports);
    },
  });

  // node_modules/@babel/runtime/helpers/typeof.js
  var require_typeof = __commonJS({
    'node_modules/@babel/runtime/helpers/typeof.js'(exports, module) {
      function _typeof(obj) {
        '@babel/helpers - typeof';
        return (
          (module.exports = _typeof =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
              ? function (obj2) {
                  return typeof obj2;
                }
              : function (obj2) {
                  return obj2 &&
                    'function' == typeof Symbol &&
                    obj2.constructor === Symbol &&
                    obj2 !== Symbol.prototype
                    ? 'symbol'
                    : typeof obj2;
                }),
          (module.exports.__esModule = true),
          (module.exports['default'] = module.exports),
          _typeof(obj)
        );
      }
      (module.exports = _typeof),
        (module.exports.__esModule = true),
        (module.exports['default'] = module.exports);
    },
  });

  // node_modules/@babel/runtime/helpers/assertThisInitialized.js
  var require_assertThisInitialized = __commonJS({
    'node_modules/@babel/runtime/helpers/assertThisInitialized.js'(
      exports,
      module,
    ) {
      function _assertThisInitialized(self2) {
        if (self2 === void 0) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called",
          );
        }
        return self2;
      }
      (module.exports = _assertThisInitialized),
        (module.exports.__esModule = true),
        (module.exports['default'] = module.exports);
    },
  });

  // node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
  var require_possibleConstructorReturn = __commonJS({
    'node_modules/@babel/runtime/helpers/possibleConstructorReturn.js'(
      exports,
      module,
    ) {
      var _typeof = require_typeof()['default'];
      var assertThisInitialized = require_assertThisInitialized();
      function _possibleConstructorReturn(self2, call) {
        if (
          call &&
          (_typeof(call) === 'object' || typeof call === 'function')
        ) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError(
            'Derived constructors may only return object or undefined',
          );
        }
        return assertThisInitialized(self2);
      }
      (module.exports = _possibleConstructorReturn),
        (module.exports.__esModule = true),
        (module.exports['default'] = module.exports);
    },
  });

  // node_modules/@babel/runtime/helpers/getPrototypeOf.js
  var require_getPrototypeOf = __commonJS({
    'node_modules/@babel/runtime/helpers/getPrototypeOf.js'(exports, module) {
      function _getPrototypeOf(o) {
        (module.exports = _getPrototypeOf =
          Object.setPrototypeOf
            ? Object.getPrototypeOf.bind()
            : function _getPrototypeOf2(o2) {
                return o2.__proto__ || Object.getPrototypeOf(o2);
              }),
          (module.exports.__esModule = true),
          (module.exports['default'] = module.exports);
        return _getPrototypeOf(o);
      }
      (module.exports = _getPrototypeOf),
        (module.exports.__esModule = true),
        (module.exports['default'] = module.exports);
    },
  });

  // node_modules/neo4j-driver-core/lib/error.js
  var require_error = __commonJS({
    'node_modules/neo4j-driver-core/lib/error.js'(exports) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.PROTOCOL_ERROR =
        exports.SESSION_EXPIRED =
        exports.SERVICE_UNAVAILABLE =
        exports.Neo4jError =
        exports.newError =
          void 0;
      var SERVICE_UNAVAILABLE = 'ServiceUnavailable';
      exports.SERVICE_UNAVAILABLE = SERVICE_UNAVAILABLE;
      var SESSION_EXPIRED = 'SessionExpired';
      exports.SESSION_EXPIRED = SESSION_EXPIRED;
      var PROTOCOL_ERROR = 'ProtocolError';
      exports.PROTOCOL_ERROR = PROTOCOL_ERROR;
      var NOT_AVAILABLE = 'N/A';
      var Neo4jError = (function (_super) {
        __extends2(Neo4jError2, _super);
        function Neo4jError2(message, code) {
          var _this = _super.call(this, message) || this;
          _this.constructor = Neo4jError2;
          _this.__proto__ = Neo4jError2.prototype;
          _this.code = code;
          _this.name = 'Neo4jError';
          return _this;
        }
        return Neo4jError2;
      })(Error);
      exports.Neo4jError = Neo4jError;
      function newError(message, code) {
        return new Neo4jError(
          message,
          code !== null && code !== void 0 ? code : NOT_AVAILABLE,
        );
      }
      exports.newError = newError;
    },
  });

  // node_modules/neo4j-driver-core/lib/integer.js
  var require_integer = __commonJS({
    'node_modules/neo4j-driver-core/lib/integer.js'(exports) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.toString =
        exports.toNumber =
        exports.inSafeRange =
        exports.isInt =
        exports.int =
          void 0;
      var error_1 = require_error();
      var INT_CACHE = /* @__PURE__ */ new Map();
      var Integer = (function () {
        function Integer2(low, high) {
          this.low = low || 0;
          this.high = high || 0;
        }
        Integer2.prototype.inSafeRange = function () {
          return (
            this.greaterThanOrEqual(Integer2.MIN_SAFE_VALUE) &&
            this.lessThanOrEqual(Integer2.MAX_SAFE_VALUE)
          );
        };
        Integer2.prototype.toInt = function () {
          return this.low;
        };
        Integer2.prototype.toNumber = function () {
          return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
        };
        Integer2.prototype.toBigInt = function () {
          if (this.isZero()) {
            return BigInt(0);
          } else if (this.isPositive()) {
            return (
              BigInt(this.high >>> 0) * BigInt(TWO_PWR_32_DBL) +
              BigInt(this.low >>> 0)
            );
          } else {
            var negate = this.negate();
            return (
              BigInt(-1) *
              (BigInt(negate.high >>> 0) * BigInt(TWO_PWR_32_DBL) +
                BigInt(negate.low >>> 0))
            );
          }
        };
        Integer2.prototype.toNumberOrInfinity = function () {
          if (this.lessThan(Integer2.MIN_SAFE_VALUE)) {
            return Number.NEGATIVE_INFINITY;
          } else if (this.greaterThan(Integer2.MAX_SAFE_VALUE)) {
            return Number.POSITIVE_INFINITY;
          } else {
            return this.toNumber();
          }
        };
        Integer2.prototype.toString = function (radix) {
          radix = radix || 10;
          if (radix < 2 || radix > 36) {
            throw RangeError('radix out of range: ' + radix);
          }
          if (this.isZero()) {
            return '0';
          }
          var rem;
          if (this.isNegative()) {
            if (this.equals(Integer2.MIN_VALUE)) {
              var radixInteger = Integer2.fromNumber(radix);
              var div = this.div(radixInteger);
              rem = div.multiply(radixInteger).subtract(this);
              return div.toString(radix) + rem.toInt().toString(radix);
            } else {
              return '-' + this.negate().toString(radix);
            }
          }
          var radixToPower = Integer2.fromNumber(Math.pow(radix, 6));
          rem = this;
          var result = '';
          while (true) {
            var remDiv = rem.div(radixToPower);
            var intval =
              rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;
            var digits = intval.toString(radix);
            rem = remDiv;
            if (rem.isZero()) {
              return digits + result;
            } else {
              while (digits.length < 6) {
                digits = '0' + digits;
              }
              result = '' + digits + result;
            }
          }
        };
        Integer2.prototype.getHighBits = function () {
          return this.high;
        };
        Integer2.prototype.getLowBits = function () {
          return this.low;
        };
        Integer2.prototype.getNumBitsAbs = function () {
          if (this.isNegative()) {
            return this.equals(Integer2.MIN_VALUE)
              ? 64
              : this.negate().getNumBitsAbs();
          }
          var val = this.high !== 0 ? this.high : this.low;
          for (var bit = 31; bit > 0; bit--) {
            if ((val & (1 << bit)) !== 0) {
              break;
            }
          }
          return this.high !== 0 ? bit + 33 : bit + 1;
        };
        Integer2.prototype.isZero = function () {
          return this.high === 0 && this.low === 0;
        };
        Integer2.prototype.isNegative = function () {
          return this.high < 0;
        };
        Integer2.prototype.isPositive = function () {
          return this.high >= 0;
        };
        Integer2.prototype.isOdd = function () {
          return (this.low & 1) === 1;
        };
        Integer2.prototype.isEven = function () {
          return (this.low & 1) === 0;
        };
        Integer2.prototype.equals = function (other) {
          var theOther = Integer2.fromValue(other);
          return this.high === theOther.high && this.low === theOther.low;
        };
        Integer2.prototype.notEquals = function (other) {
          return !this.equals(other);
        };
        Integer2.prototype.lessThan = function (other) {
          return this.compare(other) < 0;
        };
        Integer2.prototype.lessThanOrEqual = function (other) {
          return this.compare(other) <= 0;
        };
        Integer2.prototype.greaterThan = function (other) {
          return this.compare(other) > 0;
        };
        Integer2.prototype.greaterThanOrEqual = function (other) {
          return this.compare(other) >= 0;
        };
        Integer2.prototype.compare = function (other) {
          var theOther = Integer2.fromValue(other);
          if (this.equals(theOther)) {
            return 0;
          }
          var thisNeg = this.isNegative();
          var otherNeg = theOther.isNegative();
          if (thisNeg && !otherNeg) {
            return -1;
          }
          if (!thisNeg && otherNeg) {
            return 1;
          }
          return this.subtract(theOther).isNegative() ? -1 : 1;
        };
        Integer2.prototype.negate = function () {
          if (this.equals(Integer2.MIN_VALUE)) {
            return Integer2.MIN_VALUE;
          }
          return this.not().add(Integer2.ONE);
        };
        Integer2.prototype.add = function (addend) {
          var theAddend = Integer2.fromValue(addend);
          var a48 = this.high >>> 16;
          var a32 = this.high & 65535;
          var a16 = this.low >>> 16;
          var a00 = this.low & 65535;
          var b48 = theAddend.high >>> 16;
          var b32 = theAddend.high & 65535;
          var b16 = theAddend.low >>> 16;
          var b00 = theAddend.low & 65535;
          var c48 = 0;
          var c32 = 0;
          var c16 = 0;
          var c00 = 0;
          c00 += a00 + b00;
          c16 += c00 >>> 16;
          c00 &= 65535;
          c16 += a16 + b16;
          c32 += c16 >>> 16;
          c16 &= 65535;
          c32 += a32 + b32;
          c48 += c32 >>> 16;
          c32 &= 65535;
          c48 += a48 + b48;
          c48 &= 65535;
          return Integer2.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
        };
        Integer2.prototype.subtract = function (subtrahend) {
          var theSubtrahend = Integer2.fromValue(subtrahend);
          return this.add(theSubtrahend.negate());
        };
        Integer2.prototype.multiply = function (multiplier) {
          if (this.isZero()) {
            return Integer2.ZERO;
          }
          var theMultiplier = Integer2.fromValue(multiplier);
          if (theMultiplier.isZero()) {
            return Integer2.ZERO;
          }
          if (this.equals(Integer2.MIN_VALUE)) {
            return theMultiplier.isOdd() ? Integer2.MIN_VALUE : Integer2.ZERO;
          }
          if (theMultiplier.equals(Integer2.MIN_VALUE)) {
            return this.isOdd() ? Integer2.MIN_VALUE : Integer2.ZERO;
          }
          if (this.isNegative()) {
            if (theMultiplier.isNegative()) {
              return this.negate().multiply(theMultiplier.negate());
            } else {
              return this.negate().multiply(theMultiplier).negate();
            }
          } else if (theMultiplier.isNegative()) {
            return this.multiply(theMultiplier.negate()).negate();
          }
          if (this.lessThan(TWO_PWR_24) && theMultiplier.lessThan(TWO_PWR_24)) {
            return Integer2.fromNumber(
              this.toNumber() * theMultiplier.toNumber(),
            );
          }
          var a48 = this.high >>> 16;
          var a32 = this.high & 65535;
          var a16 = this.low >>> 16;
          var a00 = this.low & 65535;
          var b48 = theMultiplier.high >>> 16;
          var b32 = theMultiplier.high & 65535;
          var b16 = theMultiplier.low >>> 16;
          var b00 = theMultiplier.low & 65535;
          var c48 = 0;
          var c32 = 0;
          var c16 = 0;
          var c00 = 0;
          c00 += a00 * b00;
          c16 += c00 >>> 16;
          c00 &= 65535;
          c16 += a16 * b00;
          c32 += c16 >>> 16;
          c16 &= 65535;
          c16 += a00 * b16;
          c32 += c16 >>> 16;
          c16 &= 65535;
          c32 += a32 * b00;
          c48 += c32 >>> 16;
          c32 &= 65535;
          c32 += a16 * b16;
          c48 += c32 >>> 16;
          c32 &= 65535;
          c32 += a00 * b32;
          c48 += c32 >>> 16;
          c32 &= 65535;
          c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
          c48 &= 65535;
          return Integer2.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
        };
        Integer2.prototype.div = function (divisor) {
          var theDivisor = Integer2.fromValue(divisor);
          if (theDivisor.isZero()) {
            throw (0, error_1.newError)('division by zero');
          }
          if (this.isZero()) {
            return Integer2.ZERO;
          }
          var approx, rem, res;
          if (this.equals(Integer2.MIN_VALUE)) {
            if (
              theDivisor.equals(Integer2.ONE) ||
              theDivisor.equals(Integer2.NEG_ONE)
            ) {
              return Integer2.MIN_VALUE;
            }
            if (theDivisor.equals(Integer2.MIN_VALUE)) {
              return Integer2.ONE;
            } else {
              var halfThis = this.shiftRight(1);
              approx = halfThis.div(theDivisor).shiftLeft(1);
              if (approx.equals(Integer2.ZERO)) {
                return theDivisor.isNegative()
                  ? Integer2.ONE
                  : Integer2.NEG_ONE;
              } else {
                rem = this.subtract(theDivisor.multiply(approx));
                res = approx.add(rem.div(theDivisor));
                return res;
              }
            }
          } else if (theDivisor.equals(Integer2.MIN_VALUE)) {
            return Integer2.ZERO;
          }
          if (this.isNegative()) {
            if (theDivisor.isNegative()) {
              return this.negate().div(theDivisor.negate());
            }
            return this.negate().div(theDivisor).negate();
          } else if (theDivisor.isNegative()) {
            return this.div(theDivisor.negate()).negate();
          }
          res = Integer2.ZERO;
          rem = this;
          while (rem.greaterThanOrEqual(theDivisor)) {
            approx = Math.max(
              1,
              Math.floor(rem.toNumber() / theDivisor.toNumber()),
            );
            var log2 = Math.ceil(Math.log(approx) / Math.LN2);
            var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
            var approxRes = Integer2.fromNumber(approx);
            var approxRem = approxRes.multiply(theDivisor);
            while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
              approx -= delta;
              approxRes = Integer2.fromNumber(approx);
              approxRem = approxRes.multiply(theDivisor);
            }
            if (approxRes.isZero()) {
              approxRes = Integer2.ONE;
            }
            res = res.add(approxRes);
            rem = rem.subtract(approxRem);
          }
          return res;
        };
        Integer2.prototype.modulo = function (divisor) {
          var theDivisor = Integer2.fromValue(divisor);
          return this.subtract(this.div(theDivisor).multiply(theDivisor));
        };
        Integer2.prototype.not = function () {
          return Integer2.fromBits(~this.low, ~this.high);
        };
        Integer2.prototype.and = function (other) {
          var theOther = Integer2.fromValue(other);
          return Integer2.fromBits(
            this.low & theOther.low,
            this.high & theOther.high,
          );
        };
        Integer2.prototype.or = function (other) {
          var theOther = Integer2.fromValue(other);
          return Integer2.fromBits(
            this.low | theOther.low,
            this.high | theOther.high,
          );
        };
        Integer2.prototype.xor = function (other) {
          var theOther = Integer2.fromValue(other);
          return Integer2.fromBits(
            this.low ^ theOther.low,
            this.high ^ theOther.high,
          );
        };
        Integer2.prototype.shiftLeft = function (numBits) {
          var bitsCount = Integer2.toNumber(numBits);
          if ((bitsCount &= 63) === 0) {
            return Integer2.ZERO;
          } else if (bitsCount < 32) {
            return Integer2.fromBits(
              this.low << bitsCount,
              (this.high << bitsCount) | (this.low >>> (32 - bitsCount)),
            );
          } else {
            return Integer2.fromBits(0, this.low << (bitsCount - 32));
          }
        };
        Integer2.prototype.shiftRight = function (numBits) {
          var bitsCount = Integer2.toNumber(numBits);
          if ((bitsCount &= 63) === 0) {
            return Integer2.ZERO;
          } else if (numBits < 32) {
            return Integer2.fromBits(
              (this.low >>> bitsCount) | (this.high << (32 - bitsCount)),
              this.high >> bitsCount,
            );
          } else {
            return Integer2.fromBits(
              this.high >> (bitsCount - 32),
              this.high >= 0 ? 0 : -1,
            );
          }
        };
        Integer2.isInteger = function (obj) {
          return (obj && obj.__isInteger__) === true;
        };
        Integer2.fromInt = function (value) {
          var obj, cachedObj;
          value = value | 0;
          if (value >= -128 && value < 128) {
            cachedObj = INT_CACHE.get(value);
            if (cachedObj) {
              return cachedObj;
            }
          }
          obj = new Integer2(value, value < 0 ? -1 : 0);
          if (value >= -128 && value < 128) {
            INT_CACHE.set(value, obj);
          }
          return obj;
        };
        Integer2.fromBits = function (lowBits, highBits) {
          return new Integer2(lowBits, highBits);
        };
        Integer2.fromNumber = function (value) {
          if (isNaN(value) || !isFinite(value)) {
            return Integer2.ZERO;
          }
          if (value <= -TWO_PWR_63_DBL) {
            return Integer2.MIN_VALUE;
          }
          if (value + 1 >= TWO_PWR_63_DBL) {
            return Integer2.MAX_VALUE;
          }
          if (value < 0) {
            return Integer2.fromNumber(-value).negate();
          }
          return new Integer2(
            value % TWO_PWR_32_DBL | 0,
            (value / TWO_PWR_32_DBL) | 0,
          );
        };
        Integer2.fromString = function (str, radix) {
          if (str.length === 0) {
            throw (0, error_1.newError)('number format error: empty string');
          }
          if (
            str === 'NaN' ||
            str === 'Infinity' ||
            str === '+Infinity' ||
            str === '-Infinity'
          ) {
            return Integer2.ZERO;
          }
          radix = radix || 10;
          if (radix < 2 || radix > 36) {
            throw (0, error_1.newError)('radix out of range: ' + radix);
          }
          var p;
          if ((p = str.indexOf('-')) > 0) {
            throw (0, error_1.newError)(
              'number format error: interior "-" character: ' + str,
            );
          } else if (p === 0) {
            return Integer2.fromString(str.substring(1), radix).negate();
          }
          var radixToPower = Integer2.fromNumber(Math.pow(radix, 8));
          var result = Integer2.ZERO;
          for (var i = 0; i < str.length; i += 8) {
            var size = Math.min(8, str.length - i);
            var value = parseInt(str.substring(i, i + size), radix);
            if (size < 8) {
              var power = Integer2.fromNumber(Math.pow(radix, size));
              result = result.multiply(power).add(Integer2.fromNumber(value));
            } else {
              result = result.multiply(radixToPower);
              result = result.add(Integer2.fromNumber(value));
            }
          }
          return result;
        };
        Integer2.fromValue = function (val) {
          if (val instanceof Integer2) {
            return val;
          }
          if (typeof val === 'number') {
            return Integer2.fromNumber(val);
          }
          if (typeof val === 'string') {
            return Integer2.fromString(val);
          }
          if (typeof val === 'bigint') {
            return Integer2.fromString(val.toString());
          }
          return new Integer2(val.low, val.high);
        };
        Integer2.toNumber = function (val) {
          switch (typeof val) {
            case 'number':
              return val;
            case 'bigint':
              return Number(val);
            default:
              return Integer2.fromValue(val).toNumber();
          }
        };
        Integer2.toString = function (val, radix) {
          return Integer2.fromValue(val).toString(radix);
        };
        Integer2.inSafeRange = function (val) {
          return Integer2.fromValue(val).inSafeRange();
        };
        Integer2.ZERO = Integer2.fromInt(0);
        Integer2.ONE = Integer2.fromInt(1);
        Integer2.NEG_ONE = Integer2.fromInt(-1);
        Integer2.MAX_VALUE = Integer2.fromBits(4294967295 | 0, 2147483647 | 0);
        Integer2.MIN_VALUE = Integer2.fromBits(0, 2147483648 | 0);
        Integer2.MIN_SAFE_VALUE = Integer2.fromBits(
          1 | 0,
          18446744073707454e3 | 0,
        );
        Integer2.MAX_SAFE_VALUE = Integer2.fromBits(
          4294967295 | 0,
          2097151 | 0,
        );
        Integer2.__isInteger__ = true;
        return Integer2;
      })();
      Object.defineProperty(Integer.prototype, '__isInteger__', {
        value: true,
        enumerable: false,
        configurable: false,
      });
      var TWO_PWR_16_DBL = 1 << 16;
      var TWO_PWR_24_DBL = 1 << 24;
      var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
      var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
      var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
      var TWO_PWR_24 = Integer.fromInt(TWO_PWR_24_DBL);
      var int = Integer.fromValue;
      exports.int = int;
      var isInt = Integer.isInteger;
      exports.isInt = isInt;
      var inSafeRange = Integer.inSafeRange;
      exports.inSafeRange = inSafeRange;
      var toNumber = Integer.toNumber;
      exports.toNumber = toNumber;
      var toString = Integer.toString;
      exports.toString = toString;
      exports.default = Integer;
    },
  });

  // node_modules/neo4j-driver-core/lib/json.js
  var require_json = __commonJS({
    'node_modules/neo4j-driver-core/lib/json.js'(exports) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.stringify = void 0;
      function stringify(val) {
        return JSON.stringify(val, function (_, value) {
          return typeof value === 'bigint' ? value + 'n' : value;
        });
      }
      exports.stringify = stringify;
    },
  });

  // node_modules/neo4j-driver-core/lib/internal/util.js
  var require_util = __commonJS({
    'node_modules/neo4j-driver-core/lib/internal/util.js'(exports) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.createBrokenObject =
        exports.ENCRYPTION_OFF =
        exports.ENCRYPTION_ON =
        exports.validateQueryAndParameters =
        exports.assertValidDate =
        exports.assertNumberOrInteger =
        exports.assertNumber =
        exports.assertString =
        exports.assertObject =
        exports.isString =
        exports.isObject =
        exports.isEmptyObjectOrNull =
          void 0;
      var integer_1 = require_integer();
      var json_1 = require_json();
      var ENCRYPTION_ON = 'ENCRYPTION_ON';
      exports.ENCRYPTION_ON = ENCRYPTION_ON;
      var ENCRYPTION_OFF = 'ENCRYPTION_OFF';
      exports.ENCRYPTION_OFF = ENCRYPTION_OFF;
      function isEmptyObjectOrNull(obj) {
        if (obj === null) {
          return true;
        }
        if (!isObject(obj)) {
          return false;
        }
        for (var prop in obj) {
          if (Object.prototype.hasOwnProperty.bind(obj, prop)) {
            return false;
          }
        }
        return true;
      }
      exports.isEmptyObjectOrNull = isEmptyObjectOrNull;
      function isObject(obj) {
        return typeof obj === 'object' && !Array.isArray(obj) && obj !== null;
      }
      exports.isObject = isObject;
      function validateQueryAndParameters(query, parameters, opt) {
        var validatedQuery = '';
        var params = parameters || {};
        var skipAsserts =
          (opt === null || opt === void 0 ? void 0 : opt.skipAsserts) || false;
        if (typeof query === 'string') {
          validatedQuery = query;
        } else if (query instanceof String) {
          validatedQuery = query.toString();
        } else if (typeof query === 'object' && query.text) {
          validatedQuery = query.text;
          params = query.parameters || {};
        }
        if (!skipAsserts) {
          assertCypherQuery(validatedQuery);
          assertQueryParameters(params);
        }
        return { validatedQuery, params };
      }
      exports.validateQueryAndParameters = validateQueryAndParameters;
      function assertObject(obj, objName) {
        if (!isObject(obj)) {
          throw new TypeError(
            objName +
              ' expected to be an object but was: ' +
              (0, json_1.stringify)(obj),
          );
        }
        return obj;
      }
      exports.assertObject = assertObject;
      function assertString(obj, objName) {
        if (!isString(obj)) {
          throw new TypeError(
            objName +
              ' expected to be string but was: ' +
              (0, json_1.stringify)(obj),
          );
        }
        return obj;
      }
      exports.assertString = assertString;
      function assertNumber(obj, objName) {
        if (typeof obj !== 'number') {
          throw new TypeError(
            objName +
              ' expected to be a number but was: ' +
              (0, json_1.stringify)(obj),
          );
        }
        return obj;
      }
      exports.assertNumber = assertNumber;
      function assertNumberOrInteger(obj, objName) {
        if (
          typeof obj !== 'number' &&
          typeof obj !== 'bigint' &&
          !(0, integer_1.isInt)(obj)
        ) {
          throw new TypeError(
            objName +
              ' expected to be either a number or an Integer object but was: ' +
              (0, json_1.stringify)(obj),
          );
        }
        return obj;
      }
      exports.assertNumberOrInteger = assertNumberOrInteger;
      function assertValidDate(obj, objName) {
        if (Object.prototype.toString.call(obj) !== '[object Date]') {
          throw new TypeError(
            objName +
              ' expected to be a standard JavaScript Date but was: ' +
              (0, json_1.stringify)(obj),
          );
        }
        if (Number.isNaN(obj.getTime())) {
          throw new TypeError(
            objName +
              ' expected to be valid JavaScript Date but its time was NaN: ' +
              (0, json_1.stringify)(obj),
          );
        }
        return obj;
      }
      exports.assertValidDate = assertValidDate;
      function assertCypherQuery(obj) {
        assertString(obj, 'Cypher query');
        if (obj.trim().length === 0) {
          throw new TypeError(
            'Cypher query is expected to be a non-empty string.',
          );
        }
      }
      function assertQueryParameters(obj) {
        if (!isObject(obj)) {
          var constructor = obj.constructor ? ' ' + obj.constructor.name : '';
          throw new TypeError(
            'Query parameters are expected to either be undefined/null or an object, given:' +
              constructor +
              ' ' +
              obj,
          );
        }
      }
      function isString(str) {
        return Object.prototype.toString.call(str) === '[object String]';
      }
      exports.isString = isString;
      function createBrokenObject(error, object) {
        if (object === void 0) {
          object = {};
        }
        var fail = function () {
          throw error;
        };
        return new Proxy(object, {
          get: fail,
          set: fail,
          apply: fail,
          construct: fail,
          defineProperty: fail,
          deleteProperty: fail,
          getOwnPropertyDescriptor: fail,
          getPrototypeOf: fail,
          has: fail,
          isExtensible: fail,
          ownKeys: fail,
          preventExtensions: fail,
          setPrototypeOf: fail,
        });
      }
      exports.createBrokenObject = createBrokenObject;
    },
  });

  // node_modules/neo4j-driver-core/lib/internal/temporal-util.js
  var require_temporal_util = __commonJS({
    'node_modules/neo4j-driver-core/lib/internal/temporal-util.js'(exports) {
      'use strict';
      var __createBinding2 =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, 'default', {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o['default'] = v;
            });
      var __importStar2 =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== 'default' &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.floorMod =
        exports.floorDiv =
        exports.assertValidZoneId =
        exports.assertValidNanosecond =
        exports.assertValidSecond =
        exports.assertValidMinute =
        exports.assertValidHour =
        exports.assertValidDay =
        exports.assertValidMonth =
        exports.assertValidYear =
        exports.timeZoneOffsetInSeconds =
        exports.totalNanoseconds =
        exports.dateToIsoString =
        exports.timeZoneOffsetToIsoString =
        exports.timeToIsoString =
        exports.durationToIsoString =
        exports.dateToEpochDay =
        exports.localDateTimeToEpochSecond =
        exports.localTimeToNanoOfDay =
        exports.normalizeNanosecondsForDuration =
        exports.normalizeSecondsForDuration =
        exports.SECONDS_PER_DAY =
        exports.DAYS_PER_400_YEAR_CYCLE =
        exports.DAYS_0000_TO_1970 =
        exports.NANOS_PER_HOUR =
        exports.NANOS_PER_MINUTE =
        exports.NANOS_PER_MILLISECOND =
        exports.NANOS_PER_SECOND =
        exports.SECONDS_PER_HOUR =
        exports.SECONDS_PER_MINUTE =
        exports.MINUTES_PER_HOUR =
        exports.NANOSECOND_OF_SECOND_RANGE =
        exports.SECOND_OF_MINUTE_RANGE =
        exports.MINUTE_OF_HOUR_RANGE =
        exports.HOUR_OF_DAY_RANGE =
        exports.DAY_OF_MONTH_RANGE =
        exports.MONTH_OF_YEAR_RANGE =
        exports.YEAR_RANGE =
          void 0;
      var integer_1 = __importStar2(require_integer());
      var error_1 = require_error();
      var util_1 = require_util();
      var ValueRange = (function () {
        function ValueRange2(min, max) {
          this._minNumber = min;
          this._maxNumber = max;
          this._minInteger = (0, integer_1.int)(min);
          this._maxInteger = (0, integer_1.int)(max);
        }
        ValueRange2.prototype.contains = function (value) {
          if (
            (0, integer_1.isInt)(value) &&
            value instanceof integer_1.default
          ) {
            return (
              value.greaterThanOrEqual(this._minInteger) &&
              value.lessThanOrEqual(this._maxInteger)
            );
          } else if (typeof value === 'bigint') {
            var intValue = (0, integer_1.int)(value);
            return (
              intValue.greaterThanOrEqual(this._minInteger) &&
              intValue.lessThanOrEqual(this._maxInteger)
            );
          } else {
            return value >= this._minNumber && value <= this._maxNumber;
          }
        };
        ValueRange2.prototype.toString = function () {
          return '[' + this._minNumber + ', ' + this._maxNumber + ']';
        };
        return ValueRange2;
      })();
      exports.YEAR_RANGE = new ValueRange(-999999999, 999999999);
      exports.MONTH_OF_YEAR_RANGE = new ValueRange(1, 12);
      exports.DAY_OF_MONTH_RANGE = new ValueRange(1, 31);
      exports.HOUR_OF_DAY_RANGE = new ValueRange(0, 23);
      exports.MINUTE_OF_HOUR_RANGE = new ValueRange(0, 59);
      exports.SECOND_OF_MINUTE_RANGE = new ValueRange(0, 59);
      exports.NANOSECOND_OF_SECOND_RANGE = new ValueRange(0, 999999999);
      exports.MINUTES_PER_HOUR = 60;
      exports.SECONDS_PER_MINUTE = 60;
      exports.SECONDS_PER_HOUR =
        exports.SECONDS_PER_MINUTE * exports.MINUTES_PER_HOUR;
      exports.NANOS_PER_SECOND = 1e9;
      exports.NANOS_PER_MILLISECOND = 1e6;
      exports.NANOS_PER_MINUTE =
        exports.NANOS_PER_SECOND * exports.SECONDS_PER_MINUTE;
      exports.NANOS_PER_HOUR =
        exports.NANOS_PER_MINUTE * exports.MINUTES_PER_HOUR;
      exports.DAYS_0000_TO_1970 = 719528;
      exports.DAYS_PER_400_YEAR_CYCLE = 146097;
      exports.SECONDS_PER_DAY = 86400;
      function normalizeSecondsForDuration(seconds, nanoseconds) {
        return (0, integer_1.int)(seconds).add(
          floorDiv(nanoseconds, exports.NANOS_PER_SECOND),
        );
      }
      exports.normalizeSecondsForDuration = normalizeSecondsForDuration;
      function normalizeNanosecondsForDuration(nanoseconds) {
        return floorMod(nanoseconds, exports.NANOS_PER_SECOND);
      }
      exports.normalizeNanosecondsForDuration = normalizeNanosecondsForDuration;
      function localTimeToNanoOfDay(hour, minute, second, nanosecond) {
        hour = (0, integer_1.int)(hour);
        minute = (0, integer_1.int)(minute);
        second = (0, integer_1.int)(second);
        nanosecond = (0, integer_1.int)(nanosecond);
        var totalNanos = hour.multiply(exports.NANOS_PER_HOUR);
        totalNanos = totalNanos.add(minute.multiply(exports.NANOS_PER_MINUTE));
        totalNanos = totalNanos.add(second.multiply(exports.NANOS_PER_SECOND));
        return totalNanos.add(nanosecond);
      }
      exports.localTimeToNanoOfDay = localTimeToNanoOfDay;
      function localDateTimeToEpochSecond(
        year,
        month,
        day,
        hour,
        minute,
        second,
        nanosecond,
      ) {
        var epochDay = dateToEpochDay(year, month, day);
        var localTimeSeconds = localTimeToSecondOfDay(hour, minute, second);
        return epochDay.multiply(exports.SECONDS_PER_DAY).add(localTimeSeconds);
      }
      exports.localDateTimeToEpochSecond = localDateTimeToEpochSecond;
      function dateToEpochDay(year, month, day) {
        year = (0, integer_1.int)(year);
        month = (0, integer_1.int)(month);
        day = (0, integer_1.int)(day);
        var epochDay = year.multiply(365);
        if (year.greaterThanOrEqual(0)) {
          epochDay = epochDay.add(
            year
              .add(3)
              .div(4)
              .subtract(year.add(99).div(100))
              .add(year.add(399).div(400)),
          );
        } else {
          epochDay = epochDay.subtract(
            year.div(-4).subtract(year.div(-100)).add(year.div(-400)),
          );
        }
        epochDay = epochDay.add(month.multiply(367).subtract(362).div(12));
        epochDay = epochDay.add(day.subtract(1));
        if (month.greaterThan(2)) {
          epochDay = epochDay.subtract(1);
          if (!isLeapYear(year)) {
            epochDay = epochDay.subtract(1);
          }
        }
        return epochDay.subtract(exports.DAYS_0000_TO_1970);
      }
      exports.dateToEpochDay = dateToEpochDay;
      function durationToIsoString(months, days, seconds, nanoseconds) {
        var monthsString = formatNumber(months);
        var daysString = formatNumber(days);
        var secondsAndNanosecondsString =
          formatSecondsAndNanosecondsForDuration(seconds, nanoseconds);
        return (
          'P' +
          monthsString +
          'M' +
          daysString +
          'DT' +
          secondsAndNanosecondsString +
          'S'
        );
      }
      exports.durationToIsoString = durationToIsoString;
      function timeToIsoString(hour, minute, second, nanosecond) {
        var hourString = formatNumber(hour, 2);
        var minuteString = formatNumber(minute, 2);
        var secondString = formatNumber(second, 2);
        var nanosecondString = formatNanosecond(nanosecond);
        return (
          hourString +
          ':' +
          minuteString +
          ':' +
          secondString +
          nanosecondString
        );
      }
      exports.timeToIsoString = timeToIsoString;
      function timeZoneOffsetToIsoString(offsetSeconds) {
        offsetSeconds = (0, integer_1.int)(offsetSeconds);
        if (offsetSeconds.equals(0)) {
          return 'Z';
        }
        var isNegative = offsetSeconds.isNegative();
        if (isNegative) {
          offsetSeconds = offsetSeconds.multiply(-1);
        }
        var signPrefix = isNegative ? '-' : '+';
        var hours = formatNumber(
          offsetSeconds.div(exports.SECONDS_PER_HOUR),
          2,
        );
        var minutes = formatNumber(
          offsetSeconds
            .div(exports.SECONDS_PER_MINUTE)
            .modulo(exports.MINUTES_PER_HOUR),
          2,
        );
        var secondsValue = offsetSeconds.modulo(exports.SECONDS_PER_MINUTE);
        var seconds = secondsValue.equals(0)
          ? null
          : formatNumber(secondsValue, 2);
        return seconds
          ? '' + signPrefix + hours + ':' + minutes + ':' + seconds
          : '' + signPrefix + hours + ':' + minutes;
      }
      exports.timeZoneOffsetToIsoString = timeZoneOffsetToIsoString;
      function dateToIsoString(year, month, day) {
        year = (0, integer_1.int)(year);
        var isNegative = year.isNegative();
        if (isNegative) {
          year = year.multiply(-1);
        }
        var yearString = formatNumber(year, 4);
        if (isNegative) {
          yearString = '-' + yearString;
        }
        var monthString = formatNumber(month, 2);
        var dayString = formatNumber(day, 2);
        return yearString + '-' + monthString + '-' + dayString;
      }
      exports.dateToIsoString = dateToIsoString;
      function totalNanoseconds(standardDate, nanoseconds) {
        nanoseconds = nanoseconds || 0;
        var nanosFromMillis =
          standardDate.getMilliseconds() * exports.NANOS_PER_MILLISECOND;
        return add(nanoseconds, nanosFromMillis);
      }
      exports.totalNanoseconds = totalNanoseconds;
      function timeZoneOffsetInSeconds(standardDate) {
        var offsetInMinutes = standardDate.getTimezoneOffset();
        if (offsetInMinutes === 0) {
          return 0;
        }
        return -1 * offsetInMinutes * exports.SECONDS_PER_MINUTE;
      }
      exports.timeZoneOffsetInSeconds = timeZoneOffsetInSeconds;
      function assertValidYear(year) {
        return assertValidTemporalValue(year, exports.YEAR_RANGE, 'Year');
      }
      exports.assertValidYear = assertValidYear;
      function assertValidMonth(month) {
        return assertValidTemporalValue(
          month,
          exports.MONTH_OF_YEAR_RANGE,
          'Month',
        );
      }
      exports.assertValidMonth = assertValidMonth;
      function assertValidDay(day) {
        return assertValidTemporalValue(day, exports.DAY_OF_MONTH_RANGE, 'Day');
      }
      exports.assertValidDay = assertValidDay;
      function assertValidHour(hour) {
        return assertValidTemporalValue(
          hour,
          exports.HOUR_OF_DAY_RANGE,
          'Hour',
        );
      }
      exports.assertValidHour = assertValidHour;
      function assertValidMinute(minute) {
        return assertValidTemporalValue(
          minute,
          exports.MINUTE_OF_HOUR_RANGE,
          'Minute',
        );
      }
      exports.assertValidMinute = assertValidMinute;
      function assertValidSecond(second) {
        return assertValidTemporalValue(
          second,
          exports.SECOND_OF_MINUTE_RANGE,
          'Second',
        );
      }
      exports.assertValidSecond = assertValidSecond;
      function assertValidNanosecond(nanosecond) {
        return assertValidTemporalValue(
          nanosecond,
          exports.NANOSECOND_OF_SECOND_RANGE,
          'Nanosecond',
        );
      }
      exports.assertValidNanosecond = assertValidNanosecond;
      function assertValidZoneId(fieldName, zoneId) {
        try {
          Intl.DateTimeFormat(void 0, { timeZone: zoneId });
        } catch (e) {
          throw (0, error_1.newError)(
            fieldName +
              ' is expected to be a valid ZoneId but was: "' +
              zoneId +
              '"',
          );
        }
      }
      exports.assertValidZoneId = assertValidZoneId;
      function assertValidTemporalValue(value, range, name) {
        (0, util_1.assertNumberOrInteger)(value, name);
        if (!range.contains(value)) {
          throw (0, error_1.newError)(
            name +
              ' is expected to be in range ' +
              range +
              ' but was: ' +
              value,
          );
        }
        return value;
      }
      function localTimeToSecondOfDay(hour, minute, second) {
        hour = (0, integer_1.int)(hour);
        minute = (0, integer_1.int)(minute);
        second = (0, integer_1.int)(second);
        var totalSeconds = hour.multiply(exports.SECONDS_PER_HOUR);
        totalSeconds = totalSeconds.add(
          minute.multiply(exports.SECONDS_PER_MINUTE),
        );
        return totalSeconds.add(second);
      }
      function isLeapYear(year) {
        year = (0, integer_1.int)(year);
        if (!year.modulo(4).equals(0)) {
          return false;
        } else if (!year.modulo(100).equals(0)) {
          return true;
        } else if (!year.modulo(400).equals(0)) {
          return false;
        } else {
          return true;
        }
      }
      function floorDiv(x, y) {
        x = (0, integer_1.int)(x);
        y = (0, integer_1.int)(y);
        var result = x.div(y);
        if (
          x.isPositive() !== y.isPositive() &&
          result.multiply(y).notEquals(x)
        ) {
          result = result.subtract(1);
        }
        return result;
      }
      exports.floorDiv = floorDiv;
      function floorMod(x, y) {
        x = (0, integer_1.int)(x);
        y = (0, integer_1.int)(y);
        return x.subtract(floorDiv(x, y).multiply(y));
      }
      exports.floorMod = floorMod;
      function formatSecondsAndNanosecondsForDuration(seconds, nanoseconds) {
        seconds = (0, integer_1.int)(seconds);
        nanoseconds = (0, integer_1.int)(nanoseconds);
        var secondsString;
        var nanosecondsString;
        var secondsNegative = seconds.isNegative();
        var nanosecondsGreaterThanZero = nanoseconds.greaterThan(0);
        if (secondsNegative && nanosecondsGreaterThanZero) {
          if (seconds.equals(-1)) {
            secondsString = '-0';
          } else {
            secondsString = seconds.add(1).toString();
          }
        } else {
          secondsString = seconds.toString();
        }
        if (nanosecondsGreaterThanZero) {
          if (secondsNegative) {
            nanosecondsString = formatNanosecond(
              nanoseconds
                .negate()
                .add(2 * exports.NANOS_PER_SECOND)
                .modulo(exports.NANOS_PER_SECOND),
            );
          } else {
            nanosecondsString = formatNanosecond(
              nanoseconds
                .add(exports.NANOS_PER_SECOND)
                .modulo(exports.NANOS_PER_SECOND),
            );
          }
        }
        return nanosecondsString
          ? secondsString + nanosecondsString
          : secondsString;
      }
      function formatNanosecond(value) {
        value = (0, integer_1.int)(value);
        return value.equals(0) ? '' : '.' + formatNumber(value, 9);
      }
      function formatNumber(num, stringLength) {
        num = (0, integer_1.int)(num);
        var isNegative = num.isNegative();
        if (isNegative) {
          num = num.negate();
        }
        var numString = num.toString();
        if (stringLength) {
          while (numString.length < stringLength) {
            numString = '0' + numString;
          }
        }
        return isNegative ? '-' + numString : numString;
      }
      function add(x, y) {
        if (x instanceof integer_1.default) {
          return x.add(y);
        } else if (typeof x === 'bigint') {
          return x + BigInt(y);
        }
        return x + y;
      }
    },
  });

  // node_modules/neo4j-driver-core/lib/temporal-types.js
  var require_temporal_types = __commonJS({
    'node_modules/neo4j-driver-core/lib/temporal-types.js'(exports) {
      'use strict';
      var __createBinding2 =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, 'default', {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o['default'] = v;
            });
      var __importStar2 =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== 'default' &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      var __read2 =
        (exports && exports.__read) ||
        function (o, n) {
          var m = typeof Symbol === 'function' && o[Symbol.iterator];
          if (!m) return o;
          var i = m.call(o),
            r,
            ar = [],
            e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r && !r.done && (m = i['return'])) m.call(i);
            } finally {
              if (e) throw e.error;
            }
          }
          return ar;
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.isDateTime =
        exports.DateTime =
        exports.isLocalDateTime =
        exports.LocalDateTime =
        exports.isDate =
        exports.Date =
        exports.isTime =
        exports.Time =
        exports.isLocalTime =
        exports.LocalTime =
        exports.isDuration =
        exports.Duration =
          void 0;
      var util = __importStar2(require_temporal_util());
      var util_1 = require_util();
      var error_1 = require_error();
      var integer_1 = __importStar2(require_integer());
      var IDENTIFIER_PROPERTY_ATTRIBUTES = {
        value: true,
        enumerable: false,
        configurable: false,
        writable: false,
      };
      var DURATION_IDENTIFIER_PROPERTY = '__isDuration__';
      var LOCAL_TIME_IDENTIFIER_PROPERTY = '__isLocalTime__';
      var TIME_IDENTIFIER_PROPERTY = '__isTime__';
      var DATE_IDENTIFIER_PROPERTY = '__isDate__';
      var LOCAL_DATE_TIME_IDENTIFIER_PROPERTY = '__isLocalDateTime__';
      var DATE_TIME_IDENTIFIER_PROPERTY = '__isDateTime__';
      var Duration = (function () {
        function Duration2(months, days, seconds, nanoseconds) {
          this.months = (0, util_1.assertNumberOrInteger)(months, 'Months');
          this.days = (0, util_1.assertNumberOrInteger)(days, 'Days');
          (0, util_1.assertNumberOrInteger)(seconds, 'Seconds');
          (0, util_1.assertNumberOrInteger)(nanoseconds, 'Nanoseconds');
          this.seconds = util.normalizeSecondsForDuration(seconds, nanoseconds);
          this.nanoseconds = util.normalizeNanosecondsForDuration(nanoseconds);
          Object.freeze(this);
        }
        Duration2.prototype.toString = function () {
          return util.durationToIsoString(
            this.months,
            this.days,
            this.seconds,
            this.nanoseconds,
          );
        };
        return Duration2;
      })();
      exports.Duration = Duration;
      Object.defineProperty(
        Duration.prototype,
        DURATION_IDENTIFIER_PROPERTY,
        IDENTIFIER_PROPERTY_ATTRIBUTES,
      );
      function isDuration(obj) {
        return hasIdentifierProperty(obj, DURATION_IDENTIFIER_PROPERTY);
      }
      exports.isDuration = isDuration;
      var LocalTime = (function () {
        function LocalTime2(hour, minute, second, nanosecond) {
          this.hour = util.assertValidHour(hour);
          this.minute = util.assertValidMinute(minute);
          this.second = util.assertValidSecond(second);
          this.nanosecond = util.assertValidNanosecond(nanosecond);
          Object.freeze(this);
        }
        LocalTime2.fromStandardDate = function (standardDate, nanosecond) {
          verifyStandardDateAndNanos(standardDate, nanosecond);
          var totalNanoseconds = util.totalNanoseconds(
            standardDate,
            nanosecond,
          );
          return new LocalTime2(
            standardDate.getHours(),
            standardDate.getMinutes(),
            standardDate.getSeconds(),
            totalNanoseconds instanceof integer_1.default
              ? totalNanoseconds.toInt()
              : typeof totalNanoseconds === 'bigint'
              ? (0, integer_1.int)(totalNanoseconds).toInt()
              : totalNanoseconds,
          );
        };
        LocalTime2.prototype.toString = function () {
          return util.timeToIsoString(
            this.hour,
            this.minute,
            this.second,
            this.nanosecond,
          );
        };
        return LocalTime2;
      })();
      exports.LocalTime = LocalTime;
      Object.defineProperty(
        LocalTime.prototype,
        LOCAL_TIME_IDENTIFIER_PROPERTY,
        IDENTIFIER_PROPERTY_ATTRIBUTES,
      );
      function isLocalTime(obj) {
        return hasIdentifierProperty(obj, LOCAL_TIME_IDENTIFIER_PROPERTY);
      }
      exports.isLocalTime = isLocalTime;
      var Time = (function () {
        function Time2(
          hour,
          minute,
          second,
          nanosecond,
          timeZoneOffsetSeconds,
        ) {
          this.hour = util.assertValidHour(hour);
          this.minute = util.assertValidMinute(minute);
          this.second = util.assertValidSecond(second);
          this.nanosecond = util.assertValidNanosecond(nanosecond);
          this.timeZoneOffsetSeconds = (0, util_1.assertNumberOrInteger)(
            timeZoneOffsetSeconds,
            'Time zone offset in seconds',
          );
          Object.freeze(this);
        }
        Time2.fromStandardDate = function (standardDate, nanosecond) {
          verifyStandardDateAndNanos(standardDate, nanosecond);
          return new Time2(
            standardDate.getHours(),
            standardDate.getMinutes(),
            standardDate.getSeconds(),
            (0, integer_1.toNumber)(
              util.totalNanoseconds(standardDate, nanosecond),
            ),
            util.timeZoneOffsetInSeconds(standardDate),
          );
        };
        Time2.prototype.toString = function () {
          return (
            util.timeToIsoString(
              this.hour,
              this.minute,
              this.second,
              this.nanosecond,
            ) + util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds)
          );
        };
        return Time2;
      })();
      exports.Time = Time;
      Object.defineProperty(
        Time.prototype,
        TIME_IDENTIFIER_PROPERTY,
        IDENTIFIER_PROPERTY_ATTRIBUTES,
      );
      function isTime(obj) {
        return hasIdentifierProperty(obj, TIME_IDENTIFIER_PROPERTY);
      }
      exports.isTime = isTime;
      var Date2 = (function () {
        function Date3(year, month, day) {
          this.year = util.assertValidYear(year);
          this.month = util.assertValidMonth(month);
          this.day = util.assertValidDay(day);
          Object.freeze(this);
        }
        Date3.fromStandardDate = function (standardDate) {
          verifyStandardDateAndNanos(standardDate);
          return new Date3(
            standardDate.getFullYear(),
            standardDate.getMonth() + 1,
            standardDate.getDate(),
          );
        };
        Date3.prototype.toString = function () {
          return util.dateToIsoString(this.year, this.month, this.day);
        };
        return Date3;
      })();
      exports.Date = Date2;
      Object.defineProperty(
        Date2.prototype,
        DATE_IDENTIFIER_PROPERTY,
        IDENTIFIER_PROPERTY_ATTRIBUTES,
      );
      function isDate(obj) {
        return hasIdentifierProperty(obj, DATE_IDENTIFIER_PROPERTY);
      }
      exports.isDate = isDate;
      var LocalDateTime = (function () {
        function LocalDateTime2(
          year,
          month,
          day,
          hour,
          minute,
          second,
          nanosecond,
        ) {
          this.year = util.assertValidYear(year);
          this.month = util.assertValidMonth(month);
          this.day = util.assertValidDay(day);
          this.hour = util.assertValidHour(hour);
          this.minute = util.assertValidMinute(minute);
          this.second = util.assertValidSecond(second);
          this.nanosecond = util.assertValidNanosecond(nanosecond);
          Object.freeze(this);
        }
        LocalDateTime2.fromStandardDate = function (standardDate, nanosecond) {
          verifyStandardDateAndNanos(standardDate, nanosecond);
          return new LocalDateTime2(
            standardDate.getFullYear(),
            standardDate.getMonth() + 1,
            standardDate.getDate(),
            standardDate.getHours(),
            standardDate.getMinutes(),
            standardDate.getSeconds(),
            (0, integer_1.toNumber)(
              util.totalNanoseconds(standardDate, nanosecond),
            ),
          );
        };
        LocalDateTime2.prototype.toString = function () {
          return localDateTimeToString(
            this.year,
            this.month,
            this.day,
            this.hour,
            this.minute,
            this.second,
            this.nanosecond,
          );
        };
        return LocalDateTime2;
      })();
      exports.LocalDateTime = LocalDateTime;
      Object.defineProperty(
        LocalDateTime.prototype,
        LOCAL_DATE_TIME_IDENTIFIER_PROPERTY,
        IDENTIFIER_PROPERTY_ATTRIBUTES,
      );
      function isLocalDateTime(obj) {
        return hasIdentifierProperty(obj, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY);
      }
      exports.isLocalDateTime = isLocalDateTime;
      var DateTime = (function () {
        function DateTime2(
          year,
          month,
          day,
          hour,
          minute,
          second,
          nanosecond,
          timeZoneOffsetSeconds,
          timeZoneId,
        ) {
          this.year = util.assertValidYear(year);
          this.month = util.assertValidMonth(month);
          this.day = util.assertValidDay(day);
          this.hour = util.assertValidHour(hour);
          this.minute = util.assertValidMinute(minute);
          this.second = util.assertValidSecond(second);
          this.nanosecond = util.assertValidNanosecond(nanosecond);
          var _a = __read2(
              verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId),
              2,
            ),
            offset = _a[0],
            id = _a[1];
          this.timeZoneOffsetSeconds = offset;
          this.timeZoneId = id || void 0;
          Object.freeze(this);
        }
        DateTime2.fromStandardDate = function (standardDate, nanosecond) {
          verifyStandardDateAndNanos(standardDate, nanosecond);
          return new DateTime2(
            standardDate.getFullYear(),
            standardDate.getMonth() + 1,
            standardDate.getDate(),
            standardDate.getHours(),
            standardDate.getMinutes(),
            standardDate.getSeconds(),
            (0, integer_1.toNumber)(
              util.totalNanoseconds(standardDate, nanosecond),
            ),
            util.timeZoneOffsetInSeconds(standardDate),
            null,
          );
        };
        DateTime2.prototype.toString = function () {
          var localDateTimeStr = localDateTimeToString(
            this.year,
            this.month,
            this.day,
            this.hour,
            this.minute,
            this.second,
            this.nanosecond,
          );
          var timeZoneStr = this.timeZoneId
            ? '[' + this.timeZoneId + ']'
            : util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds || 0);
          return localDateTimeStr + timeZoneStr;
        };
        return DateTime2;
      })();
      exports.DateTime = DateTime;
      Object.defineProperty(
        DateTime.prototype,
        DATE_TIME_IDENTIFIER_PROPERTY,
        IDENTIFIER_PROPERTY_ATTRIBUTES,
      );
      function isDateTime(obj) {
        return hasIdentifierProperty(obj, DATE_TIME_IDENTIFIER_PROPERTY);
      }
      exports.isDateTime = isDateTime;
      function hasIdentifierProperty(obj, property) {
        return (obj && obj[property]) === true;
      }
      function localDateTimeToString(
        year,
        month,
        day,
        hour,
        minute,
        second,
        nanosecond,
      ) {
        return (
          util.dateToIsoString(year, month, day) +
          'T' +
          util.timeToIsoString(hour, minute, second, nanosecond)
        );
      }
      function verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId) {
        var offsetDefined =
          timeZoneOffsetSeconds || timeZoneOffsetSeconds === 0;
        var idDefined = timeZoneId && timeZoneId !== '';
        if (!offsetDefined && !idDefined) {
          throw (0, error_1.newError)(
            'Unable to create DateTime without either time zone offset or id. Please specify either of them. Given offset: ' +
              timeZoneOffsetSeconds +
              ' and id: ' +
              timeZoneId,
          );
        }
        var result = [void 0, void 0];
        if (offsetDefined) {
          (0, util_1.assertNumberOrInteger)(
            timeZoneOffsetSeconds,
            'Time zone offset in seconds',
          );
          result[0] = timeZoneOffsetSeconds;
        }
        if (idDefined) {
          (0, util_1.assertString)(timeZoneId, 'Time zone ID');
          util.assertValidZoneId('Time zone ID', timeZoneId);
          result[1] = timeZoneId;
        }
        return result;
      }
      function verifyStandardDateAndNanos(standardDate, nanosecond) {
        (0, util_1.assertValidDate)(standardDate, 'Standard date');
        if (nanosecond !== null && nanosecond !== void 0) {
          (0, util_1.assertNumberOrInteger)(nanosecond, 'Nanosecond');
        }
      }
    },
  });

  // node_modules/neo4j-driver-core/lib/graph-types.js
  var require_graph_types = __commonJS({
    'node_modules/neo4j-driver-core/lib/graph-types.js'(exports) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.isPathSegment =
        exports.PathSegment =
        exports.isPath =
        exports.Path =
        exports.isUnboundRelationship =
        exports.UnboundRelationship =
        exports.isRelationship =
        exports.Relationship =
        exports.isNode =
        exports.Node =
          void 0;
      var json_1 = require_json();
      var IDENTIFIER_PROPERTY_ATTRIBUTES = {
        value: true,
        enumerable: false,
        configurable: false,
        writable: false,
      };
      var NODE_IDENTIFIER_PROPERTY = '__isNode__';
      var RELATIONSHIP_IDENTIFIER_PROPERTY = '__isRelationship__';
      var UNBOUND_RELATIONSHIP_IDENTIFIER_PROPERTY =
        '__isUnboundRelationship__';
      var PATH_IDENTIFIER_PROPERTY = '__isPath__';
      var PATH_SEGMENT_IDENTIFIER_PROPERTY = '__isPathSegment__';
      function hasIdentifierProperty(obj, property) {
        return (obj && obj[property]) === true;
      }
      var Node = (function () {
        function Node2(identity2, labels, properties) {
          this.identity = identity2;
          this.labels = labels;
          this.properties = properties;
        }
        Node2.prototype.toString = function () {
          var s = '(' + this.identity;
          for (var i = 0; i < this.labels.length; i++) {
            s += ':' + this.labels[i];
          }
          var keys = Object.keys(this.properties);
          if (keys.length > 0) {
            s += ' {';
            for (var i = 0; i < keys.length; i++) {
              if (i > 0) s += ',';
              s +=
                keys[i] + ':' + (0, json_1.stringify)(this.properties[keys[i]]);
            }
            s += '}';
          }
          s += ')';
          return s;
        };
        return Node2;
      })();
      exports.Node = Node;
      Object.defineProperty(
        Node.prototype,
        NODE_IDENTIFIER_PROPERTY,
        IDENTIFIER_PROPERTY_ATTRIBUTES,
      );
      function isNode(obj) {
        return hasIdentifierProperty(obj, NODE_IDENTIFIER_PROPERTY);
      }
      exports.isNode = isNode;
      var Relationship = (function () {
        function Relationship2(identity2, start, end, type, properties) {
          this.identity = identity2;
          this.start = start;
          this.end = end;
          this.type = type;
          this.properties = properties;
        }
        Relationship2.prototype.toString = function () {
          var s = '(' + this.start + ')-[:' + this.type;
          var keys = Object.keys(this.properties);
          if (keys.length > 0) {
            s += ' {';
            for (var i = 0; i < keys.length; i++) {
              if (i > 0) s += ',';
              s +=
                keys[i] + ':' + (0, json_1.stringify)(this.properties[keys[i]]);
            }
            s += '}';
          }
          s += ']->(' + this.end + ')';
          return s;
        };
        return Relationship2;
      })();
      exports.Relationship = Relationship;
      Object.defineProperty(
        Relationship.prototype,
        RELATIONSHIP_IDENTIFIER_PROPERTY,
        IDENTIFIER_PROPERTY_ATTRIBUTES,
      );
      function isRelationship(obj) {
        return hasIdentifierProperty(obj, RELATIONSHIP_IDENTIFIER_PROPERTY);
      }
      exports.isRelationship = isRelationship;
      var UnboundRelationship = (function () {
        function UnboundRelationship2(identity2, type, properties) {
          this.identity = identity2;
          this.type = type;
          this.properties = properties;
        }
        UnboundRelationship2.prototype.bind = function (start, end) {
          return new Relationship(
            this.identity,
            start,
            end,
            this.type,
            this.properties,
          );
        };
        UnboundRelationship2.prototype.toString = function () {
          var s = '-[:' + this.type;
          var keys = Object.keys(this.properties);
          if (keys.length > 0) {
            s += ' {';
            for (var i = 0; i < keys.length; i++) {
              if (i > 0) s += ',';
              s +=
                keys[i] + ':' + (0, json_1.stringify)(this.properties[keys[i]]);
            }
            s += '}';
          }
          s += ']->';
          return s;
        };
        return UnboundRelationship2;
      })();
      exports.UnboundRelationship = UnboundRelationship;
      Object.defineProperty(
        UnboundRelationship.prototype,
        UNBOUND_RELATIONSHIP_IDENTIFIER_PROPERTY,
        IDENTIFIER_PROPERTY_ATTRIBUTES,
      );
      function isUnboundRelationship(obj) {
        return hasIdentifierProperty(
          obj,
          UNBOUND_RELATIONSHIP_IDENTIFIER_PROPERTY,
        );
      }
      exports.isUnboundRelationship = isUnboundRelationship;
      var PathSegment = (function () {
        function PathSegment2(start, rel, end) {
          this.start = start;
          this.relationship = rel;
          this.end = end;
        }
        return PathSegment2;
      })();
      exports.PathSegment = PathSegment;
      Object.defineProperty(
        PathSegment.prototype,
        PATH_SEGMENT_IDENTIFIER_PROPERTY,
        IDENTIFIER_PROPERTY_ATTRIBUTES,
      );
      function isPathSegment(obj) {
        return hasIdentifierProperty(obj, PATH_SEGMENT_IDENTIFIER_PROPERTY);
      }
      exports.isPathSegment = isPathSegment;
      var Path = (function () {
        function Path2(start, end, segments) {
          this.start = start;
          this.end = end;
          this.segments = segments;
          this.length = segments.length;
        }
        return Path2;
      })();
      exports.Path = Path;
      Object.defineProperty(
        Path.prototype,
        PATH_IDENTIFIER_PROPERTY,
        IDENTIFIER_PROPERTY_ATTRIBUTES,
      );
      function isPath(obj) {
        return hasIdentifierProperty(obj, PATH_IDENTIFIER_PROPERTY);
      }
      exports.isPath = isPath;
    },
  });

  // node_modules/neo4j-driver-core/lib/record.js
  var require_record = __commonJS({
    'node_modules/neo4j-driver-core/lib/record.js'(exports) {
      'use strict';
      var __generator2 =
        (exports && exports.__generator) ||
        function (thisArg, body) {
          var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: [],
            },
            f,
            y,
            t,
            g;
          return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === 'function' &&
              (g[Symbol.iterator] = function () {
                return this;
              }),
            g
          );
          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f) throw new TypeError('Generator is already executing.');
            while (_)
              try {
                if (
                  ((f = 1),
                  y &&
                    (t =
                      op[0] & 2
                        ? y['return']
                        : op[0]
                        ? y['throw'] || ((t = y['return']) && t.call(y), 0)
                        : y.next) &&
                    !(t = t.call(y, op[1])).done)
                )
                  return t;
                if (((y = 0), t)) op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (
                      !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                      (op[0] === 6 || op[0] === 2)
                    ) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
      var __values2 =
        (exports && exports.__values) ||
        function (o) {
          var s = typeof Symbol === 'function' && Symbol.iterator,
            m = s && o[s],
            i = 0;
          if (m) return m.call(o);
          if (o && typeof o.length === 'number')
            return {
              next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
              },
            };
          throw new TypeError(
            s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.',
          );
        };
      var __read2 =
        (exports && exports.__read) ||
        function (o, n) {
          var m = typeof Symbol === 'function' && o[Symbol.iterator];
          if (!m) return o;
          var i = m.call(o),
            r,
            ar = [],
            e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r && !r.done && (m = i['return'])) m.call(i);
            } finally {
              if (e) throw e.error;
            }
          }
          return ar;
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var error_1 = require_error();
      function generateFieldLookup(keys) {
        var lookup = {};
        keys.forEach(function (name, idx) {
          lookup[name] = idx;
        });
        return lookup;
      }
      var Record = (function () {
        function Record2(keys, fields, fieldLookup) {
          this.keys = keys;
          this.length = keys.length;
          this._fields = fields;
          this._fieldLookup = fieldLookup || generateFieldLookup(keys);
        }
        Record2.prototype.forEach = function (visitor) {
          var e_1, _a;
          try {
            for (
              var _b = __values2(this.entries()), _c = _b.next();
              !_c.done;
              _c = _b.next()
            ) {
              var _d = __read2(_c.value, 2),
                key = _d[0],
                value = _d[1];
              visitor(value, key, this);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        };
        Record2.prototype.map = function (visitor) {
          var e_2, _a;
          var resultArray = [];
          try {
            for (
              var _b = __values2(this.entries()), _c = _b.next();
              !_c.done;
              _c = _b.next()
            ) {
              var _d = __read2(_c.value, 2),
                key = _d[0],
                value = _d[1];
              resultArray.push(visitor(value, key, this));
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
              if (e_2) throw e_2.error;
            }
          }
          return resultArray;
        };
        Record2.prototype.entries = function () {
          var i;
          return __generator2(this, function (_a) {
            switch (_a.label) {
              case 0:
                i = 0;
                _a.label = 1;
              case 1:
                if (!(i < this.keys.length)) return [3, 4];
                return [4, [this.keys[i], this._fields[i]]];
              case 2:
                _a.sent();
                _a.label = 3;
              case 3:
                i++;
                return [3, 1];
              case 4:
                return [2];
            }
          });
        };
        Record2.prototype.values = function () {
          var i;
          return __generator2(this, function (_a) {
            switch (_a.label) {
              case 0:
                i = 0;
                _a.label = 1;
              case 1:
                if (!(i < this.keys.length)) return [3, 4];
                return [4, this._fields[i]];
              case 2:
                _a.sent();
                _a.label = 3;
              case 3:
                i++;
                return [3, 1];
              case 4:
                return [2];
            }
          });
        };
        Record2.prototype[Symbol.iterator] = function () {
          var i;
          return __generator2(this, function (_a) {
            switch (_a.label) {
              case 0:
                i = 0;
                _a.label = 1;
              case 1:
                if (!(i < this.keys.length)) return [3, 4];
                return [4, this._fields[i]];
              case 2:
                _a.sent();
                _a.label = 3;
              case 3:
                i++;
                return [3, 1];
              case 4:
                return [2];
            }
          });
        };
        Record2.prototype.toObject = function () {
          var e_3, _a;
          var obj = {};
          try {
            for (
              var _b = __values2(this.entries()), _c = _b.next();
              !_c.done;
              _c = _b.next()
            ) {
              var _d = __read2(_c.value, 2),
                key = _d[0],
                value = _d[1];
              obj[key] = value;
            }
          } catch (e_3_1) {
            e_3 = { error: e_3_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
              if (e_3) throw e_3.error;
            }
          }
          return obj;
        };
        Record2.prototype.get = function (key) {
          var index;
          if (!(typeof key === 'number')) {
            index = this._fieldLookup[key];
            if (index === void 0) {
              throw (0, error_1.newError)(
                "This record has no field with key '" +
                  key +
                  "', available key are: [" +
                  this.keys +
                  '].',
              );
            }
          } else {
            index = key;
          }
          if (index > this._fields.length - 1 || index < 0) {
            throw (0, error_1.newError)(
              "This record has no field with index '" +
                index +
                "'. Remember that indexes start at `0`, and make sure your query returns records in the shape you meant it to.",
            );
          }
          return this._fields[index];
        };
        Record2.prototype.has = function (key) {
          if (typeof key === 'number') {
            return key >= 0 && key < this._fields.length;
          }
          return this._fieldLookup[key] !== void 0;
        };
        return Record2;
      })();
      exports.default = Record;
    },
  });

  // node_modules/neo4j-driver-core/lib/spatial-types.js
  var require_spatial_types = __commonJS({
    'node_modules/neo4j-driver-core/lib/spatial-types.js'(exports) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.isPoint = exports.Point = void 0;
      var util_1 = require_util();
      var POINT_IDENTIFIER_PROPERTY = '__isPoint__';
      var Point = (function () {
        function Point2(srid, x, y, z) {
          this.srid = (0, util_1.assertNumberOrInteger)(srid, 'SRID');
          this.x = (0, util_1.assertNumber)(x, 'X coordinate');
          this.y = (0, util_1.assertNumber)(y, 'Y coordinate');
          this.z =
            z === null || z === void 0
              ? z
              : (0, util_1.assertNumber)(z, 'Z coordinate');
          Object.freeze(this);
        }
        Point2.prototype.toString = function () {
          return this.z || this.z === 0
            ? 'Point{srid=' +
                formatAsFloat(this.srid) +
                ', x=' +
                formatAsFloat(this.x) +
                ', y=' +
                formatAsFloat(this.y) +
                ', z=' +
                formatAsFloat(this.z) +
                '}'
            : 'Point{srid=' +
                formatAsFloat(this.srid) +
                ', x=' +
                formatAsFloat(this.x) +
                ', y=' +
                formatAsFloat(this.y) +
                '}';
        };
        return Point2;
      })();
      exports.Point = Point;
      function formatAsFloat(number) {
        return Number.isInteger(number) ? number + '.0' : number.toString();
      }
      Object.defineProperty(Point.prototype, POINT_IDENTIFIER_PROPERTY, {
        value: true,
        enumerable: false,
        configurable: false,
        writable: false,
      });
      function isPoint(obj) {
        return (obj && obj[POINT_IDENTIFIER_PROPERTY]) === true;
      }
      exports.isPoint = isPoint;
    },
  });

  // node_modules/neo4j-driver-core/lib/result-summary.js
  var require_result_summary = __commonJS({
    'node_modules/neo4j-driver-core/lib/result-summary.js'(exports) {
      'use strict';
      var __createBinding2 =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, 'default', {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o['default'] = v;
            });
      var __importStar2 =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== 'default' &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.Stats =
        exports.QueryStatistics =
        exports.ProfiledPlan =
        exports.Plan =
        exports.Notification =
        exports.ServerInfo =
        exports.queryType =
          void 0;
      var integer_1 = __importStar2(require_integer());
      var ResultSummary = (function () {
        function ResultSummary2(query, parameters, metadata, protocolVersion) {
          this.query = { text: query, parameters };
          this.queryType = metadata.type;
          this.counters = new QueryStatistics(metadata.stats || {});
          this.updateStatistics = this.counters;
          this.plan =
            metadata.plan || metadata.profile
              ? new Plan(metadata.plan || metadata.profile)
              : false;
          this.profile = metadata.profile
            ? new ProfiledPlan(metadata.profile)
            : false;
          this.notifications = this._buildNotifications(metadata.notifications);
          this.server = new ServerInfo(metadata.server, protocolVersion);
          this.resultConsumedAfter = metadata.result_consumed_after;
          this.resultAvailableAfter = metadata.result_available_after;
          this.database = { name: metadata.db || null };
        }
        ResultSummary2.prototype._buildNotifications = function (
          notifications,
        ) {
          if (!notifications) {
            return [];
          }
          return notifications.map(function (n) {
            return new Notification(n);
          });
        };
        ResultSummary2.prototype.hasPlan = function () {
          return this.plan instanceof Plan;
        };
        ResultSummary2.prototype.hasProfile = function () {
          return this.profile instanceof ProfiledPlan;
        };
        return ResultSummary2;
      })();
      var Plan = (function () {
        function Plan2(plan) {
          this.operatorType = plan.operatorType;
          this.identifiers = plan.identifiers;
          this.arguments = plan.args;
          this.children = plan.children
            ? plan.children.map(function (child) {
                return new Plan2(child);
              })
            : [];
        }
        return Plan2;
      })();
      exports.Plan = Plan;
      var ProfiledPlan = (function () {
        function ProfiledPlan2(profile) {
          this.operatorType = profile.operatorType;
          this.identifiers = profile.identifiers;
          this.arguments = profile.args;
          this.dbHits = valueOrDefault('dbHits', profile);
          this.rows = valueOrDefault('rows', profile);
          this.pageCacheMisses = valueOrDefault('pageCacheMisses', profile);
          this.pageCacheHits = valueOrDefault('pageCacheHits', profile);
          this.pageCacheHitRatio = valueOrDefault('pageCacheHitRatio', profile);
          this.time = valueOrDefault('time', profile);
          this.children = profile.children
            ? profile.children.map(function (child) {
                return new ProfiledPlan2(child);
              })
            : [];
        }
        ProfiledPlan2.prototype.hasPageCacheStats = function () {
          return (
            this.pageCacheMisses > 0 ||
            this.pageCacheHits > 0 ||
            this.pageCacheHitRatio > 0
          );
        };
        return ProfiledPlan2;
      })();
      exports.ProfiledPlan = ProfiledPlan;
      var Stats = (function () {
        function Stats2() {
          this.nodesCreated = 0;
          this.nodesDeleted = 0;
          this.relationshipsCreated = 0;
          this.relationshipsDeleted = 0;
          this.propertiesSet = 0;
          this.labelsAdded = 0;
          this.labelsRemoved = 0;
          this.indexesAdded = 0;
          this.indexesRemoved = 0;
          this.constraintsAdded = 0;
          this.constraintsRemoved = 0;
        }
        return Stats2;
      })();
      exports.Stats = Stats;
      var QueryStatistics = (function () {
        function QueryStatistics2(statistics) {
          var _this = this;
          this._stats = {
            nodesCreated: 0,
            nodesDeleted: 0,
            relationshipsCreated: 0,
            relationshipsDeleted: 0,
            propertiesSet: 0,
            labelsAdded: 0,
            labelsRemoved: 0,
            indexesAdded: 0,
            indexesRemoved: 0,
            constraintsAdded: 0,
            constraintsRemoved: 0,
          };
          this._systemUpdates = 0;
          Object.keys(statistics).forEach(function (index) {
            var camelCaseIndex = index.replace(/(-\w)/g, function (m) {
              return m[1].toUpperCase();
            });
            if (camelCaseIndex in _this._stats) {
              _this._stats[camelCaseIndex] = intValue(statistics[index]);
            } else if (camelCaseIndex === 'systemUpdates') {
              _this._systemUpdates = intValue(statistics[index]);
            } else if (camelCaseIndex === 'containsSystemUpdates') {
              _this._containsSystemUpdates = statistics[index];
            } else if (camelCaseIndex === 'containsUpdates') {
              _this._containsUpdates = statistics[index];
            }
          });
          this._stats = Object.freeze(this._stats);
        }
        QueryStatistics2.prototype.containsUpdates = function () {
          var _this = this;
          return this._containsUpdates !== void 0
            ? this._containsUpdates
            : Object.keys(this._stats).reduce(function (last, current) {
                return last + _this._stats[current];
              }, 0) > 0;
        };
        QueryStatistics2.prototype.updates = function () {
          return this._stats;
        };
        QueryStatistics2.prototype.containsSystemUpdates = function () {
          return this._containsSystemUpdates !== void 0
            ? this._containsSystemUpdates
            : this._systemUpdates > 0;
        };
        QueryStatistics2.prototype.systemUpdates = function () {
          return this._systemUpdates;
        };
        return QueryStatistics2;
      })();
      exports.QueryStatistics = QueryStatistics;
      var Notification = (function () {
        function Notification2(notification) {
          this.code = notification.code;
          this.title = notification.title;
          this.description = notification.description;
          this.severity = notification.severity;
          this.position = Notification2._constructPosition(
            notification.position,
          );
        }
        Notification2._constructPosition = function (pos) {
          if (!pos) {
            return {};
          }
          return {
            offset: intValue(pos.offset),
            line: intValue(pos.line),
            column: intValue(pos.column),
          };
        };
        return Notification2;
      })();
      exports.Notification = Notification;
      var ServerInfo = (function () {
        function ServerInfo2(serverMeta, protocolVersion) {
          if (serverMeta) {
            this.address = serverMeta.address;
            this.version = serverMeta.version;
            this.agent = serverMeta.version;
          }
          this.protocolVersion = protocolVersion;
        }
        return ServerInfo2;
      })();
      exports.ServerInfo = ServerInfo;
      function intValue(value) {
        if (value instanceof integer_1.default) {
          return value.toInt();
        } else if (typeof value == 'bigint') {
          return (0, integer_1.int)(value).toInt();
        } else {
          return value;
        }
      }
      function valueOrDefault(key, values, defaultValue) {
        if (defaultValue === void 0) {
          defaultValue = 0;
        }
        if (key in values) {
          var value = values[key];
          return intValue(value);
        } else {
          return defaultValue;
        }
      }
      var queryType = {
        READ_ONLY: 'r',
        READ_WRITE: 'rw',
        WRITE_ONLY: 'w',
        SCHEMA_WRITE: 's',
      };
      exports.queryType = queryType;
      exports.default = ResultSummary;
    },
  });

  // node_modules/neo4j-driver-core/lib/internal/observers.js
  var require_observers = __commonJS({
    'node_modules/neo4j-driver-core/lib/internal/observers.js'(exports) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.FailedObserver = exports.CompletedObserver = void 0;
      var CompletedObserver = (function () {
        function CompletedObserver2() {}
        CompletedObserver2.prototype.subscribe = function (observer) {
          apply(observer, observer.onKeys, []);
          apply(observer, observer.onCompleted, {});
        };
        CompletedObserver2.prototype.cancel = function () {};
        CompletedObserver2.prototype.prepareToHandleSingleResponse =
          function () {};
        CompletedObserver2.prototype.markCompleted = function () {};
        CompletedObserver2.prototype.onError = function (error) {
          throw Error('CompletedObserver not supposed to call onError');
        };
        return CompletedObserver2;
      })();
      exports.CompletedObserver = CompletedObserver;
      var FailedObserver = (function () {
        function FailedObserver2(_a) {
          var error = _a.error,
            onError = _a.onError;
          this._error = error;
          this._beforeError = onError;
          this._observers = [];
          this.onError(error);
        }
        FailedObserver2.prototype.subscribe = function (observer) {
          apply(observer, observer.onError, this._error);
          this._observers.push(observer);
        };
        FailedObserver2.prototype.onError = function (error) {
          var _this = this;
          Promise.resolve(apply(this, this._beforeError, error)).then(
            function () {
              return _this._observers.forEach(function (o) {
                return apply(o, o.onError, error);
              });
            },
          );
        };
        FailedObserver2.prototype.cancel = function () {};
        FailedObserver2.prototype.prepareToHandleSingleResponse =
          function () {};
        FailedObserver2.prototype.markCompleted = function () {};
        return FailedObserver2;
      })();
      exports.FailedObserver = FailedObserver;
      function apply(thisArg, func, param) {
        if (func) {
          func.bind(thisArg)(param);
        }
      }
    },
  });

  // node_modules/neo4j-driver-core/lib/internal/bookmark.js
  var require_bookmark = __commonJS({
    'node_modules/neo4j-driver-core/lib/internal/bookmark.js'(exports) {
      'use strict';
      var __createBinding2 =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, 'default', {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o['default'] = v;
            });
      var __importStar2 =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== 'default' &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.Bookmark = void 0;
      var util = __importStar2(require_util());
      var BOOKMARKS_KEY = 'bookmarks';
      var Bookmark = (function () {
        function Bookmark2(values) {
          this._values = asStringArray(values);
        }
        Bookmark2.empty = function () {
          return EMPTY_BOOKMARK;
        };
        Bookmark2.prototype.isEmpty = function () {
          return this._values.length === 0;
        };
        Bookmark2.prototype.values = function () {
          return this._values;
        };
        Bookmark2.prototype.asBeginTransactionParameters = function () {
          var _a;
          if (this.isEmpty()) {
            return {};
          }
          return (_a = {}), (_a[BOOKMARKS_KEY] = this._values), _a;
        };
        return Bookmark2;
      })();
      exports.Bookmark = Bookmark;
      var EMPTY_BOOKMARK = new Bookmark(null);
      function asStringArray(value) {
        if (!value) {
          return [];
        }
        if (util.isString(value)) {
          return [value];
        }
        if (Array.isArray(value)) {
          var result = [];
          var flattenedValue = flattenArray(value);
          for (var i = 0; i < flattenedValue.length; i++) {
            var element = flattenedValue[i];
            if (element !== void 0 && element !== null) {
              if (!util.isString(element)) {
                throw new TypeError(
                  "Bookmark value should be a string, given: '" + element + "'",
                );
              }
              result.push(element);
            }
          }
          return result;
        }
        throw new TypeError(
          "Bookmark should either be a string or a string array, given: '" +
            value +
            "'",
        );
      }
      function flattenArray(values) {
        return values.reduce(function (dest, value) {
          return Array.isArray(value)
            ? dest.concat(flattenArray(value))
            : dest.concat(value);
        }, []);
      }
    },
  });

  // node_modules/neo4j-driver-core/lib/internal/constants.js
  var require_constants = __commonJS({
    'node_modules/neo4j-driver-core/lib/internal/constants.js'(exports) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.BOLT_PROTOCOL_V4_4 =
        exports.BOLT_PROTOCOL_V4_3 =
        exports.BOLT_PROTOCOL_V4_2 =
        exports.BOLT_PROTOCOL_V4_1 =
        exports.BOLT_PROTOCOL_V4_0 =
        exports.BOLT_PROTOCOL_V3 =
        exports.BOLT_PROTOCOL_V2 =
        exports.BOLT_PROTOCOL_V1 =
        exports.DEFAULT_POOL_MAX_SIZE =
        exports.DEFAULT_POOL_ACQUISITION_TIMEOUT =
        exports.ACCESS_MODE_WRITE =
        exports.ACCESS_MODE_READ =
        exports.FETCH_ALL =
          void 0;
      var FETCH_ALL = -1;
      exports.FETCH_ALL = FETCH_ALL;
      var DEFAULT_POOL_ACQUISITION_TIMEOUT = 60 * 1e3;
      exports.DEFAULT_POOL_ACQUISITION_TIMEOUT =
        DEFAULT_POOL_ACQUISITION_TIMEOUT;
      var DEFAULT_POOL_MAX_SIZE = 100;
      exports.DEFAULT_POOL_MAX_SIZE = DEFAULT_POOL_MAX_SIZE;
      var ACCESS_MODE_READ = 'READ';
      exports.ACCESS_MODE_READ = ACCESS_MODE_READ;
      var ACCESS_MODE_WRITE = 'WRITE';
      exports.ACCESS_MODE_WRITE = ACCESS_MODE_WRITE;
      var BOLT_PROTOCOL_V1 = 1;
      exports.BOLT_PROTOCOL_V1 = BOLT_PROTOCOL_V1;
      var BOLT_PROTOCOL_V2 = 2;
      exports.BOLT_PROTOCOL_V2 = BOLT_PROTOCOL_V2;
      var BOLT_PROTOCOL_V3 = 3;
      exports.BOLT_PROTOCOL_V3 = BOLT_PROTOCOL_V3;
      var BOLT_PROTOCOL_V4_0 = 4;
      exports.BOLT_PROTOCOL_V4_0 = BOLT_PROTOCOL_V4_0;
      var BOLT_PROTOCOL_V4_1 = 4.1;
      exports.BOLT_PROTOCOL_V4_1 = BOLT_PROTOCOL_V4_1;
      var BOLT_PROTOCOL_V4_2 = 4.2;
      exports.BOLT_PROTOCOL_V4_2 = BOLT_PROTOCOL_V4_2;
      var BOLT_PROTOCOL_V4_3 = 4.3;
      exports.BOLT_PROTOCOL_V4_3 = BOLT_PROTOCOL_V4_3;
      var BOLT_PROTOCOL_V4_4 = 4.4;
      exports.BOLT_PROTOCOL_V4_4 = BOLT_PROTOCOL_V4_4;
    },
  });

  // node_modules/neo4j-driver-core/lib/internal/connection-holder.js
  var require_connection_holder = __commonJS({
    'node_modules/neo4j-driver-core/lib/internal/connection-holder.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.EMPTY_CONNECTION_HOLDER =
        exports.ReadOnlyConnectionHolder =
        exports.ConnectionHolder =
          void 0;
      var error_1 = require_error();
      var util_1 = require_util();
      var constants_1 = require_constants();
      var bookmark_1 = require_bookmark();
      var ConnectionHolder = (function () {
        function ConnectionHolder2(_a) {
          var _b = _a === void 0 ? {} : _a,
            _c = _b.mode,
            mode = _c === void 0 ? constants_1.ACCESS_MODE_WRITE : _c,
            _d = _b.database,
            database = _d === void 0 ? '' : _d,
            bookmark = _b.bookmark,
            connectionProvider = _b.connectionProvider,
            impersonatedUser = _b.impersonatedUser,
            onDatabaseNameResolved = _b.onDatabaseNameResolved;
          this._mode = mode;
          this._database = database
            ? (0, util_1.assertString)(database, 'database')
            : '';
          this._bookmark = bookmark || bookmark_1.Bookmark.empty();
          this._connectionProvider = connectionProvider;
          this._impersonatedUser = impersonatedUser;
          this._referenceCount = 0;
          this._connectionPromise = Promise.resolve();
          this._onDatabaseNameResolved = onDatabaseNameResolved;
        }
        ConnectionHolder2.prototype.mode = function () {
          return this._mode;
        };
        ConnectionHolder2.prototype.database = function () {
          return this._database;
        };
        ConnectionHolder2.prototype.setDatabase = function (database) {
          this._database = database;
        };
        ConnectionHolder2.prototype.bookmark = function () {
          return this._bookmark;
        };
        ConnectionHolder2.prototype.connectionProvider = function () {
          return this._connectionProvider;
        };
        ConnectionHolder2.prototype.referenceCount = function () {
          return this._referenceCount;
        };
        ConnectionHolder2.prototype.initializeConnection = function () {
          if (this._referenceCount === 0 && this._connectionProvider) {
            this._connectionPromise =
              this._connectionProvider.acquireConnection({
                accessMode: this._mode,
                database: this._database,
                bookmarks: this._bookmark,
                impersonatedUser: this._impersonatedUser,
                onDatabaseNameResolved: this._onDatabaseNameResolved,
              });
          } else {
            this._referenceCount++;
            return false;
          }
          this._referenceCount++;
          return true;
        };
        ConnectionHolder2.prototype.getConnection = function () {
          return this._connectionPromise;
        };
        ConnectionHolder2.prototype.releaseConnection = function () {
          if (this._referenceCount === 0) {
            return this._connectionPromise;
          }
          this._referenceCount--;
          if (this._referenceCount === 0) {
            return this._releaseConnection();
          }
          return this._connectionPromise;
        };
        ConnectionHolder2.prototype.close = function () {
          if (this._referenceCount === 0) {
            return this._connectionPromise;
          }
          this._referenceCount = 0;
          return this._releaseConnection();
        };
        ConnectionHolder2.prototype._releaseConnection = function () {
          this._connectionPromise = this._connectionPromise
            .then(function (connection) {
              if (connection) {
                if (connection.isOpen()) {
                  return connection
                    .resetAndFlush()
                    .catch(ignoreError)
                    .then(function () {
                      return connection._release();
                    });
                }
                return connection._release();
              } else {
                return Promise.resolve();
              }
            })
            .catch(ignoreError);
          return this._connectionPromise;
        };
        return ConnectionHolder2;
      })();
      exports.ConnectionHolder = ConnectionHolder;
      var ReadOnlyConnectionHolder = (function (_super) {
        __extends2(ReadOnlyConnectionHolder2, _super);
        function ReadOnlyConnectionHolder2(connectionHolder) {
          var _this =
            _super.call(this, {
              mode: connectionHolder.mode(),
              database: connectionHolder.database(),
              bookmark: connectionHolder.bookmark(),
              connectionProvider: connectionHolder.connectionProvider(),
            }) || this;
          _this._connectionHolder = connectionHolder;
          return _this;
        }
        ReadOnlyConnectionHolder2.prototype.initializeConnection = function () {
          if (this._connectionHolder.referenceCount() === 0) {
            return false;
          }
          return true;
        };
        ReadOnlyConnectionHolder2.prototype.getConnection = function () {
          return this._connectionHolder.getConnection();
        };
        ReadOnlyConnectionHolder2.prototype.releaseConnection = function () {
          return this._connectionHolder.getConnection().catch(function () {
            return Promise.resolve();
          });
        };
        ReadOnlyConnectionHolder2.prototype.close = function () {
          return this._connectionHolder.getConnection().catch(function () {
            return Promise.resolve();
          });
        };
        return ReadOnlyConnectionHolder2;
      })(ConnectionHolder);
      exports.ReadOnlyConnectionHolder = ReadOnlyConnectionHolder;
      exports.default = ReadOnlyConnectionHolder;
      var EmptyConnectionHolder = (function (_super) {
        __extends2(EmptyConnectionHolder2, _super);
        function EmptyConnectionHolder2() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        EmptyConnectionHolder2.prototype.mode = function () {
          return void 0;
        };
        EmptyConnectionHolder2.prototype.database = function () {
          return void 0;
        };
        EmptyConnectionHolder2.prototype.initializeConnection = function () {
          return true;
        };
        EmptyConnectionHolder2.prototype.getConnection = function () {
          return Promise.reject(
            (0, error_1.newError)(
              'This connection holder does not serve connections',
            ),
          );
        };
        EmptyConnectionHolder2.prototype.releaseConnection = function () {
          return Promise.resolve();
        };
        EmptyConnectionHolder2.prototype.close = function () {
          return Promise.resolve();
        };
        return EmptyConnectionHolder2;
      })(ConnectionHolder);
      var EMPTY_CONNECTION_HOLDER = new EmptyConnectionHolder();
      exports.EMPTY_CONNECTION_HOLDER = EMPTY_CONNECTION_HOLDER;
      function ignoreError(error) {}
    },
  });

  // node_modules/neo4j-driver-core/lib/internal/tx-config.js
  var require_tx_config = __commonJS({
    'node_modules/neo4j-driver-core/lib/internal/tx-config.js'(exports) {
      'use strict';
      var __createBinding2 =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, 'default', {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o['default'] = v;
            });
      var __importStar2 =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== 'default' &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.TxConfig = void 0;
      var util = __importStar2(require_util());
      var error_1 = require_error();
      var integer_1 = require_integer();
      var TxConfig = (function () {
        function TxConfig2(config2) {
          assertValidConfig(config2);
          this.timeout = extractTimeout(config2);
          this.metadata = extractMetadata(config2);
        }
        TxConfig2.empty = function () {
          return EMPTY_CONFIG;
        };
        TxConfig2.prototype.isEmpty = function () {
          return Object.values(this).every(function (value) {
            return value == null;
          });
        };
        return TxConfig2;
      })();
      exports.TxConfig = TxConfig;
      var EMPTY_CONFIG = new TxConfig({});
      function extractTimeout(config2) {
        if (
          util.isObject(config2) &&
          (config2.timeout || config2.timeout === 0)
        ) {
          util.assertNumberOrInteger(config2.timeout, 'Transaction timeout');
          var timeout = (0, integer_1.int)(config2.timeout);
          if (timeout.isZero()) {
            throw (0, error_1.newError)(
              'Transaction timeout should not be zero',
            );
          }
          if (timeout.isNegative()) {
            throw (0, error_1.newError)(
              'Transaction timeout should not be negative',
            );
          }
          return timeout;
        }
        return null;
      }
      function extractMetadata(config2) {
        if (util.isObject(config2) && config2.metadata) {
          var metadata = config2.metadata;
          util.assertObject(metadata, 'config.metadata');
          if (Object.keys(metadata).length !== 0) {
            return metadata;
          }
        }
        return null;
      }
      function assertValidConfig(config2) {
        if (config2) {
          util.assertObject(config2, 'Transaction config');
        }
      }
    },
  });

  // node_modules/neo4j-driver-core/lib/internal/retry-strategy.js
  var require_retry_strategy = __commonJS({
    'node_modules/neo4j-driver-core/lib/internal/retry-strategy.js'(exports) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.canRetryOn = void 0;
      var error_1 = require_error();
      function canRetryOn(_error) {
        return (
          _error &&
          _error instanceof error_1.Neo4jError &&
          _error.code &&
          (_error.code === error_1.SERVICE_UNAVAILABLE ||
            _error.code === error_1.SESSION_EXPIRED ||
            _isAuthorizationExpired(_error) ||
            _isTransientError(_error))
        );
      }
      exports.canRetryOn = canRetryOn;
      function _isTransientError(error) {
        var code = error.code;
        if (code.indexOf('TransientError') >= 0) {
          if (
            code === 'Neo.TransientError.Transaction.Terminated' ||
            code === 'Neo.TransientError.Transaction.LockClientStopped'
          ) {
            return false;
          }
          return true;
        }
        return false;
      }
      function _isAuthorizationExpired(error) {
        return error.code === 'Neo.ClientError.Security.AuthorizationExpired';
      }
    },
  });

  // node_modules/neo4j-driver-core/lib/internal/transaction-executor.js
  var require_transaction_executor = __commonJS({
    'node_modules/neo4j-driver-core/lib/internal/transaction-executor.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.TransactionExecutor = void 0;
      var error_1 = require_error();
      var retry_strategy_1 = require_retry_strategy();
      var DEFAULT_MAX_RETRY_TIME_MS = 30 * 1e3;
      var DEFAULT_INITIAL_RETRY_DELAY_MS = 1e3;
      var DEFAULT_RETRY_DELAY_MULTIPLIER = 2;
      var DEFAULT_RETRY_DELAY_JITTER_FACTOR = 0.2;
      var TransactionExecutor = (function () {
        function TransactionExecutor2(
          maxRetryTimeMs,
          initialRetryDelayMs,
          multiplier,
          jitterFactor,
        ) {
          this._maxRetryTimeMs = _valueOrDefault(
            maxRetryTimeMs,
            DEFAULT_MAX_RETRY_TIME_MS,
          );
          this._initialRetryDelayMs = _valueOrDefault(
            initialRetryDelayMs,
            DEFAULT_INITIAL_RETRY_DELAY_MS,
          );
          this._multiplier = _valueOrDefault(
            multiplier,
            DEFAULT_RETRY_DELAY_MULTIPLIER,
          );
          this._jitterFactor = _valueOrDefault(
            jitterFactor,
            DEFAULT_RETRY_DELAY_JITTER_FACTOR,
          );
          this._inFlightTimeoutIds = [];
          this._verifyAfterConstruction();
        }
        TransactionExecutor2.prototype.execute = function (
          transactionCreator,
          transactionWork,
        ) {
          var _this = this;
          return new Promise(function (resolve, reject) {
            _this._executeTransactionInsidePromise(
              transactionCreator,
              transactionWork,
              resolve,
              reject,
            );
          }).catch(function (error) {
            var retryStartTimeMs = Date.now();
            var retryDelayMs = _this._initialRetryDelayMs;
            return _this._retryTransactionPromise(
              transactionCreator,
              transactionWork,
              error,
              retryStartTimeMs,
              retryDelayMs,
            );
          });
        };
        TransactionExecutor2.prototype.close = function () {
          this._inFlightTimeoutIds.forEach(function (timeoutId) {
            return clearTimeout(timeoutId);
          });
          this._inFlightTimeoutIds = [];
        };
        TransactionExecutor2.prototype._retryTransactionPromise = function (
          transactionCreator,
          transactionWork,
          error,
          retryStartTime,
          retryDelayMs,
        ) {
          var _this = this;
          var elapsedTimeMs = Date.now() - retryStartTime;
          if (
            elapsedTimeMs > this._maxRetryTimeMs ||
            !(0, retry_strategy_1.canRetryOn)(error)
          ) {
            return Promise.reject(error);
          }
          return new Promise(function (resolve, reject) {
            var nextRetryTime = _this._computeDelayWithJitter(retryDelayMs);
            var timeoutId = setTimeout(function () {
              _this._inFlightTimeoutIds = _this._inFlightTimeoutIds.filter(
                function (id) {
                  return id !== timeoutId;
                },
              );
              _this._executeTransactionInsidePromise(
                transactionCreator,
                transactionWork,
                resolve,
                reject,
              );
            }, nextRetryTime);
            _this._inFlightTimeoutIds.push(timeoutId);
          }).catch(function (error2) {
            var nextRetryDelayMs = retryDelayMs * _this._multiplier;
            return _this._retryTransactionPromise(
              transactionCreator,
              transactionWork,
              error2,
              retryStartTime,
              nextRetryDelayMs,
            );
          });
        };
        TransactionExecutor2.prototype._executeTransactionInsidePromise =
          function (transactionCreator, transactionWork, resolve, reject) {
            var _this = this;
            var tx;
            try {
              tx = transactionCreator();
            } catch (error) {
              reject(error);
              return;
            }
            var resultPromise = this._safeExecuteTransactionWork(
              tx,
              transactionWork,
            );
            resultPromise
              .then(function (result) {
                return _this._handleTransactionWorkSuccess(
                  result,
                  tx,
                  resolve,
                  reject,
                );
              })
              .catch(function (error) {
                return _this._handleTransactionWorkFailure(error, tx, reject);
              });
          };
        TransactionExecutor2.prototype._safeExecuteTransactionWork = function (
          tx,
          transactionWork,
        ) {
          try {
            var result = transactionWork(tx);
            return Promise.resolve(result);
          } catch (error) {
            return Promise.reject(error);
          }
        };
        TransactionExecutor2.prototype._handleTransactionWorkSuccess =
          function (result, tx, resolve, reject) {
            if (tx.isOpen()) {
              tx.commit()
                .then(function () {
                  resolve(result);
                })
                .catch(function (error) {
                  reject(error);
                });
            } else {
              resolve(result);
            }
          };
        TransactionExecutor2.prototype._handleTransactionWorkFailure =
          function (error, tx, reject) {
            if (tx.isOpen()) {
              tx.rollback()
                .catch(function (ignore) {})
                .then(function () {
                  return reject(error);
                });
            } else {
              reject(error);
            }
          };
        TransactionExecutor2.prototype._computeDelayWithJitter = function (
          delayMs,
        ) {
          var jitter = delayMs * this._jitterFactor;
          var min = delayMs - jitter;
          var max = delayMs + jitter;
          return Math.random() * (max - min) + min;
        };
        TransactionExecutor2.prototype._verifyAfterConstruction = function () {
          if (this._maxRetryTimeMs < 0) {
            throw (0, error_1.newError)(
              'Max retry time should be >= 0: ' + this._maxRetryTimeMs,
            );
          }
          if (this._initialRetryDelayMs < 0) {
            throw (0, error_1.newError)(
              'Initial retry delay should >= 0: ' + this._initialRetryDelayMs,
            );
          }
          if (this._multiplier < 1) {
            throw (0, error_1.newError)(
              'Multiplier should be >= 1.0: ' + this._multiplier,
            );
          }
          if (this._jitterFactor < 0 || this._jitterFactor > 1) {
            throw (0, error_1.newError)(
              'Jitter factor should be in [0.0, 1.0]: ' + this._jitterFactor,
            );
          }
        };
        return TransactionExecutor2;
      })();
      exports.TransactionExecutor = TransactionExecutor;
      function _valueOrDefault(value, defaultValue) {
        if (value || value === 0) {
          return value;
        }
        return defaultValue;
      }
    },
  });

  // node_modules/neo4j-driver-core/lib/internal/connectivity-verifier.js
  var require_connectivity_verifier = __commonJS({
    'node_modules/neo4j-driver-core/lib/internal/connectivity-verifier.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.ConnectivityVerifier = void 0;
      var connection_holder_1 = require_connection_holder();
      var constants_1 = require_constants();
      var error_1 = require_error();
      var ConnectivityVerifier = (function () {
        function ConnectivityVerifier2(connectionProvider) {
          this._connectionProvider = connectionProvider;
        }
        ConnectivityVerifier2.prototype.verify = function (_a) {
          var _b = _a === void 0 ? {} : _a,
            _c = _b.database,
            database = _c === void 0 ? '' : _c;
          return acquireAndReleaseDummyConnection(
            this._connectionProvider,
            database,
          );
        };
        return ConnectivityVerifier2;
      })();
      exports.ConnectivityVerifier = ConnectivityVerifier;
      function acquireAndReleaseDummyConnection(connectionProvider, database) {
        var connectionHolder = new connection_holder_1.ConnectionHolder({
          mode: constants_1.ACCESS_MODE_READ,
          database,
          connectionProvider,
        });
        connectionHolder.initializeConnection();
        return connectionHolder
          .getConnection()
          .then(function (connection) {
            if (!connection) {
              throw (0, error_1.newError)(
                'Unexpected error acquiring transaction',
              );
            }
            return connectionHolder.close().then(function () {
              return connection.server;
            });
          })
          .catch(function (error) {
            return connectionHolder
              .close()
              .catch(function (ignoredError) {})
              .then(function () {
                return Promise.reject(error);
              });
          });
      }
    },
  });

  // node_modules/neo4j-driver-core/lib/internal/logger.js
  var require_logger = __commonJS({
    'node_modules/neo4j-driver-core/lib/internal/logger.js'(exports) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var _a;
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.Logger = void 0;
      var error_1 = require_error();
      var ERROR = 'error';
      var WARN = 'warn';
      var INFO = 'info';
      var DEBUG = 'debug';
      var DEFAULT_LEVEL = INFO;
      var levels =
        ((_a = {}),
        (_a[ERROR] = 0),
        (_a[WARN] = 1),
        (_a[INFO] = 2),
        (_a[DEBUG] = 3),
        _a);
      var Logger = (function () {
        function Logger2(level, loggerFunction) {
          this._level = level;
          this._loggerFunction = loggerFunction;
        }
        Logger2.create = function (driverConfig) {
          if (driverConfig && driverConfig.logging) {
            var loggingConfig = driverConfig.logging;
            var level = extractConfiguredLevel(loggingConfig);
            var loggerFunction = extractConfiguredLogger(loggingConfig);
            return new Logger2(level, loggerFunction);
          }
          return this.noOp();
        };
        Logger2.noOp = function () {
          return noOpLogger;
        };
        Logger2.prototype.isErrorEnabled = function () {
          return isLevelEnabled(this._level, ERROR);
        };
        Logger2.prototype.error = function (message) {
          if (this.isErrorEnabled()) {
            this._loggerFunction(ERROR, message);
          }
        };
        Logger2.prototype.isWarnEnabled = function () {
          return isLevelEnabled(this._level, WARN);
        };
        Logger2.prototype.warn = function (message) {
          if (this.isWarnEnabled()) {
            this._loggerFunction(WARN, message);
          }
        };
        Logger2.prototype.isInfoEnabled = function () {
          return isLevelEnabled(this._level, INFO);
        };
        Logger2.prototype.info = function (message) {
          if (this.isInfoEnabled()) {
            this._loggerFunction(INFO, message);
          }
        };
        Logger2.prototype.isDebugEnabled = function () {
          return isLevelEnabled(this._level, DEBUG);
        };
        Logger2.prototype.debug = function (message) {
          if (this.isDebugEnabled()) {
            this._loggerFunction(DEBUG, message);
          }
        };
        return Logger2;
      })();
      exports.Logger = Logger;
      var NoOpLogger = (function (_super) {
        __extends2(NoOpLogger2, _super);
        function NoOpLogger2() {
          return _super.call(this, INFO, function (level, message) {}) || this;
        }
        NoOpLogger2.prototype.isErrorEnabled = function () {
          return false;
        };
        NoOpLogger2.prototype.error = function (message) {};
        NoOpLogger2.prototype.isWarnEnabled = function () {
          return false;
        };
        NoOpLogger2.prototype.warn = function (message) {};
        NoOpLogger2.prototype.isInfoEnabled = function () {
          return false;
        };
        NoOpLogger2.prototype.info = function (message) {};
        NoOpLogger2.prototype.isDebugEnabled = function () {
          return false;
        };
        NoOpLogger2.prototype.debug = function (message) {};
        return NoOpLogger2;
      })(Logger);
      var noOpLogger = new NoOpLogger();
      function isLevelEnabled(configuredLevel, targetLevel) {
        return levels[configuredLevel] >= levels[targetLevel];
      }
      function extractConfiguredLevel(loggingConfig) {
        if (loggingConfig && loggingConfig.level) {
          var configuredLevel = loggingConfig.level;
          var value = levels[configuredLevel];
          if (!value && value !== 0) {
            throw (0, error_1.newError)(
              'Illegal logging level: ' +
                configuredLevel +
                '. Supported levels are: ' +
                Object.keys(levels),
            );
          }
          return configuredLevel;
        }
        return DEFAULT_LEVEL;
      }
      function extractConfiguredLogger(loggingConfig) {
        if (loggingConfig && loggingConfig.logger) {
          var configuredLogger = loggingConfig.logger;
          if (configuredLogger && typeof configuredLogger === 'function') {
            return configuredLogger;
          }
        }
        throw (0, error_1.newError)(
          'Illegal logger function: ' + loggingConfig.logger,
        );
      }
    },
  });

  // node_modules/neo4j-driver-core/lib/internal/url-util.js
  var require_url_util = __commonJS({
    'node_modules/neo4j-driver-core/lib/internal/url-util.js'(exports) {
      'use strict';
      var __assign2 =
        (exports && exports.__assign) ||
        function () {
          __assign2 =
            Object.assign ||
            function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
              }
              return t;
            };
          return __assign2.apply(this, arguments);
        };
      var __read2 =
        (exports && exports.__read) ||
        function (o, n) {
          var m = typeof Symbol === 'function' && o[Symbol.iterator];
          if (!m) return o;
          var i = m.call(o),
            r,
            ar = [],
            e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r && !r.done && (m = i['return'])) m.call(i);
            } finally {
              if (e) throw e.error;
            }
          }
          return ar;
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.Url =
        exports.formatIPv6Address =
        exports.formatIPv4Address =
        exports.defaultPortForScheme =
        exports.parseDatabaseUrl =
          void 0;
      var util_1 = require_util();
      var DEFAULT_BOLT_PORT = 7687;
      var DEFAULT_HTTP_PORT = 7474;
      var DEFAULT_HTTPS_PORT = 7473;
      var Url = (function () {
        function Url2(scheme, host, port, hostAndPort, query) {
          this.scheme = scheme;
          this.host = host;
          this.port = port;
          this.hostAndPort = hostAndPort;
          this.query = query;
        }
        return Url2;
      })();
      exports.Url = Url;
      function parseDatabaseUrl(url) {
        (0, util_1.assertString)(url, 'URL');
        var sanitized = sanitizeUrl(url);
        var parsedUrl = uriJsParse(sanitized.url);
        var scheme = sanitized.schemeMissing
          ? null
          : extractScheme(parsedUrl.scheme);
        var host = extractHost(parsedUrl.host);
        var formattedHost = formatHost(host);
        var port = extractPort(parsedUrl.port, scheme);
        var hostAndPort = formattedHost + ':' + port;
        var query = extractQuery(
          parsedUrl.query || extractResourceQueryString(parsedUrl.resourceName),
          url,
        );
        return new Url(scheme, host, port, hostAndPort, query);
      }
      exports.parseDatabaseUrl = parseDatabaseUrl;
      function extractResourceQueryString(resource) {
        if (typeof resource !== 'string') {
          return null;
        }
        var _a = __read2(resource.split('?'), 2),
          _ = _a[0],
          query = _a[1];
        return query;
      }
      function sanitizeUrl(url) {
        url = url.trim();
        if (url.indexOf('://') === -1) {
          return { schemeMissing: true, url: 'none://' + url };
        }
        return { schemeMissing: false, url };
      }
      function extractScheme(scheme) {
        if (scheme) {
          scheme = scheme.trim();
          if (scheme.charAt(scheme.length - 1) === ':') {
            scheme = scheme.substring(0, scheme.length - 1);
          }
          return scheme;
        }
        return null;
      }
      function extractHost(host, url) {
        if (!host) {
          throw new Error('Unable to extract host from ' + url);
        }
        return host.trim();
      }
      function extractPort(portString, scheme) {
        var port =
          typeof portString === 'string'
            ? parseInt(portString, 10)
            : portString;
        return port === 0 || port ? port : defaultPortForScheme(scheme);
      }
      function extractQuery(queryString, url) {
        var query = queryString ? trimAndSanitizeQuery(queryString) : null;
        var context2 = {};
        if (query) {
          query.split('&').forEach(function (pair) {
            var keyValue = pair.split('=');
            if (keyValue.length !== 2) {
              throw new Error(
                "Invalid parameters: '" + keyValue + "' in URL '" + url + "'.",
              );
            }
            var key = trimAndVerifyQueryElement(keyValue[0], 'key', url);
            var value = trimAndVerifyQueryElement(keyValue[1], 'value', url);
            if (context2[key]) {
              throw new Error(
                "Duplicated query parameters with key '" +
                  key +
                  "' in URL '" +
                  url +
                  "'",
              );
            }
            context2[key] = value;
          });
        }
        return context2;
      }
      function trimAndSanitizeQuery(query) {
        query = (query || '').trim();
        if (query && query.charAt(0) === '?') {
          query = query.substring(1, query.length);
        }
        return query;
      }
      function trimAndVerifyQueryElement(element, name, url) {
        element = (element || '').trim();
        if (!element) {
          throw new Error(
            'Illegal empty ' + name + " in URL query '" + url + "'",
          );
        }
        return element;
      }
      function escapeIPv6Address(address) {
        var startsWithSquareBracket = address.charAt(0) === '[';
        var endsWithSquareBracket = address.charAt(address.length - 1) === ']';
        if (!startsWithSquareBracket && !endsWithSquareBracket) {
          return '[' + address + ']';
        } else if (startsWithSquareBracket && endsWithSquareBracket) {
          return address;
        } else {
          throw new Error('Illegal IPv6 address ' + address);
        }
      }
      function formatHost(host) {
        if (!host) {
          throw new Error('Illegal host ' + host);
        }
        var isIPv6Address = host.indexOf(':') >= 0;
        return isIPv6Address ? escapeIPv6Address(host) : host;
      }
      function formatIPv4Address(address, port) {
        return address + ':' + port;
      }
      exports.formatIPv4Address = formatIPv4Address;
      function formatIPv6Address(address, port) {
        var escapedAddress = escapeIPv6Address(address);
        return escapedAddress + ':' + port;
      }
      exports.formatIPv6Address = formatIPv6Address;
      function defaultPortForScheme(scheme) {
        if (scheme === 'http') {
          return DEFAULT_HTTP_PORT;
        } else if (scheme === 'https') {
          return DEFAULT_HTTPS_PORT;
        } else {
          return DEFAULT_BOLT_PORT;
        }
      }
      exports.defaultPortForScheme = defaultPortForScheme;
      function uriJsParse(value) {
        function partition(s, delimiter) {
          var i = s.indexOf(delimiter);
          if (i >= 0) return [s.substring(0, i), s[i], s.substring(i + 1)];
          else return [s, '', ''];
        }
        function rpartition(s, delimiter) {
          var i = s.lastIndexOf(delimiter);
          if (i >= 0) return [s.substring(0, i), s[i], s.substring(i + 1)];
          else return ['', '', s];
        }
        function between(s, ldelimiter, rdelimiter) {
          var lpartition = partition(s, ldelimiter);
          var rpartition2 = partition(lpartition[2], rdelimiter);
          return [rpartition2[0], rpartition2[2]];
        }
        function parseAuthority(value2) {
          var parsed2 = {},
            parts2;
          parts2 = rpartition(value2, '@');
          if (parts2[1] === '@') {
            parsed2.userInfo = decodeURIComponent(parts2[0]);
            value2 = parts2[2];
          }
          var _a = __read2(between(value2, '[', ']'), 2),
            ipv6Host = _a[0],
            rest = _a[1];
          if (ipv6Host !== '') {
            parsed2.host = ipv6Host;
            parts2 = partition(rest, ':');
          } else {
            parts2 = partition(value2, ':');
            parsed2.host = parts2[0];
          }
          if (parts2[1] === ':') {
            parsed2.port = parts2[2];
          }
          return parsed2;
        }
        var parsed = {},
          parts;
        parts = partition(value, ':');
        if (parts[1] === ':') {
          parsed.scheme = decodeURIComponent(parts[0]);
          value = parts[2];
        }
        parts = partition(value, '#');
        if (parts[1] === '#') {
          parsed.fragment = decodeURIComponent(parts[2]);
          value = parts[0];
        }
        parts = partition(value, '?');
        if (parts[1] === '?') {
          parsed.query = parts[2];
          value = parts[0];
        }
        if (value.startsWith('//')) {
          parts = partition(value.substr(2), '/');
          parsed = __assign2(__assign2({}, parsed), parseAuthority(parts[0]));
          parsed.path = parts[1] + parts[2];
        } else {
          parsed.path = value;
        }
        return parsed;
      }
    },
  });

  // node_modules/neo4j-driver-core/lib/internal/server-address.js
  var require_server_address = __commonJS({
    'node_modules/neo4j-driver-core/lib/internal/server-address.js'(exports) {
      'use strict';
      var __createBinding2 =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, 'default', {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o['default'] = v;
            });
      var __importStar2 =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== 'default' &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.ServerAddress = void 0;
      var util_1 = require_util();
      var urlUtil = __importStar2(require_url_util());
      var ServerAddress = (function () {
        function ServerAddress2(host, resolved, port, hostPort) {
          this._host = (0, util_1.assertString)(host, 'host');
          this._resolved = resolved
            ? (0, util_1.assertString)(resolved, 'resolved')
            : null;
          this._port = (0, util_1.assertNumber)(port, 'port');
          this._hostPort = hostPort;
          this._stringValue = resolved
            ? hostPort + '(' + resolved + ')'
            : '' + hostPort;
        }
        ServerAddress2.prototype.host = function () {
          return this._host;
        };
        ServerAddress2.prototype.resolvedHost = function () {
          return this._resolved ? this._resolved : this._host;
        };
        ServerAddress2.prototype.port = function () {
          return this._port;
        };
        ServerAddress2.prototype.resolveWith = function (resolved) {
          return new ServerAddress2(
            this._host,
            resolved,
            this._port,
            this._hostPort,
          );
        };
        ServerAddress2.prototype.asHostPort = function () {
          return this._hostPort;
        };
        ServerAddress2.prototype.asKey = function () {
          return this._hostPort;
        };
        ServerAddress2.prototype.toString = function () {
          return this._stringValue;
        };
        ServerAddress2.fromUrl = function (url) {
          var urlParsed = urlUtil.parseDatabaseUrl(url);
          return new ServerAddress2(
            urlParsed.host,
            null,
            urlParsed.port,
            urlParsed.hostAndPort,
          );
        };
        return ServerAddress2;
      })();
      exports.ServerAddress = ServerAddress;
    },
  });

  // node_modules/neo4j-driver-core/lib/internal/resolver/base-host-name-resolver.js
  var require_base_host_name_resolver = __commonJS({
    'node_modules/neo4j-driver-core/lib/internal/resolver/base-host-name-resolver.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var BaseHostNameResolver = (function () {
        function BaseHostNameResolver2() {}
        BaseHostNameResolver2.prototype.resolve = function () {
          throw new Error('Abstract function');
        };
        BaseHostNameResolver2.prototype._resolveToItself = function (address) {
          return Promise.resolve([address]);
        };
        return BaseHostNameResolver2;
      })();
      exports.default = BaseHostNameResolver;
    },
  });

  // node_modules/neo4j-driver-core/lib/internal/resolver/configured-custom-resolver.js
  var require_configured_custom_resolver = __commonJS({
    'node_modules/neo4j-driver-core/lib/internal/resolver/configured-custom-resolver.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var server_address_1 = require_server_address();
      function resolveToSelf(address) {
        return Promise.resolve([address]);
      }
      var ConfiguredCustomResolver = (function () {
        function ConfiguredCustomResolver2(resolverFunction) {
          this._resolverFunction = resolverFunction || resolveToSelf;
        }
        ConfiguredCustomResolver2.prototype.resolve = function (seedRouter) {
          var _this = this;
          return new Promise(function (resolve) {
            return resolve(_this._resolverFunction(seedRouter.asHostPort()));
          }).then(function (resolved) {
            if (!Array.isArray(resolved)) {
              throw new TypeError(
                'Configured resolver function should either return an array of addresses or a Promise resolved with an array of addresses.' +
                  ("Each address is '<host>:<port>'. Got: " + resolved),
              );
            }
            return resolved.map(function (r) {
              return server_address_1.ServerAddress.fromUrl(r);
            });
          });
        };
        return ConfiguredCustomResolver2;
      })();
      exports.default = ConfiguredCustomResolver;
    },
  });

  // node_modules/neo4j-driver-core/lib/internal/resolver/index.js
  var require_resolver = __commonJS({
    'node_modules/neo4j-driver-core/lib/internal/resolver/index.js'(exports) {
      'use strict';
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.ConfiguredCustomResolver = exports.BaseHostNameResolver = void 0;
      var base_host_name_resolver_1 = __importDefault2(
        require_base_host_name_resolver(),
      );
      exports.BaseHostNameResolver = base_host_name_resolver_1.default;
      var configured_custom_resolver_1 = __importDefault2(
        require_configured_custom_resolver(),
      );
      exports.ConfiguredCustomResolver = configured_custom_resolver_1.default;
    },
  });

  // node_modules/neo4j-driver-core/lib/internal/index.js
  var require_internal = __commonJS({
    'node_modules/neo4j-driver-core/lib/internal/index.js'(exports) {
      'use strict';
      var __createBinding2 =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, 'default', {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o['default'] = v;
            });
      var __importStar2 =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== 'default' &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.retryStrategy =
        exports.resolver =
        exports.serverAddress =
        exports.urlUtil =
        exports.logger =
        exports.connectivityVerifier =
        exports.transactionExecutor =
        exports.txConfig =
        exports.connectionHolder =
        exports.constants =
        exports.bookmark =
        exports.observer =
        exports.temporalUtil =
        exports.util =
          void 0;
      var util = __importStar2(require_util());
      exports.util = util;
      var temporalUtil = __importStar2(require_temporal_util());
      exports.temporalUtil = temporalUtil;
      var observer = __importStar2(require_observers());
      exports.observer = observer;
      var bookmark = __importStar2(require_bookmark());
      exports.bookmark = bookmark;
      var constants = __importStar2(require_constants());
      exports.constants = constants;
      var connectionHolder = __importStar2(require_connection_holder());
      exports.connectionHolder = connectionHolder;
      var txConfig = __importStar2(require_tx_config());
      exports.txConfig = txConfig;
      var transactionExecutor = __importStar2(require_transaction_executor());
      exports.transactionExecutor = transactionExecutor;
      var connectivityVerifier = __importStar2(require_connectivity_verifier());
      exports.connectivityVerifier = connectivityVerifier;
      var logger = __importStar2(require_logger());
      exports.logger = logger;
      var urlUtil = __importStar2(require_url_util());
      exports.urlUtil = urlUtil;
      var serverAddress = __importStar2(require_server_address());
      exports.serverAddress = serverAddress;
      var resolver = __importStar2(require_resolver());
      exports.resolver = resolver;
      var retryStrategy = __importStar2(require_retry_strategy());
      exports.retryStrategy = retryStrategy;
    },
  });

  // node_modules/neo4j-driver-core/lib/result.js
  var require_result = __commonJS({
    'node_modules/neo4j-driver-core/lib/result.js'(exports) {
      'use strict';
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var result_summary_1 = __importDefault2(require_result_summary());
      var internal_1 = require_internal();
      var EMPTY_CONNECTION_HOLDER =
        internal_1.connectionHolder.EMPTY_CONNECTION_HOLDER;
      var DEFAULT_ON_ERROR = function (error) {
        console.log('Uncaught error when processing result: ' + error);
      };
      var DEFAULT_ON_COMPLETED = function (summary) {};
      var Result = (function () {
        function Result2(
          streamObserverPromise,
          query,
          parameters,
          connectionHolder,
        ) {
          this._stack = captureStacktrace();
          this._streamObserverPromise = streamObserverPromise;
          this._p = null;
          this._query = query;
          this._parameters = parameters || {};
          this._connectionHolder = connectionHolder || EMPTY_CONNECTION_HOLDER;
        }
        Result2.prototype.keys = function () {
          var _this = this;
          return new Promise(function (resolve, reject) {
            _this._streamObserverPromise
              .then(function (observer) {
                return observer.subscribe({
                  onKeys: function (keys) {
                    return resolve(keys);
                  },
                  onError: function (err) {
                    return reject(err);
                  },
                });
              })
              .catch(reject);
          });
        };
        Result2.prototype.summary = function () {
          var _this = this;
          return new Promise(function (resolve, reject) {
            _this._streamObserverPromise
              .then(function (o) {
                o.cancel();
                o.subscribe({
                  onCompleted: function (metadata) {
                    return _this._createSummary(metadata).then(resolve, reject);
                  },
                  onError: function (err) {
                    return reject(err);
                  },
                });
              })
              .catch(reject);
          });
        };
        Result2.prototype._getOrCreatePromise = function () {
          var _this = this;
          if (!this._p) {
            this._p = new Promise(function (resolve, reject) {
              var records = [];
              var observer = {
                onNext: function (record) {
                  records.push(record);
                },
                onCompleted: function (summary) {
                  resolve({ records, summary });
                },
                onError: function (error) {
                  reject(error);
                },
              };
              _this.subscribe(observer);
            });
          }
          return this._p;
        };
        Result2.prototype.then = function (onFulfilled, onRejected) {
          return this._getOrCreatePromise().then(onFulfilled, onRejected);
        };
        Result2.prototype.catch = function (onRejected) {
          return this._getOrCreatePromise().catch(onRejected);
        };
        Result2.prototype.finally = function (onfinally) {
          return this._getOrCreatePromise().finally(onfinally);
        };
        Result2.prototype.subscribe = function (observer) {
          var _this = this;
          var onCompletedOriginal =
            observer.onCompleted || DEFAULT_ON_COMPLETED;
          var onCompletedWrapper = function (metadata) {
            _this._createSummary(metadata).then(function (summary) {
              return onCompletedOriginal.call(observer, summary);
            });
          };
          observer.onCompleted = onCompletedWrapper;
          var onErrorOriginal = observer.onError || DEFAULT_ON_ERROR;
          var onErrorWrapper = function (error) {
            _this._connectionHolder.releaseConnection().then(function () {
              replaceStacktrace(error, _this._stack);
              onErrorOriginal.call(observer, error);
            });
          };
          observer.onError = onErrorWrapper;
          this._streamObserverPromise
            .then(function (o) {
              return o.subscribe(observer);
            })
            .catch(function (error) {
              return observer.onError(error);
            });
        };
        Result2.prototype._cancel = function () {
          this._streamObserverPromise.then(function (o) {
            return o.cancel();
          });
        };
        Result2.prototype._createSummary = function (metadata) {
          var _a = internal_1.util.validateQueryAndParameters(
              this._query,
              this._parameters,
              {
                skipAsserts: true,
              },
            ),
            query = _a.validatedQuery,
            parameters = _a.params;
          var connectionHolder = this._connectionHolder;
          return connectionHolder
            .getConnection()
            .then(
              function (connection) {
                return connectionHolder.releaseConnection().then(function () {
                  return connection ? connection.protocol().version : void 0;
                });
              },
              function (_) {
                return void 0;
              },
            )
            .then(function (protocolVersion) {
              return new result_summary_1.default(
                query,
                parameters,
                metadata,
                protocolVersion,
              );
            });
        };
        return Result2;
      })();
      function captureStacktrace() {
        var error = new Error('');
        if (error.stack) {
          return error.stack.replace(/^Error(\n\r)*/, '');
        }
        return null;
      }
      function replaceStacktrace(error, newStack) {
        if (newStack) {
          error.stack = error.toString() + '\n' + newStack;
        }
      }
      exports.default = Result;
    },
  });

  // node_modules/neo4j-driver-core/lib/connection-provider.js
  var require_connection_provider = __commonJS({
    'node_modules/neo4j-driver-core/lib/connection-provider.js'(exports) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var ConnectionProvider = (function () {
        function ConnectionProvider2() {}
        ConnectionProvider2.prototype.acquireConnection = function (param) {
          throw Error('Not implemented');
        };
        ConnectionProvider2.prototype.supportsMultiDb = function () {
          throw Error('Not implemented');
        };
        ConnectionProvider2.prototype.supportsTransactionConfig = function () {
          throw Error('Not implemented');
        };
        ConnectionProvider2.prototype.supportsUserImpersonation = function () {
          throw Error('Not implemented');
        };
        ConnectionProvider2.prototype.close = function () {
          throw Error('Not implemented');
        };
        return ConnectionProvider2;
      })();
      exports.default = ConnectionProvider;
    },
  });

  // node_modules/neo4j-driver-core/lib/connection.js
  var require_connection = __commonJS({
    'node_modules/neo4j-driver-core/lib/connection.js'(exports) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Connection = (function () {
        function Connection2() {
          this.id = '';
          this.databaseId = '';
        }
        Connection2.prototype.isOpen = function () {
          return false;
        };
        Connection2.prototype.protocol = function () {
          throw Error('Not implemented');
        };
        Connection2.prototype.connect = function (userAgent, authToken) {
          throw Error('Not implemented');
        };
        Connection2.prototype.write = function (message, observer, flush) {
          throw Error('Not implemented');
        };
        Connection2.prototype.resetAndFlush = function () {
          throw Error('Not implemented');
        };
        Connection2.prototype.close = function () {
          throw Error('Not implemented');
        };
        Connection2.prototype._release = function () {
          return Promise.resolve();
        };
        return Connection2;
      })();
      exports.default = Connection;
    },
  });

  // node_modules/neo4j-driver-core/lib/transaction.js
  var require_transaction = __commonJS({
    'node_modules/neo4j-driver-core/lib/transaction.js'(exports) {
      'use strict';
      var __awaiter2 =
        (exports && exports.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator['throw'](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
      var __generator2 =
        (exports && exports.__generator) ||
        function (thisArg, body) {
          var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: [],
            },
            f,
            y,
            t,
            g;
          return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === 'function' &&
              (g[Symbol.iterator] = function () {
                return this;
              }),
            g
          );
          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f) throw new TypeError('Generator is already executing.');
            while (_)
              try {
                if (
                  ((f = 1),
                  y &&
                    (t =
                      op[0] & 2
                        ? y['return']
                        : op[0]
                        ? y['throw'] || ((t = y['return']) && t.call(y), 0)
                        : y.next) &&
                    !(t = t.call(y, op[1])).done)
                )
                  return t;
                if (((y = 0), t)) op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (
                      !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                      (op[0] === 6 || op[0] === 2)
                    ) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var util_1 = require_util();
      var connection_holder_1 = require_connection_holder();
      var bookmark_1 = require_bookmark();
      var tx_config_1 = require_tx_config();
      var observers_1 = require_observers();
      var error_1 = require_error();
      var result_1 = __importDefault2(require_result());
      var Transaction = (function () {
        function Transaction2(_a) {
          var connectionHolder = _a.connectionHolder,
            onClose = _a.onClose,
            onBookmark = _a.onBookmark,
            onConnection = _a.onConnection,
            reactive = _a.reactive,
            fetchSize = _a.fetchSize,
            impersonatedUser = _a.impersonatedUser;
          this._connectionHolder = connectionHolder;
          this._reactive = reactive;
          this._state = _states.ACTIVE;
          this._onClose = onClose;
          this._onBookmark = onBookmark;
          this._onConnection = onConnection;
          this._onError = this._onErrorCallback.bind(this);
          this._onComplete = this._onCompleteCallback.bind(this);
          this._fetchSize = fetchSize;
          this._results = [];
          this._impersonatedUser = impersonatedUser;
        }
        Transaction2.prototype._begin = function (bookmark, txConfig) {
          var _this = this;
          this._connectionHolder
            .getConnection()
            .then(function (connection) {
              _this._onConnection();
              if (connection) {
                return connection.protocol().beginTransaction({
                  bookmark,
                  txConfig,
                  mode: _this._connectionHolder.mode(),
                  database: _this._connectionHolder.database(),
                  impersonatedUser: _this._impersonatedUser,
                  beforeError: _this._onError,
                  afterComplete: _this._onComplete,
                });
              } else {
                throw (0, error_1.newError)('No connection available');
              }
            })
            .catch(function (error) {
              return _this._onError(error);
            });
        };
        Transaction2.prototype.run = function (query, parameters) {
          var _a = (0, util_1.validateQueryAndParameters)(query, parameters),
            validatedQuery = _a.validatedQuery,
            params = _a.params;
          var result = this._state.run(validatedQuery, params, {
            connectionHolder: this._connectionHolder,
            onError: this._onError,
            onComplete: this._onComplete,
            onConnection: this._onConnection,
            reactive: this._reactive,
            fetchSize: this._fetchSize,
          });
          this._results.push(result);
          return result;
        };
        Transaction2.prototype.commit = function () {
          var committed = this._state.commit({
            connectionHolder: this._connectionHolder,
            onError: this._onError,
            onComplete: this._onComplete,
            onConnection: this._onConnection,
            pendingResults: this._results,
          });
          this._state = committed.state;
          this._onClose();
          return new Promise(function (resolve, reject) {
            committed.result.subscribe({
              onCompleted: function () {
                return resolve();
              },
              onError: function (error) {
                return reject(error);
              },
            });
          });
        };
        Transaction2.prototype.rollback = function () {
          var rolledback = this._state.rollback({
            connectionHolder: this._connectionHolder,
            onError: this._onError,
            onComplete: this._onComplete,
            onConnection: this._onConnection,
            pendingResults: this._results,
          });
          this._state = rolledback.state;
          this._onClose();
          return new Promise(function (resolve, reject) {
            rolledback.result.subscribe({
              onCompleted: function () {
                return resolve();
              },
              onError: function (error) {
                return reject(error);
              },
            });
          });
        };
        Transaction2.prototype.isOpen = function () {
          return this._state === _states.ACTIVE;
        };
        Transaction2.prototype.close = function () {
          return __awaiter2(this, void 0, void 0, function () {
            return __generator2(this, function (_a) {
              switch (_a.label) {
                case 0:
                  if (!this.isOpen()) return [3, 2];
                  return [4, this.rollback()];
                case 1:
                  _a.sent();
                  _a.label = 2;
                case 2:
                  return [2];
              }
            });
          });
        };
        Transaction2.prototype._onErrorCallback = function (err) {
          this._state = _states.FAILED;
          this._onClose();
          return this._connectionHolder.releaseConnection();
        };
        Transaction2.prototype._onCompleteCallback = function (meta) {
          this._onBookmark(new bookmark_1.Bookmark(meta.bookmark));
        };
        return Transaction2;
      })();
      var _states = {
        ACTIVE: {
          commit: function (_a) {
            var connectionHolder = _a.connectionHolder,
              onError = _a.onError,
              onComplete = _a.onComplete,
              onConnection = _a.onConnection,
              pendingResults = _a.pendingResults;
            return {
              result: finishTransaction(
                true,
                connectionHolder,
                onError,
                onComplete,
                onConnection,
                pendingResults,
              ),
              state: _states.SUCCEEDED,
            };
          },
          rollback: function (_a) {
            var connectionHolder = _a.connectionHolder,
              onError = _a.onError,
              onComplete = _a.onComplete,
              onConnection = _a.onConnection,
              pendingResults = _a.pendingResults;
            return {
              result: finishTransaction(
                false,
                connectionHolder,
                onError,
                onComplete,
                onConnection,
                pendingResults,
              ),
              state: _states.ROLLED_BACK,
            };
          },
          run: function (query, parameters, _a) {
            var connectionHolder = _a.connectionHolder,
              onError = _a.onError,
              onComplete = _a.onComplete,
              onConnection = _a.onConnection,
              reactive = _a.reactive,
              fetchSize = _a.fetchSize;
            var observerPromise = connectionHolder
              .getConnection()
              .then(function (conn) {
                onConnection();
                if (conn) {
                  return conn.protocol().run(query, parameters, {
                    bookmark: bookmark_1.Bookmark.empty(),
                    txConfig: tx_config_1.TxConfig.empty(),
                    beforeError: onError,
                    afterComplete: onComplete,
                    reactive,
                    fetchSize,
                  });
                } else {
                  throw (0, error_1.newError)('No connection available');
                }
              })
              .catch(function (error) {
                return new observers_1.FailedObserver({ error, onError });
              });
            return newCompletedResult(
              observerPromise,
              query,
              parameters,
              connectionHolder,
            );
          },
        },
        FAILED: {
          commit: function (_a) {
            var connectionHolder = _a.connectionHolder,
              onError = _a.onError,
              onComplete = _a.onComplete;
            return {
              result: newCompletedResult(
                new observers_1.FailedObserver({
                  error: (0, error_1.newError)(
                    'Cannot commit this transaction, because it has been rolled back either because of an error or explicit termination.',
                  ),
                  onError,
                }),
                'COMMIT',
                {},
                connectionHolder,
              ),
              state: _states.FAILED,
            };
          },
          rollback: function (_a) {
            var connectionHolder = _a.connectionHolder,
              onError = _a.onError,
              onComplete = _a.onComplete;
            return {
              result: newCompletedResult(
                new observers_1.CompletedObserver(),
                'ROLLBACK',
                {},
                connectionHolder,
              ),
              state: _states.FAILED,
            };
          },
          run: function (query, parameters, _a) {
            var connectionHolder = _a.connectionHolder,
              onError = _a.onError,
              onComplete = _a.onComplete;
            return newCompletedResult(
              new observers_1.FailedObserver({
                error: (0, error_1.newError)(
                  'Cannot run query in this transaction, because it has been rolled back either because of an error or explicit termination.',
                ),
                onError,
              }),
              query,
              parameters,
              connectionHolder,
            );
          },
        },
        SUCCEEDED: {
          commit: function (_a) {
            var connectionHolder = _a.connectionHolder,
              onError = _a.onError,
              onComplete = _a.onComplete;
            return {
              result: newCompletedResult(
                new observers_1.FailedObserver({
                  error: (0, error_1.newError)(
                    'Cannot commit this transaction, because it has already been committed.',
                  ),
                  onError,
                }),
                'COMMIT',
                {},
              ),
              state: _states.SUCCEEDED,
              connectionHolder,
            };
          },
          rollback: function (_a) {
            var connectionHolder = _a.connectionHolder,
              onError = _a.onError,
              onComplete = _a.onComplete;
            return {
              result: newCompletedResult(
                new observers_1.FailedObserver({
                  error: (0, error_1.newError)(
                    'Cannot rollback this transaction, because it has already been committed.',
                  ),
                  onError,
                }),
                'ROLLBACK',
                {},
              ),
              state: _states.SUCCEEDED,
              connectionHolder,
            };
          },
          run: function (query, parameters, _a) {
            var connectionHolder = _a.connectionHolder,
              onError = _a.onError,
              onComplete = _a.onComplete;
            return newCompletedResult(
              new observers_1.FailedObserver({
                error: (0, error_1.newError)(
                  'Cannot run query in this transaction, because it has already been committed.',
                ),
                onError,
              }),
              query,
              parameters,
              connectionHolder,
            );
          },
        },
        ROLLED_BACK: {
          commit: function (_a) {
            var connectionHolder = _a.connectionHolder,
              onError = _a.onError,
              onComplete = _a.onComplete;
            return {
              result: newCompletedResult(
                new observers_1.FailedObserver({
                  error: (0, error_1.newError)(
                    'Cannot commit this transaction, because it has already been rolled back.',
                  ),
                  onError,
                }),
                'COMMIT',
                {},
                connectionHolder,
              ),
              state: _states.ROLLED_BACK,
            };
          },
          rollback: function (_a) {
            var connectionHolder = _a.connectionHolder,
              onError = _a.onError,
              onComplete = _a.onComplete;
            return {
              result: newCompletedResult(
                new observers_1.FailedObserver({
                  error: (0, error_1.newError)(
                    'Cannot rollback this transaction, because it has already been rolled back.',
                  ),
                }),
                'ROLLBACK',
                {},
                connectionHolder,
              ),
              state: _states.ROLLED_BACK,
            };
          },
          run: function (query, parameters, _a) {
            var connectionHolder = _a.connectionHolder,
              onError = _a.onError,
              onComplete = _a.onComplete;
            return newCompletedResult(
              new observers_1.FailedObserver({
                error: (0, error_1.newError)(
                  'Cannot run query in this transaction, because it has already been rolled back.',
                ),
                onError,
              }),
              query,
              parameters,
              connectionHolder,
            );
          },
        },
      };
      function finishTransaction(
        commit,
        connectionHolder,
        onError,
        onComplete,
        onConnection,
        pendingResults,
      ) {
        var observerPromise = connectionHolder
          .getConnection()
          .then(function (connection) {
            onConnection();
            pendingResults.forEach(function (r) {
              return r._cancel();
            });
            return Promise.all(pendingResults).then(function (results) {
              if (connection) {
                if (commit) {
                  return connection.protocol().commitTransaction({
                    beforeError: onError,
                    afterComplete: onComplete,
                  });
                } else {
                  return connection.protocol().rollbackTransaction({
                    beforeError: onError,
                    afterComplete: onComplete,
                  });
                }
              } else {
                throw (0, error_1.newError)('No connection available');
              }
            });
          })
          .catch(function (error) {
            return new observers_1.FailedObserver({ error, onError });
          });
        return new result_1.default(
          observerPromise,
          commit ? 'COMMIT' : 'ROLLBACK',
          {},
          connectionHolder,
        );
      }
      function newCompletedResult(
        observerPromise,
        query,
        parameters,
        connectionHolder,
      ) {
        if (connectionHolder === void 0) {
          connectionHolder = connection_holder_1.EMPTY_CONNECTION_HOLDER;
        }
        return new result_1.default(
          Promise.resolve(observerPromise),
          query,
          parameters,
          new connection_holder_1.ReadOnlyConnectionHolder(
            connectionHolder || connection_holder_1.EMPTY_CONNECTION_HOLDER,
          ),
        );
      }
      exports.default = Transaction;
    },
  });

  // node_modules/neo4j-driver-core/lib/session.js
  var require_session = __commonJS({
    'node_modules/neo4j-driver-core/lib/session.js'(exports) {
      'use strict';
      var __awaiter2 =
        (exports && exports.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator['throw'](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
      var __generator2 =
        (exports && exports.__generator) ||
        function (thisArg, body) {
          var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: [],
            },
            f,
            y,
            t,
            g;
          return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === 'function' &&
              (g[Symbol.iterator] = function () {
                return this;
              }),
            g
          );
          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f) throw new TypeError('Generator is already executing.');
            while (_)
              try {
                if (
                  ((f = 1),
                  y &&
                    (t =
                      op[0] & 2
                        ? y['return']
                        : op[0]
                        ? y['throw'] || ((t = y['return']) && t.call(y), 0)
                        : y.next) &&
                    !(t = t.call(y, op[1])).done)
                )
                  return t;
                if (((y = 0), t)) op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (
                      !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                      (op[0] === 6 || op[0] === 2)
                    ) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var observers_1 = require_observers();
      var util_1 = require_util();
      var error_1 = require_error();
      var result_1 = __importDefault2(require_result());
      var transaction_1 = __importDefault2(require_transaction());
      var connection_holder_1 = require_connection_holder();
      var constants_1 = require_constants();
      var transaction_executor_1 = require_transaction_executor();
      var bookmark_1 = require_bookmark();
      var tx_config_1 = require_tx_config();
      var Session = (function () {
        function Session2(_a) {
          var mode = _a.mode,
            connectionProvider = _a.connectionProvider,
            bookmark = _a.bookmark,
            database = _a.database,
            config2 = _a.config,
            reactive = _a.reactive,
            fetchSize = _a.fetchSize,
            impersonatedUser = _a.impersonatedUser;
          this._mode = mode;
          this._database = database;
          this._reactive = reactive;
          this._fetchSize = fetchSize;
          this._onDatabaseNameResolved =
            this._onDatabaseNameResolved.bind(this);
          this._readConnectionHolder = new connection_holder_1.ConnectionHolder(
            {
              mode: constants_1.ACCESS_MODE_READ,
              database,
              bookmark,
              connectionProvider,
              impersonatedUser,
              onDatabaseNameResolved: this._onDatabaseNameResolved,
            },
          );
          this._writeConnectionHolder =
            new connection_holder_1.ConnectionHolder({
              mode: constants_1.ACCESS_MODE_WRITE,
              database,
              bookmark,
              connectionProvider,
              impersonatedUser,
              onDatabaseNameResolved: this._onDatabaseNameResolved,
            });
          this._open = true;
          this._hasTx = false;
          this._impersonatedUser = impersonatedUser;
          this._lastBookmark = bookmark || bookmark_1.Bookmark.empty();
          this._transactionExecutor = _createTransactionExecutor(config2);
          this._onComplete = this._onCompleteCallback.bind(this);
          this._databaseNameResolved = this._database !== '';
        }
        Session2.prototype.run = function (
          query,
          parameters,
          transactionConfig,
        ) {
          var _this = this;
          var _a = (0, util_1.validateQueryAndParameters)(query, parameters),
            validatedQuery = _a.validatedQuery,
            params = _a.params;
          var autoCommitTxConfig = transactionConfig
            ? new tx_config_1.TxConfig(transactionConfig)
            : tx_config_1.TxConfig.empty();
          return this._run(validatedQuery, params, function (connection) {
            _this._assertSessionIsOpen();
            return connection.protocol().run(validatedQuery, params, {
              bookmark: _this._lastBookmark,
              txConfig: autoCommitTxConfig,
              mode: _this._mode,
              database: _this._database,
              impersonatedUser: _this._impersonatedUser,
              afterComplete: _this._onComplete,
              reactive: _this._reactive,
              fetchSize: _this._fetchSize,
            });
          });
        };
        Session2.prototype._run = function (query, parameters, customRunner) {
          var connectionHolder = this._connectionHolderWithMode(this._mode);
          var observerPromise;
          if (!this._open) {
            observerPromise = Promise.resolve(
              new observers_1.FailedObserver({
                error: (0, error_1.newError)(
                  'Cannot run query in a closed session.',
                ),
              }),
            );
          } else if (!this._hasTx && connectionHolder.initializeConnection()) {
            observerPromise = connectionHolder
              .getConnection()
              .then(function (connection) {
                return customRunner(connection);
              })
              .catch(function (error) {
                return Promise.resolve(
                  new observers_1.FailedObserver({ error }),
                );
              });
          } else {
            observerPromise = Promise.resolve(
              new observers_1.FailedObserver({
                error: (0, error_1.newError)(
                  'Queries cannot be run directly on a session with an open transaction; either run from within the transaction or use a different session.',
                ),
              }),
            );
          }
          return new result_1.default(
            observerPromise,
            query,
            parameters,
            connectionHolder,
          );
        };
        Session2.prototype._acquireConnection = function (connectionConsumer) {
          return __awaiter2(this, void 0, void 0, function () {
            var promise, connectionHolder;
            var _this = this;
            return __generator2(this, function (_a) {
              connectionHolder = this._connectionHolderWithMode(this._mode);
              if (!this._open) {
                promise = Promise.reject(
                  (0, error_1.newError)(
                    'Cannot run query in a closed session.',
                  ),
                );
              } else if (
                !this._hasTx &&
                connectionHolder.initializeConnection()
              ) {
                promise = connectionHolder
                  .getConnection()
                  .then(function (connection) {
                    return connectionConsumer(connection);
                  })
                  .then(function (result) {
                    return __awaiter2(_this, void 0, void 0, function () {
                      return __generator2(this, function (_a2) {
                        switch (_a2.label) {
                          case 0:
                            return [4, connectionHolder.releaseConnection()];
                          case 1:
                            _a2.sent();
                            return [2, result];
                        }
                      });
                    });
                  });
              } else {
                promise = Promise.reject(
                  (0, error_1.newError)(
                    'Queries cannot be run directly on a session with an open transaction; either run from within the transaction or use a different session.',
                  ),
                );
              }
              return [2, promise];
            });
          });
        };
        Session2.prototype.beginTransaction = function (transactionConfig) {
          var arg = transactionConfig;
          var txConfig = tx_config_1.TxConfig.empty();
          if (arg) {
            txConfig = new tx_config_1.TxConfig(arg);
          }
          return this._beginTransaction(this._mode, txConfig);
        };
        Session2.prototype._beginTransaction = function (accessMode, txConfig) {
          if (!this._open) {
            throw (0, error_1.newError)(
              'Cannot begin a transaction on a closed session.',
            );
          }
          if (this._hasTx) {
            throw (0, error_1.newError)(
              'You cannot begin a transaction on a session with an open transaction; either run from within the transaction or use a different session.',
            );
          }
          var mode = Session2._validateSessionMode(accessMode);
          var connectionHolder = this._connectionHolderWithMode(mode);
          connectionHolder.initializeConnection();
          this._hasTx = true;
          var tx = new transaction_1.default({
            connectionHolder,
            impersonatedUser: this._impersonatedUser,
            onClose: this._transactionClosed.bind(this),
            onBookmark: this._updateBookmark.bind(this),
            onConnection: this._assertSessionIsOpen.bind(this),
            reactive: this._reactive,
            fetchSize: this._fetchSize,
          });
          tx._begin(this._lastBookmark, txConfig);
          return tx;
        };
        Session2.prototype._assertSessionIsOpen = function () {
          if (!this._open) {
            throw (0, error_1.newError)(
              'You cannot run more transactions on a closed session.',
            );
          }
        };
        Session2.prototype._transactionClosed = function () {
          this._hasTx = false;
        };
        Session2.prototype.lastBookmark = function () {
          return this._lastBookmark.values();
        };
        Session2.prototype.readTransaction = function (
          transactionWork,
          transactionConfig,
        ) {
          var config2 = new tx_config_1.TxConfig(transactionConfig);
          return this._runTransaction(
            constants_1.ACCESS_MODE_READ,
            config2,
            transactionWork,
          );
        };
        Session2.prototype.writeTransaction = function (
          transactionWork,
          transactionConfig,
        ) {
          var config2 = new tx_config_1.TxConfig(transactionConfig);
          return this._runTransaction(
            constants_1.ACCESS_MODE_WRITE,
            config2,
            transactionWork,
          );
        };
        Session2.prototype._runTransaction = function (
          accessMode,
          transactionConfig,
          transactionWork,
        ) {
          var _this = this;
          return this._transactionExecutor.execute(function () {
            return _this._beginTransaction(accessMode, transactionConfig);
          }, transactionWork);
        };
        Session2.prototype._onDatabaseNameResolved = function (database) {
          if (!this._databaseNameResolved) {
            var normalizedDatabase = database || '';
            this._database = normalizedDatabase;
            this._readConnectionHolder.setDatabase(normalizedDatabase);
            this._writeConnectionHolder.setDatabase(normalizedDatabase);
            this._databaseNameResolved = true;
          }
        };
        Session2.prototype._updateBookmark = function (newBookmark) {
          if (newBookmark && !newBookmark.isEmpty()) {
            this._lastBookmark = newBookmark;
          }
        };
        Session2.prototype.close = function () {
          return __awaiter2(this, void 0, void 0, function () {
            return __generator2(this, function (_a) {
              switch (_a.label) {
                case 0:
                  if (!this._open) return [3, 3];
                  this._open = false;
                  this._transactionExecutor.close();
                  return [4, this._readConnectionHolder.close()];
                case 1:
                  _a.sent();
                  return [4, this._writeConnectionHolder.close()];
                case 2:
                  _a.sent();
                  _a.label = 3;
                case 3:
                  return [2];
              }
            });
          });
        };
        Session2.prototype._connectionHolderWithMode = function (mode) {
          if (mode === constants_1.ACCESS_MODE_READ) {
            return this._readConnectionHolder;
          } else if (mode === constants_1.ACCESS_MODE_WRITE) {
            return this._writeConnectionHolder;
          } else {
            throw (0, error_1.newError)('Unknown access mode: ' + mode);
          }
        };
        Session2.prototype._onCompleteCallback = function (meta) {
          this._updateBookmark(new bookmark_1.Bookmark(meta.bookmark));
        };
        Session2._validateSessionMode = function (rawMode) {
          var mode = rawMode || constants_1.ACCESS_MODE_WRITE;
          if (
            mode !== constants_1.ACCESS_MODE_READ &&
            mode !== constants_1.ACCESS_MODE_WRITE
          ) {
            throw (0, error_1.newError)('Illegal session mode ' + mode);
          }
          return mode;
        };
        return Session2;
      })();
      function _createTransactionExecutor(config2) {
        var maxRetryTimeMs =
          config2 && config2.maxTransactionRetryTime
            ? config2.maxTransactionRetryTime
            : null;
        return new transaction_executor_1.TransactionExecutor(maxRetryTimeMs);
      }
      exports.default = Session;
    },
  });

  // node_modules/neo4j-driver-core/lib/driver.js
  var require_driver = __commonJS({
    'node_modules/neo4j-driver-core/lib/driver.js'(exports) {
      'use strict';
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.WRITE = exports.READ = exports.Driver = void 0;
      var bookmark_1 = require_bookmark();
      var connectivity_verifier_1 = require_connectivity_verifier();
      var configured_custom_resolver_1 = __importDefault2(
        require_configured_custom_resolver(),
      );
      var constants_1 = require_constants();
      var logger_1 = require_logger();
      var session_1 = __importDefault2(require_session());
      var util_1 = require_util();
      var DEFAULT_MAX_CONNECTION_LIFETIME = 60 * 60 * 1e3;
      var DEFAULT_FETCH_SIZE = 1e3;
      var READ = constants_1.ACCESS_MODE_READ;
      exports.READ = READ;
      var WRITE = constants_1.ACCESS_MODE_WRITE;
      exports.WRITE = WRITE;
      var idGenerator = 0;
      var Driver = (function () {
        function Driver2(
          meta,
          config2,
          createConnectonProvider,
          createSession,
        ) {
          if (config2 === void 0) {
            config2 = {};
          }
          if (createSession === void 0) {
            createSession = function (args) {
              return new session_1.default(args);
            };
          }
          sanitizeConfig(config2);
          validateConfig(config2);
          this._id = idGenerator++;
          this._meta = meta;
          this._config = config2;
          this._log = logger_1.Logger.create(config2);
          this._createConnectionProvider = createConnectonProvider;
          this._createSession = createSession;
          this._connectionProvider = null;
          this._afterConstruction();
        }
        Driver2.prototype.verifyConnectivity = function (_a) {
          var _b = _a === void 0 ? {} : _a,
            _c = _b.database,
            database = _c === void 0 ? '' : _c;
          var connectionProvider = this._getOrCreateConnectionProvider();
          var connectivityVerifier =
            new connectivity_verifier_1.ConnectivityVerifier(
              connectionProvider,
            );
          return connectivityVerifier.verify({ database });
        };
        Driver2.prototype.supportsMultiDb = function () {
          var connectionProvider = this._getOrCreateConnectionProvider();
          return connectionProvider.supportsMultiDb();
        };
        Driver2.prototype.supportsTransactionConfig = function () {
          var connectionProvider = this._getOrCreateConnectionProvider();
          return connectionProvider.supportsTransactionConfig();
        };
        Driver2.prototype.supportsUserImpersonation = function () {
          var connectionProvider = this._getOrCreateConnectionProvider();
          return connectionProvider.supportsUserImpersonation();
        };
        Driver2.prototype._supportsRouting = function () {
          return this._meta.routing;
        };
        Driver2.prototype._isEncrypted = function () {
          return this._config.encrypted === util_1.ENCRYPTION_ON;
        };
        Driver2.prototype._getTrust = function () {
          return this._config.trust;
        };
        Driver2.prototype.session = function (_a) {
          var _b = _a === void 0 ? {} : _a,
            _c = _b.defaultAccessMode,
            defaultAccessMode = _c === void 0 ? WRITE : _c,
            bookmarkOrBookmarks = _b.bookmarks,
            _d = _b.database,
            database = _d === void 0 ? '' : _d,
            impersonatedUser = _b.impersonatedUser,
            fetchSize = _b.fetchSize;
          return this._newSession({
            defaultAccessMode,
            bookmarkOrBookmarks,
            database,
            reactive: false,
            impersonatedUser,
            fetchSize: validateFetchSizeValue(
              fetchSize,
              this._config.fetchSize,
            ),
          });
        };
        Driver2.prototype.close = function () {
          this._log.info('Driver ' + this._id + ' closing');
          if (this._connectionProvider) {
            return this._connectionProvider.close();
          }
          return Promise.resolve();
        };
        Driver2.prototype._afterConstruction = function () {
          this._log.info(
            this._meta.typename +
              ' driver ' +
              this._id +
              ' created for server address ' +
              this._meta.address,
          );
        };
        Driver2.prototype._newSession = function (_a) {
          var defaultAccessMode = _a.defaultAccessMode,
            bookmarkOrBookmarks = _a.bookmarkOrBookmarks,
            database = _a.database,
            reactive = _a.reactive,
            impersonatedUser = _a.impersonatedUser,
            fetchSize = _a.fetchSize;
          var sessionMode =
            session_1.default._validateSessionMode(defaultAccessMode);
          var connectionProvider = this._getOrCreateConnectionProvider();
          var bookmark = bookmarkOrBookmarks
            ? new bookmark_1.Bookmark(bookmarkOrBookmarks)
            : bookmark_1.Bookmark.empty();
          return this._createSession({
            mode: sessionMode,
            database: database || '',
            connectionProvider,
            bookmark,
            config: this._config,
            reactive,
            impersonatedUser,
            fetchSize,
          });
        };
        Driver2.prototype._getOrCreateConnectionProvider = function () {
          if (!this._connectionProvider) {
            this._connectionProvider = this._createConnectionProvider(
              this._id,
              this._config,
              this._log,
              createHostNameResolver(this._config),
            );
          }
          return this._connectionProvider;
        };
        return Driver2;
      })();
      exports.Driver = Driver;
      function validateConfig(config2) {
        var resolver = config2.resolver;
        if (resolver && typeof resolver !== 'function') {
          throw new TypeError(
            'Configured resolver should be a function. Got: ' + resolver,
          );
        }
        return config2;
      }
      function sanitizeConfig(config2) {
        config2.maxConnectionLifetime = sanitizeIntValue(
          config2.maxConnectionLifetime,
          DEFAULT_MAX_CONNECTION_LIFETIME,
        );
        config2.maxConnectionPoolSize = sanitizeIntValue(
          config2.maxConnectionPoolSize,
          constants_1.DEFAULT_POOL_MAX_SIZE,
        );
        config2.connectionAcquisitionTimeout = sanitizeIntValue(
          config2.connectionAcquisitionTimeout,
          constants_1.DEFAULT_POOL_ACQUISITION_TIMEOUT,
        );
        config2.fetchSize = validateFetchSizeValue(
          config2.fetchSize,
          DEFAULT_FETCH_SIZE,
        );
      }
      function sanitizeIntValue(rawValue, defaultWhenAbsent) {
        var sanitizedValue = parseInt(rawValue, 10);
        if (sanitizedValue > 0 || sanitizedValue === 0) {
          return sanitizedValue;
        } else if (sanitizedValue < 0) {
          return Number.MAX_SAFE_INTEGER;
        } else {
          return defaultWhenAbsent;
        }
      }
      function validateFetchSizeValue(rawValue, defaultWhenAbsent) {
        var fetchSize = parseInt(rawValue, 10);
        if (fetchSize > 0 || fetchSize === constants_1.FETCH_ALL) {
          return fetchSize;
        } else if (fetchSize === 0 || fetchSize < 0) {
          throw new Error(
            'The fetch size can only be a positive value or ' +
              constants_1.FETCH_ALL +
              ' for ALL. However fetchSize = ' +
              fetchSize,
          );
        } else {
          return defaultWhenAbsent;
        }
      }
      function createHostNameResolver(config2) {
        return new configured_custom_resolver_1.default(config2.resolver);
      }
      exports.default = Driver;
    },
  });

  // node_modules/neo4j-driver-core/lib/auth.js
  var require_auth = __commonJS({
    'node_modules/neo4j-driver-core/lib/auth.js'(exports) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var auth = {
        basic: function (username, password, realm) {
          if (realm) {
            return {
              scheme: 'basic',
              principal: username,
              credentials: password,
              realm,
            };
          } else {
            return {
              scheme: 'basic',
              principal: username,
              credentials: password,
            };
          }
        },
        kerberos: function (base64EncodedTicket) {
          return {
            scheme: 'kerberos',
            principal: '',
            credentials: base64EncodedTicket,
          };
        },
        bearer: function (base64EncodedToken) {
          return {
            scheme: 'bearer',
            credentials: base64EncodedToken,
          };
        },
        custom: function (principal, credentials, realm, scheme, parameters) {
          if (parameters) {
            return {
              scheme,
              principal,
              credentials,
              realm,
              parameters,
            };
          } else {
            return {
              scheme,
              principal,
              credentials,
              realm,
            };
          }
        },
      };
      exports.default = auth;
    },
  });

  // node_modules/neo4j-driver-core/lib/types.js
  var require_types = __commonJS({
    'node_modules/neo4j-driver-core/lib/types.js'(exports) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
    },
  });

  // node_modules/neo4j-driver-core/lib/index.js
  var require_lib = __commonJS({
    'node_modules/neo4j-driver-core/lib/index.js'(exports) {
      'use strict';
      var __createBinding2 =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, 'default', {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o['default'] = v;
            });
      var __importStar2 =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== 'default' &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.types =
        exports.Driver =
        exports.Session =
        exports.Transaction =
        exports.Connection =
        exports.ConnectionProvider =
        exports.Result =
        exports.Stats =
        exports.QueryStatistics =
        exports.ProfiledPlan =
        exports.Plan =
        exports.Notification =
        exports.ServerInfo =
        exports.queryType =
        exports.ResultSummary =
        exports.Record =
        exports.isPathSegment =
        exports.PathSegment =
        exports.isPath =
        exports.Path =
        exports.isUnboundRelationship =
        exports.UnboundRelationship =
        exports.isRelationship =
        exports.Relationship =
        exports.isNode =
        exports.Node =
        exports.Time =
        exports.LocalTime =
        exports.LocalDateTime =
        exports.isTime =
        exports.isLocalTime =
        exports.isLocalDateTime =
        exports.isDuration =
        exports.isDateTime =
        exports.isDate =
        exports.Duration =
        exports.DateTime =
        exports.Date =
        exports.Point =
        exports.isPoint =
        exports.internal =
        exports.toString =
        exports.toNumber =
        exports.inSafeRange =
        exports.isInt =
        exports.int =
        exports.Integer =
        exports.error =
        exports.Neo4jError =
        exports.newError =
          void 0;
      exports.auth = exports.json = exports.driver = void 0;
      var error_1 = require_error();
      Object.defineProperty(exports, 'newError', {
        enumerable: true,
        get: function () {
          return error_1.newError;
        },
      });
      Object.defineProperty(exports, 'Neo4jError', {
        enumerable: true,
        get: function () {
          return error_1.Neo4jError;
        },
      });
      var integer_1 = __importStar2(require_integer());
      exports.Integer = integer_1.default;
      Object.defineProperty(exports, 'int', {
        enumerable: true,
        get: function () {
          return integer_1.int;
        },
      });
      Object.defineProperty(exports, 'isInt', {
        enumerable: true,
        get: function () {
          return integer_1.isInt;
        },
      });
      Object.defineProperty(exports, 'inSafeRange', {
        enumerable: true,
        get: function () {
          return integer_1.inSafeRange;
        },
      });
      Object.defineProperty(exports, 'toNumber', {
        enumerable: true,
        get: function () {
          return integer_1.toNumber;
        },
      });
      Object.defineProperty(exports, 'toString', {
        enumerable: true,
        get: function () {
          return integer_1.toString;
        },
      });
      var temporal_types_1 = require_temporal_types();
      Object.defineProperty(exports, 'Date', {
        enumerable: true,
        get: function () {
          return temporal_types_1.Date;
        },
      });
      Object.defineProperty(exports, 'DateTime', {
        enumerable: true,
        get: function () {
          return temporal_types_1.DateTime;
        },
      });
      Object.defineProperty(exports, 'Duration', {
        enumerable: true,
        get: function () {
          return temporal_types_1.Duration;
        },
      });
      Object.defineProperty(exports, 'isDate', {
        enumerable: true,
        get: function () {
          return temporal_types_1.isDate;
        },
      });
      Object.defineProperty(exports, 'isDateTime', {
        enumerable: true,
        get: function () {
          return temporal_types_1.isDateTime;
        },
      });
      Object.defineProperty(exports, 'isDuration', {
        enumerable: true,
        get: function () {
          return temporal_types_1.isDuration;
        },
      });
      Object.defineProperty(exports, 'isLocalDateTime', {
        enumerable: true,
        get: function () {
          return temporal_types_1.isLocalDateTime;
        },
      });
      Object.defineProperty(exports, 'isLocalTime', {
        enumerable: true,
        get: function () {
          return temporal_types_1.isLocalTime;
        },
      });
      Object.defineProperty(exports, 'isTime', {
        enumerable: true,
        get: function () {
          return temporal_types_1.isTime;
        },
      });
      Object.defineProperty(exports, 'LocalDateTime', {
        enumerable: true,
        get: function () {
          return temporal_types_1.LocalDateTime;
        },
      });
      Object.defineProperty(exports, 'LocalTime', {
        enumerable: true,
        get: function () {
          return temporal_types_1.LocalTime;
        },
      });
      Object.defineProperty(exports, 'Time', {
        enumerable: true,
        get: function () {
          return temporal_types_1.Time;
        },
      });
      var graph_types_1 = require_graph_types();
      Object.defineProperty(exports, 'Node', {
        enumerable: true,
        get: function () {
          return graph_types_1.Node;
        },
      });
      Object.defineProperty(exports, 'isNode', {
        enumerable: true,
        get: function () {
          return graph_types_1.isNode;
        },
      });
      Object.defineProperty(exports, 'Relationship', {
        enumerable: true,
        get: function () {
          return graph_types_1.Relationship;
        },
      });
      Object.defineProperty(exports, 'isRelationship', {
        enumerable: true,
        get: function () {
          return graph_types_1.isRelationship;
        },
      });
      Object.defineProperty(exports, 'UnboundRelationship', {
        enumerable: true,
        get: function () {
          return graph_types_1.UnboundRelationship;
        },
      });
      Object.defineProperty(exports, 'isUnboundRelationship', {
        enumerable: true,
        get: function () {
          return graph_types_1.isUnboundRelationship;
        },
      });
      Object.defineProperty(exports, 'Path', {
        enumerable: true,
        get: function () {
          return graph_types_1.Path;
        },
      });
      Object.defineProperty(exports, 'isPath', {
        enumerable: true,
        get: function () {
          return graph_types_1.isPath;
        },
      });
      Object.defineProperty(exports, 'PathSegment', {
        enumerable: true,
        get: function () {
          return graph_types_1.PathSegment;
        },
      });
      Object.defineProperty(exports, 'isPathSegment', {
        enumerable: true,
        get: function () {
          return graph_types_1.isPathSegment;
        },
      });
      var record_1 = __importDefault2(require_record());
      exports.Record = record_1.default;
      var spatial_types_1 = require_spatial_types();
      Object.defineProperty(exports, 'isPoint', {
        enumerable: true,
        get: function () {
          return spatial_types_1.isPoint;
        },
      });
      Object.defineProperty(exports, 'Point', {
        enumerable: true,
        get: function () {
          return spatial_types_1.Point;
        },
      });
      var result_summary_1 = __importStar2(require_result_summary());
      exports.ResultSummary = result_summary_1.default;
      Object.defineProperty(exports, 'queryType', {
        enumerable: true,
        get: function () {
          return result_summary_1.queryType;
        },
      });
      Object.defineProperty(exports, 'ServerInfo', {
        enumerable: true,
        get: function () {
          return result_summary_1.ServerInfo;
        },
      });
      Object.defineProperty(exports, 'Notification', {
        enumerable: true,
        get: function () {
          return result_summary_1.Notification;
        },
      });
      Object.defineProperty(exports, 'Plan', {
        enumerable: true,
        get: function () {
          return result_summary_1.Plan;
        },
      });
      Object.defineProperty(exports, 'ProfiledPlan', {
        enumerable: true,
        get: function () {
          return result_summary_1.ProfiledPlan;
        },
      });
      Object.defineProperty(exports, 'QueryStatistics', {
        enumerable: true,
        get: function () {
          return result_summary_1.QueryStatistics;
        },
      });
      Object.defineProperty(exports, 'Stats', {
        enumerable: true,
        get: function () {
          return result_summary_1.Stats;
        },
      });
      var result_1 = __importDefault2(require_result());
      exports.Result = result_1.default;
      var connection_provider_1 = __importDefault2(
        require_connection_provider(),
      );
      exports.ConnectionProvider = connection_provider_1.default;
      var connection_1 = __importDefault2(require_connection());
      exports.Connection = connection_1.default;
      var transaction_1 = __importDefault2(require_transaction());
      exports.Transaction = transaction_1.default;
      var session_1 = __importDefault2(require_session());
      exports.Session = session_1.default;
      var driver_1 = __importStar2(require_driver());
      var driver = driver_1;
      exports.Driver = driver_1.default;
      exports.driver = driver;
      var auth_1 = __importDefault2(require_auth());
      exports.auth = auth_1.default;
      var types = __importStar2(require_types());
      exports.types = types;
      var json = __importStar2(require_json());
      exports.json = json;
      var internal = __importStar2(require_internal());
      exports.internal = internal;
      var error = {
        SERVICE_UNAVAILABLE: error_1.SERVICE_UNAVAILABLE,
        SESSION_EXPIRED: error_1.SESSION_EXPIRED,
        PROTOCOL_ERROR: error_1.PROTOCOL_ERROR,
      };
      exports.error = error;
      var forExport = {
        newError: error_1.newError,
        Neo4jError: error_1.Neo4jError,
        error,
        Integer: integer_1.default,
        int: integer_1.int,
        isInt: integer_1.isInt,
        inSafeRange: integer_1.inSafeRange,
        toNumber: integer_1.toNumber,
        toString: integer_1.toString,
        internal,
        isPoint: spatial_types_1.isPoint,
        Point: spatial_types_1.Point,
        Date: temporal_types_1.Date,
        DateTime: temporal_types_1.DateTime,
        Duration: temporal_types_1.Duration,
        isDate: temporal_types_1.isDate,
        isDateTime: temporal_types_1.isDateTime,
        isDuration: temporal_types_1.isDuration,
        isLocalDateTime: temporal_types_1.isLocalDateTime,
        isLocalTime: temporal_types_1.isLocalTime,
        isTime: temporal_types_1.isTime,
        LocalDateTime: temporal_types_1.LocalDateTime,
        LocalTime: temporal_types_1.LocalTime,
        Time: temporal_types_1.Time,
        Node: graph_types_1.Node,
        isNode: graph_types_1.isNode,
        Relationship: graph_types_1.Relationship,
        isRelationship: graph_types_1.isRelationship,
        UnboundRelationship: graph_types_1.UnboundRelationship,
        isUnboundRelationship: graph_types_1.isUnboundRelationship,
        Path: graph_types_1.Path,
        isPath: graph_types_1.isPath,
        PathSegment: graph_types_1.PathSegment,
        isPathSegment: graph_types_1.isPathSegment,
        Record: record_1.default,
        ResultSummary: result_summary_1.default,
        queryType: result_summary_1.queryType,
        ServerInfo: result_summary_1.ServerInfo,
        Notification: result_summary_1.Notification,
        Plan: result_summary_1.Plan,
        ProfiledPlan: result_summary_1.ProfiledPlan,
        QueryStatistics: result_summary_1.QueryStatistics,
        Stats: result_summary_1.Stats,
        Result: result_1.default,
        Transaction: transaction_1.default,
        Session: session_1.default,
        Driver: driver_1.default,
        Connection: connection_1.default,
        types,
        driver,
        json,
        auth: auth_1.default,
      };
      exports.default = forExport;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/isFunction.js
  var require_isFunction = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/isFunction.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      function isFunction2(x) {
        return typeof x === 'function';
      }
      exports.isFunction = isFunction2;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/config.js
  var require_config = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/config.js'(exports) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var _enable_super_gross_mode_that_will_cause_bad_things = false;
      exports.config = {
        Promise: void 0,
        set useDeprecatedSynchronousErrorHandling(value) {
          if (value) {
            var error = new Error();
            console.warn(
              'DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' +
                error.stack,
            );
          } else if (_enable_super_gross_mode_that_will_cause_bad_things) {
            console.log('RxJS: Back to a better error behavior. Thank you. <3');
          }
          _enable_super_gross_mode_that_will_cause_bad_things = value;
        },
        get useDeprecatedSynchronousErrorHandling() {
          return _enable_super_gross_mode_that_will_cause_bad_things;
        },
      };
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/hostReportError.js
  var require_hostReportError = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/hostReportError.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      function hostReportError(err) {
        setTimeout(function () {
          throw err;
        }, 0);
      }
      exports.hostReportError = hostReportError;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/Observer.js
  var require_Observer = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/Observer.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var config_1 = require_config();
      var hostReportError_1 = require_hostReportError();
      exports.empty = {
        closed: true,
        next: function (value) {},
        error: function (err) {
          if (config_1.config.useDeprecatedSynchronousErrorHandling) {
            throw err;
          } else {
            hostReportError_1.hostReportError(err);
          }
        },
        complete: function () {},
      };
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/isArray.js
  var require_isArray = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/isArray.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.isArray = (function () {
        return (
          Array.isArray ||
          function (x) {
            return x && typeof x.length === 'number';
          }
        );
      })();
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/isObject.js
  var require_isObject = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/isObject.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      function isObject(x) {
        return x !== null && typeof x === 'object';
      }
      exports.isObject = isObject;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/UnsubscriptionError.js
  var require_UnsubscriptionError = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/UnsubscriptionError.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var UnsubscriptionErrorImpl = (function () {
        function UnsubscriptionErrorImpl2(errors) {
          Error.call(this);
          this.message = errors
            ? errors.length +
              ' errors occurred during unsubscription:\n' +
              errors
                .map(function (err, i) {
                  return i + 1 + ') ' + err.toString();
                })
                .join('\n  ')
            : '';
          this.name = 'UnsubscriptionError';
          this.errors = errors;
          return this;
        }
        UnsubscriptionErrorImpl2.prototype = Object.create(Error.prototype);
        return UnsubscriptionErrorImpl2;
      })();
      exports.UnsubscriptionError = UnsubscriptionErrorImpl;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/Subscription.js
  var require_Subscription = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/Subscription.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var isArray_1 = require_isArray();
      var isObject_1 = require_isObject();
      var isFunction_1 = require_isFunction();
      var UnsubscriptionError_1 = require_UnsubscriptionError();
      var Subscription2 = (function () {
        function Subscription3(unsubscribe) {
          this.closed = false;
          this._parentOrParents = null;
          this._subscriptions = null;
          if (unsubscribe) {
            this._ctorUnsubscribe = true;
            this._unsubscribe = unsubscribe;
          }
        }
        Subscription3.prototype.unsubscribe = function () {
          var errors;
          if (this.closed) {
            return;
          }
          var _a = this,
            _parentOrParents = _a._parentOrParents,
            _ctorUnsubscribe = _a._ctorUnsubscribe,
            _unsubscribe = _a._unsubscribe,
            _subscriptions = _a._subscriptions;
          this.closed = true;
          this._parentOrParents = null;
          this._subscriptions = null;
          if (_parentOrParents instanceof Subscription3) {
            _parentOrParents.remove(this);
          } else if (_parentOrParents !== null) {
            for (var index = 0; index < _parentOrParents.length; ++index) {
              var parent_1 = _parentOrParents[index];
              parent_1.remove(this);
            }
          }
          if (isFunction_1.isFunction(_unsubscribe)) {
            if (_ctorUnsubscribe) {
              this._unsubscribe = void 0;
            }
            try {
              _unsubscribe.call(this);
            } catch (e) {
              errors =
                e instanceof UnsubscriptionError_1.UnsubscriptionError
                  ? flattenUnsubscriptionErrors(e.errors)
                  : [e];
            }
          }
          if (isArray_1.isArray(_subscriptions)) {
            var index = -1;
            var len = _subscriptions.length;
            while (++index < len) {
              var sub = _subscriptions[index];
              if (isObject_1.isObject(sub)) {
                try {
                  sub.unsubscribe();
                } catch (e) {
                  errors = errors || [];
                  if (e instanceof UnsubscriptionError_1.UnsubscriptionError) {
                    errors = errors.concat(
                      flattenUnsubscriptionErrors(e.errors),
                    );
                  } else {
                    errors.push(e);
                  }
                }
              }
            }
          }
          if (errors) {
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
          }
        };
        Subscription3.prototype.add = function (teardown) {
          var subscription = teardown;
          if (!teardown) {
            return Subscription3.EMPTY;
          }
          switch (typeof teardown) {
            case 'function':
              subscription = new Subscription3(teardown);
            case 'object':
              if (
                subscription === this ||
                subscription.closed ||
                typeof subscription.unsubscribe !== 'function'
              ) {
                return subscription;
              } else if (this.closed) {
                subscription.unsubscribe();
                return subscription;
              } else if (!(subscription instanceof Subscription3)) {
                var tmp = subscription;
                subscription = new Subscription3();
                subscription._subscriptions = [tmp];
              }
              break;
            default: {
              throw new Error(
                'unrecognized teardown ' + teardown + ' added to Subscription.',
              );
            }
          }
          var _parentOrParents = subscription._parentOrParents;
          if (_parentOrParents === null) {
            subscription._parentOrParents = this;
          } else if (_parentOrParents instanceof Subscription3) {
            if (_parentOrParents === this) {
              return subscription;
            }
            subscription._parentOrParents = [_parentOrParents, this];
          } else if (_parentOrParents.indexOf(this) === -1) {
            _parentOrParents.push(this);
          } else {
            return subscription;
          }
          var subscriptions = this._subscriptions;
          if (subscriptions === null) {
            this._subscriptions = [subscription];
          } else {
            subscriptions.push(subscription);
          }
          return subscription;
        };
        Subscription3.prototype.remove = function (subscription) {
          var subscriptions = this._subscriptions;
          if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
              subscriptions.splice(subscriptionIndex, 1);
            }
          }
        };
        Subscription3.EMPTY = (function (empty) {
          empty.closed = true;
          return empty;
        })(new Subscription3());
        return Subscription3;
      })();
      exports.Subscription = Subscription2;
      function flattenUnsubscriptionErrors(errors) {
        return errors.reduce(function (errs, err) {
          return errs.concat(
            err instanceof UnsubscriptionError_1.UnsubscriptionError
              ? err.errors
              : err,
          );
        }, []);
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/symbol/rxSubscriber.js
  var require_rxSubscriber = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/symbol/rxSubscriber.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.rxSubscriber = (function () {
        return typeof Symbol === 'function'
          ? Symbol('rxSubscriber')
          : '@@rxSubscriber_' + Math.random();
      })();
      exports.$$rxSubscriber = exports.rxSubscriber;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/Subscriber.js
  var require_Subscriber = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/Subscriber.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var isFunction_1 = require_isFunction();
      var Observer_1 = require_Observer();
      var Subscription_1 = require_Subscription();
      var rxSubscriber_1 = require_rxSubscriber();
      var config_1 = require_config();
      var hostReportError_1 = require_hostReportError();
      var Subscriber2 = (function (_super) {
        __extends2(Subscriber3, _super);
        function Subscriber3(destinationOrNext, error, complete) {
          var _this = _super.call(this) || this;
          _this.syncErrorValue = null;
          _this.syncErrorThrown = false;
          _this.syncErrorThrowable = false;
          _this.isStopped = false;
          switch (arguments.length) {
            case 0:
              _this.destination = Observer_1.empty;
              break;
            case 1:
              if (!destinationOrNext) {
                _this.destination = Observer_1.empty;
                break;
              }
              if (typeof destinationOrNext === 'object') {
                if (destinationOrNext instanceof Subscriber3) {
                  _this.syncErrorThrowable =
                    destinationOrNext.syncErrorThrowable;
                  _this.destination = destinationOrNext;
                  destinationOrNext.add(_this);
                } else {
                  _this.syncErrorThrowable = true;
                  _this.destination = new SafeSubscriber2(
                    _this,
                    destinationOrNext,
                  );
                }
                break;
              }
            default:
              _this.syncErrorThrowable = true;
              _this.destination = new SafeSubscriber2(
                _this,
                destinationOrNext,
                error,
                complete,
              );
              break;
          }
          return _this;
        }
        Subscriber3.prototype[rxSubscriber_1.rxSubscriber] = function () {
          return this;
        };
        Subscriber3.create = function (next, error, complete) {
          var subscriber = new Subscriber3(next, error, complete);
          subscriber.syncErrorThrowable = false;
          return subscriber;
        };
        Subscriber3.prototype.next = function (value) {
          if (!this.isStopped) {
            this._next(value);
          }
        };
        Subscriber3.prototype.error = function (err) {
          if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
          }
        };
        Subscriber3.prototype.complete = function () {
          if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
          }
        };
        Subscriber3.prototype.unsubscribe = function () {
          if (this.closed) {
            return;
          }
          this.isStopped = true;
          _super.prototype.unsubscribe.call(this);
        };
        Subscriber3.prototype._next = function (value) {
          this.destination.next(value);
        };
        Subscriber3.prototype._error = function (err) {
          this.destination.error(err);
          this.unsubscribe();
        };
        Subscriber3.prototype._complete = function () {
          this.destination.complete();
          this.unsubscribe();
        };
        Subscriber3.prototype._unsubscribeAndRecycle = function () {
          var _parentOrParents = this._parentOrParents;
          this._parentOrParents = null;
          this.unsubscribe();
          this.closed = false;
          this.isStopped = false;
          this._parentOrParents = _parentOrParents;
          return this;
        };
        return Subscriber3;
      })(Subscription_1.Subscription);
      exports.Subscriber = Subscriber2;
      var SafeSubscriber2 = (function (_super) {
        __extends2(SafeSubscriber3, _super);
        function SafeSubscriber3(
          _parentSubscriber,
          observerOrNext,
          error,
          complete,
        ) {
          var _this = _super.call(this) || this;
          _this._parentSubscriber = _parentSubscriber;
          var next;
          var context2 = _this;
          if (isFunction_1.isFunction(observerOrNext)) {
            next = observerOrNext;
          } else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== Observer_1.empty) {
              context2 = Object.create(observerOrNext);
              if (isFunction_1.isFunction(context2.unsubscribe)) {
                _this.add(context2.unsubscribe.bind(context2));
              }
              context2.unsubscribe = _this.unsubscribe.bind(_this);
            }
          }
          _this._context = context2;
          _this._next = next;
          _this._error = error;
          _this._complete = complete;
          return _this;
        }
        SafeSubscriber3.prototype.next = function (value) {
          if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (
              !config_1.config.useDeprecatedSynchronousErrorHandling ||
              !_parentSubscriber.syncErrorThrowable
            ) {
              this.__tryOrUnsub(this._next, value);
            } else if (
              this.__tryOrSetError(_parentSubscriber, this._next, value)
            ) {
              this.unsubscribe();
            }
          }
        };
        SafeSubscriber3.prototype.error = function (err) {
          if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            var useDeprecatedSynchronousErrorHandling =
              config_1.config.useDeprecatedSynchronousErrorHandling;
            if (this._error) {
              if (
                !useDeprecatedSynchronousErrorHandling ||
                !_parentSubscriber.syncErrorThrowable
              ) {
                this.__tryOrUnsub(this._error, err);
                this.unsubscribe();
              } else {
                this.__tryOrSetError(_parentSubscriber, this._error, err);
                this.unsubscribe();
              }
            } else if (!_parentSubscriber.syncErrorThrowable) {
              this.unsubscribe();
              if (useDeprecatedSynchronousErrorHandling) {
                throw err;
              }
              hostReportError_1.hostReportError(err);
            } else {
              if (useDeprecatedSynchronousErrorHandling) {
                _parentSubscriber.syncErrorValue = err;
                _parentSubscriber.syncErrorThrown = true;
              } else {
                hostReportError_1.hostReportError(err);
              }
              this.unsubscribe();
            }
          }
        };
        SafeSubscriber3.prototype.complete = function () {
          var _this = this;
          if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
              var wrappedComplete = function () {
                return _this._complete.call(_this._context);
              };
              if (
                !config_1.config.useDeprecatedSynchronousErrorHandling ||
                !_parentSubscriber.syncErrorThrowable
              ) {
                this.__tryOrUnsub(wrappedComplete);
                this.unsubscribe();
              } else {
                this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                this.unsubscribe();
              }
            } else {
              this.unsubscribe();
            }
          }
        };
        SafeSubscriber3.prototype.__tryOrUnsub = function (fn, value) {
          try {
            fn.call(this._context, value);
          } catch (err) {
            this.unsubscribe();
            if (config_1.config.useDeprecatedSynchronousErrorHandling) {
              throw err;
            } else {
              hostReportError_1.hostReportError(err);
            }
          }
        };
        SafeSubscriber3.prototype.__tryOrSetError = function (
          parent,
          fn,
          value,
        ) {
          if (!config_1.config.useDeprecatedSynchronousErrorHandling) {
            throw new Error('bad call');
          }
          try {
            fn.call(this._context, value);
          } catch (err) {
            if (config_1.config.useDeprecatedSynchronousErrorHandling) {
              parent.syncErrorValue = err;
              parent.syncErrorThrown = true;
              return true;
            } else {
              hostReportError_1.hostReportError(err);
              return true;
            }
          }
          return false;
        };
        SafeSubscriber3.prototype._unsubscribe = function () {
          var _parentSubscriber = this._parentSubscriber;
          this._context = null;
          this._parentSubscriber = null;
          _parentSubscriber.unsubscribe();
        };
        return SafeSubscriber3;
      })(Subscriber2);
      exports.SafeSubscriber = SafeSubscriber2;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/canReportError.js
  var require_canReportError = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/canReportError.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function canReportError(observer) {
        while (observer) {
          var _a = observer,
            closed_1 = _a.closed,
            destination = _a.destination,
            isStopped = _a.isStopped;
          if (closed_1 || isStopped) {
            return false;
          } else if (
            destination &&
            destination instanceof Subscriber_1.Subscriber
          ) {
            observer = destination;
          } else {
            observer = null;
          }
        }
        return true;
      }
      exports.canReportError = canReportError;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/toSubscriber.js
  var require_toSubscriber = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/toSubscriber.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var rxSubscriber_1 = require_rxSubscriber();
      var Observer_1 = require_Observer();
      function toSubscriber(nextOrObserver, error, complete) {
        if (nextOrObserver) {
          if (nextOrObserver instanceof Subscriber_1.Subscriber) {
            return nextOrObserver;
          }
          if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {
            return nextOrObserver[rxSubscriber_1.rxSubscriber]();
          }
        }
        if (!nextOrObserver && !error && !complete) {
          return new Subscriber_1.Subscriber(Observer_1.empty);
        }
        return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
      }
      exports.toSubscriber = toSubscriber;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/symbol/observable.js
  var require_observable = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/symbol/observable.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.observable = (function () {
        return (
          (typeof Symbol === 'function' && Symbol.observable) || '@@observable'
        );
      })();
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/identity.js
  var require_identity = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/identity.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      function identity2(x) {
        return x;
      }
      exports.identity = identity2;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/pipe.js
  var require_pipe = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/pipe.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var identity_1 = require_identity();
      function pipe() {
        var fns = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          fns[_i] = arguments[_i];
        }
        return pipeFromArray2(fns);
      }
      exports.pipe = pipe;
      function pipeFromArray2(fns) {
        if (fns.length === 0) {
          return identity_1.identity;
        }
        if (fns.length === 1) {
          return fns[0];
        }
        return function piped(input) {
          return fns.reduce(function (prev, fn) {
            return fn(prev);
          }, input);
        };
      }
      exports.pipeFromArray = pipeFromArray2;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/Observable.js
  var require_Observable = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/Observable.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var canReportError_1 = require_canReportError();
      var toSubscriber_1 = require_toSubscriber();
      var observable_1 = require_observable();
      var pipe_1 = require_pipe();
      var config_1 = require_config();
      var Observable2 = (function () {
        function Observable3(subscribe) {
          this._isScalar = false;
          if (subscribe) {
            this._subscribe = subscribe;
          }
        }
        Observable3.prototype.lift = function (operator) {
          var observable2 = new Observable3();
          observable2.source = this;
          observable2.operator = operator;
          return observable2;
        };
        Observable3.prototype.subscribe = function (
          observerOrNext,
          error,
          complete,
        ) {
          var operator = this.operator;
          var sink = toSubscriber_1.toSubscriber(
            observerOrNext,
            error,
            complete,
          );
          if (operator) {
            sink.add(operator.call(sink, this.source));
          } else {
            sink.add(
              this.source ||
                (config_1.config.useDeprecatedSynchronousErrorHandling &&
                  !sink.syncErrorThrowable)
                ? this._subscribe(sink)
                : this._trySubscribe(sink),
            );
          }
          if (config_1.config.useDeprecatedSynchronousErrorHandling) {
            if (sink.syncErrorThrowable) {
              sink.syncErrorThrowable = false;
              if (sink.syncErrorThrown) {
                throw sink.syncErrorValue;
              }
            }
          }
          return sink;
        };
        Observable3.prototype._trySubscribe = function (sink) {
          try {
            return this._subscribe(sink);
          } catch (err) {
            if (config_1.config.useDeprecatedSynchronousErrorHandling) {
              sink.syncErrorThrown = true;
              sink.syncErrorValue = err;
            }
            if (canReportError_1.canReportError(sink)) {
              sink.error(err);
            } else {
              console.warn(err);
            }
          }
        };
        Observable3.prototype.forEach = function (next, promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor2(promiseCtor);
          return new promiseCtor(function (resolve, reject) {
            var subscription;
            subscription = _this.subscribe(
              function (value) {
                try {
                  next(value);
                } catch (err) {
                  reject(err);
                  if (subscription) {
                    subscription.unsubscribe();
                  }
                }
              },
              reject,
              resolve,
            );
          });
        };
        Observable3.prototype._subscribe = function (subscriber) {
          var source = this.source;
          return source && source.subscribe(subscriber);
        };
        Observable3.prototype[observable_1.observable] = function () {
          return this;
        };
        Observable3.prototype.pipe = function () {
          var operations = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
          }
          if (operations.length === 0) {
            return this;
          }
          return pipe_1.pipeFromArray(operations)(this);
        };
        Observable3.prototype.toPromise = function (promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor2(promiseCtor);
          return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(
              function (x) {
                return (value = x);
              },
              function (err) {
                return reject(err);
              },
              function () {
                return resolve(value);
              },
            );
          });
        };
        Observable3.create = function (subscribe) {
          return new Observable3(subscribe);
        };
        return Observable3;
      })();
      exports.Observable = Observable2;
      function getPromiseCtor2(promiseCtor) {
        if (!promiseCtor) {
          promiseCtor = config_1.config.Promise || Promise;
        }
        if (!promiseCtor) {
          throw new Error('no Promise impl found');
        }
        return promiseCtor;
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/ObjectUnsubscribedError.js
  var require_ObjectUnsubscribedError = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/ObjectUnsubscribedError.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var ObjectUnsubscribedErrorImpl = (function () {
        function ObjectUnsubscribedErrorImpl2() {
          Error.call(this);
          this.message = 'object unsubscribed';
          this.name = 'ObjectUnsubscribedError';
          return this;
        }
        ObjectUnsubscribedErrorImpl2.prototype = Object.create(Error.prototype);
        return ObjectUnsubscribedErrorImpl2;
      })();
      exports.ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/SubjectSubscription.js
  var require_SubjectSubscription = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/SubjectSubscription.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscription_1 = require_Subscription();
      var SubjectSubscription = (function (_super) {
        __extends2(SubjectSubscription2, _super);
        function SubjectSubscription2(subject, subscriber) {
          var _this = _super.call(this) || this;
          _this.subject = subject;
          _this.subscriber = subscriber;
          _this.closed = false;
          return _this;
        }
        SubjectSubscription2.prototype.unsubscribe = function () {
          if (this.closed) {
            return;
          }
          this.closed = true;
          var subject = this.subject;
          var observers = subject.observers;
          this.subject = null;
          if (
            !observers ||
            observers.length === 0 ||
            subject.isStopped ||
            subject.closed
          ) {
            return;
          }
          var subscriberIndex = observers.indexOf(this.subscriber);
          if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
          }
        };
        return SubjectSubscription2;
      })(Subscription_1.Subscription);
      exports.SubjectSubscription = SubjectSubscription;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/Subject.js
  var require_Subject = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/Subject.js'(exports) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var Subscriber_1 = require_Subscriber();
      var Subscription_1 = require_Subscription();
      var ObjectUnsubscribedError_1 = require_ObjectUnsubscribedError();
      var SubjectSubscription_1 = require_SubjectSubscription();
      var rxSubscriber_1 = require_rxSubscriber();
      var SubjectSubscriber = (function (_super) {
        __extends2(SubjectSubscriber2, _super);
        function SubjectSubscriber2(destination) {
          var _this = _super.call(this, destination) || this;
          _this.destination = destination;
          return _this;
        }
        return SubjectSubscriber2;
      })(Subscriber_1.Subscriber);
      exports.SubjectSubscriber = SubjectSubscriber;
      var Subject = (function (_super) {
        __extends2(Subject2, _super);
        function Subject2() {
          var _this = _super.call(this) || this;
          _this.observers = [];
          _this.closed = false;
          _this.isStopped = false;
          _this.hasError = false;
          _this.thrownError = null;
          return _this;
        }
        Subject2.prototype[rxSubscriber_1.rxSubscriber] = function () {
          return new SubjectSubscriber(this);
        };
        Subject2.prototype.lift = function (operator) {
          var subject = new AnonymousSubject(this, this);
          subject.operator = operator;
          return subject;
        };
        Subject2.prototype.next = function (value) {
          if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
          }
          if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
              copy[i].next(value);
            }
          }
        };
        Subject2.prototype.error = function (err) {
          if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
          }
          this.hasError = true;
          this.thrownError = err;
          this.isStopped = true;
          var observers = this.observers;
          var len = observers.length;
          var copy = observers.slice();
          for (var i = 0; i < len; i++) {
            copy[i].error(err);
          }
          this.observers.length = 0;
        };
        Subject2.prototype.complete = function () {
          if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
          }
          this.isStopped = true;
          var observers = this.observers;
          var len = observers.length;
          var copy = observers.slice();
          for (var i = 0; i < len; i++) {
            copy[i].complete();
          }
          this.observers.length = 0;
        };
        Subject2.prototype.unsubscribe = function () {
          this.isStopped = true;
          this.closed = true;
          this.observers = null;
        };
        Subject2.prototype._trySubscribe = function (subscriber) {
          if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
          } else {
            return _super.prototype._trySubscribe.call(this, subscriber);
          }
        };
        Subject2.prototype._subscribe = function (subscriber) {
          if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
          } else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
          } else if (this.isStopped) {
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
          } else {
            this.observers.push(subscriber);
            return new SubjectSubscription_1.SubjectSubscription(
              this,
              subscriber,
            );
          }
        };
        Subject2.prototype.asObservable = function () {
          var observable2 = new Observable_1.Observable();
          observable2.source = this;
          return observable2;
        };
        Subject2.create = function (destination, source) {
          return new AnonymousSubject(destination, source);
        };
        return Subject2;
      })(Observable_1.Observable);
      exports.Subject = Subject;
      var AnonymousSubject = (function (_super) {
        __extends2(AnonymousSubject2, _super);
        function AnonymousSubject2(destination, source) {
          var _this = _super.call(this) || this;
          _this.destination = destination;
          _this.source = source;
          return _this;
        }
        AnonymousSubject2.prototype.next = function (value) {
          var destination = this.destination;
          if (destination && destination.next) {
            destination.next(value);
          }
        };
        AnonymousSubject2.prototype.error = function (err) {
          var destination = this.destination;
          if (destination && destination.error) {
            this.destination.error(err);
          }
        };
        AnonymousSubject2.prototype.complete = function () {
          var destination = this.destination;
          if (destination && destination.complete) {
            this.destination.complete();
          }
        };
        AnonymousSubject2.prototype._subscribe = function (subscriber) {
          var source = this.source;
          if (source) {
            return this.source.subscribe(subscriber);
          } else {
            return Subscription_1.Subscription.EMPTY;
          }
        };
        return AnonymousSubject2;
      })(Subject);
      exports.AnonymousSubject = AnonymousSubject;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/refCount.js
  var require_refCount = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/refCount.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function refCount() {
        return function refCountOperatorFunction(source) {
          return source.lift(new RefCountOperator(source));
        };
      }
      exports.refCount = refCount;
      var RefCountOperator = (function () {
        function RefCountOperator2(connectable) {
          this.connectable = connectable;
        }
        RefCountOperator2.prototype.call = function (subscriber, source) {
          var connectable = this.connectable;
          connectable._refCount++;
          var refCounter = new RefCountSubscriber(subscriber, connectable);
          var subscription = source.subscribe(refCounter);
          if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
          }
          return subscription;
        };
        return RefCountOperator2;
      })();
      var RefCountSubscriber = (function (_super) {
        __extends2(RefCountSubscriber2, _super);
        function RefCountSubscriber2(destination, connectable) {
          var _this = _super.call(this, destination) || this;
          _this.connectable = connectable;
          return _this;
        }
        RefCountSubscriber2.prototype._unsubscribe = function () {
          var connectable = this.connectable;
          if (!connectable) {
            this.connection = null;
            return;
          }
          this.connectable = null;
          var refCount2 = connectable._refCount;
          if (refCount2 <= 0) {
            this.connection = null;
            return;
          }
          connectable._refCount = refCount2 - 1;
          if (refCount2 > 1) {
            this.connection = null;
            return;
          }
          var connection = this.connection;
          var sharedConnection = connectable._connection;
          this.connection = null;
          if (
            sharedConnection &&
            (!connection || sharedConnection === connection)
          ) {
            sharedConnection.unsubscribe();
          }
        };
        return RefCountSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/ConnectableObservable.js
  var require_ConnectableObservable = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/ConnectableObservable.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subject_1 = require_Subject();
      var Observable_1 = require_Observable();
      var Subscriber_1 = require_Subscriber();
      var Subscription_1 = require_Subscription();
      var refCount_1 = require_refCount();
      var ConnectableObservable = (function (_super) {
        __extends2(ConnectableObservable2, _super);
        function ConnectableObservable2(source, subjectFactory) {
          var _this = _super.call(this) || this;
          _this.source = source;
          _this.subjectFactory = subjectFactory;
          _this._refCount = 0;
          _this._isComplete = false;
          return _this;
        }
        ConnectableObservable2.prototype._subscribe = function (subscriber) {
          return this.getSubject().subscribe(subscriber);
        };
        ConnectableObservable2.prototype.getSubject = function () {
          var subject = this._subject;
          if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
          }
          return this._subject;
        };
        ConnectableObservable2.prototype.connect = function () {
          var connection = this._connection;
          if (!connection) {
            this._isComplete = false;
            connection = this._connection = new Subscription_1.Subscription();
            connection.add(
              this.source.subscribe(
                new ConnectableSubscriber(this.getSubject(), this),
              ),
            );
            if (connection.closed) {
              this._connection = null;
              connection = Subscription_1.Subscription.EMPTY;
            }
          }
          return connection;
        };
        ConnectableObservable2.prototype.refCount = function () {
          return refCount_1.refCount()(this);
        };
        return ConnectableObservable2;
      })(Observable_1.Observable);
      exports.ConnectableObservable = ConnectableObservable;
      exports.connectableObservableDescriptor = (function () {
        var connectableProto = ConnectableObservable.prototype;
        return {
          operator: { value: null },
          _refCount: { value: 0, writable: true },
          _subject: { value: null, writable: true },
          _connection: { value: null, writable: true },
          _subscribe: { value: connectableProto._subscribe },
          _isComplete: { value: connectableProto._isComplete, writable: true },
          getSubject: { value: connectableProto.getSubject },
          connect: { value: connectableProto.connect },
          refCount: { value: connectableProto.refCount },
        };
      })();
      var ConnectableSubscriber = (function (_super) {
        __extends2(ConnectableSubscriber2, _super);
        function ConnectableSubscriber2(destination, connectable) {
          var _this = _super.call(this, destination) || this;
          _this.connectable = connectable;
          return _this;
        }
        ConnectableSubscriber2.prototype._error = function (err) {
          this._unsubscribe();
          _super.prototype._error.call(this, err);
        };
        ConnectableSubscriber2.prototype._complete = function () {
          this.connectable._isComplete = true;
          this._unsubscribe();
          _super.prototype._complete.call(this);
        };
        ConnectableSubscriber2.prototype._unsubscribe = function () {
          var connectable = this.connectable;
          if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
              connection.unsubscribe();
            }
          }
        };
        return ConnectableSubscriber2;
      })(Subject_1.SubjectSubscriber);
      var RefCountOperator = (function () {
        function RefCountOperator2(connectable) {
          this.connectable = connectable;
        }
        RefCountOperator2.prototype.call = function (subscriber, source) {
          var connectable = this.connectable;
          connectable._refCount++;
          var refCounter = new RefCountSubscriber(subscriber, connectable);
          var subscription = source.subscribe(refCounter);
          if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
          }
          return subscription;
        };
        return RefCountOperator2;
      })();
      var RefCountSubscriber = (function (_super) {
        __extends2(RefCountSubscriber2, _super);
        function RefCountSubscriber2(destination, connectable) {
          var _this = _super.call(this, destination) || this;
          _this.connectable = connectable;
          return _this;
        }
        RefCountSubscriber2.prototype._unsubscribe = function () {
          var connectable = this.connectable;
          if (!connectable) {
            this.connection = null;
            return;
          }
          this.connectable = null;
          var refCount = connectable._refCount;
          if (refCount <= 0) {
            this.connection = null;
            return;
          }
          connectable._refCount = refCount - 1;
          if (refCount > 1) {
            this.connection = null;
            return;
          }
          var connection = this.connection;
          var sharedConnection = connectable._connection;
          this.connection = null;
          if (
            sharedConnection &&
            (!connection || sharedConnection === connection)
          ) {
            sharedConnection.unsubscribe();
          }
        };
        return RefCountSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/groupBy.js
  var require_groupBy = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/groupBy.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var Subscription_1 = require_Subscription();
      var Observable_1 = require_Observable();
      var Subject_1 = require_Subject();
      function groupBy(
        keySelector,
        elementSelector,
        durationSelector,
        subjectSelector,
      ) {
        return function (source) {
          return source.lift(
            new GroupByOperator(
              keySelector,
              elementSelector,
              durationSelector,
              subjectSelector,
            ),
          );
        };
      }
      exports.groupBy = groupBy;
      var GroupByOperator = (function () {
        function GroupByOperator2(
          keySelector,
          elementSelector,
          durationSelector,
          subjectSelector,
        ) {
          this.keySelector = keySelector;
          this.elementSelector = elementSelector;
          this.durationSelector = durationSelector;
          this.subjectSelector = subjectSelector;
        }
        GroupByOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new GroupBySubscriber(
              subscriber,
              this.keySelector,
              this.elementSelector,
              this.durationSelector,
              this.subjectSelector,
            ),
          );
        };
        return GroupByOperator2;
      })();
      var GroupBySubscriber = (function (_super) {
        __extends2(GroupBySubscriber2, _super);
        function GroupBySubscriber2(
          destination,
          keySelector,
          elementSelector,
          durationSelector,
          subjectSelector,
        ) {
          var _this = _super.call(this, destination) || this;
          _this.keySelector = keySelector;
          _this.elementSelector = elementSelector;
          _this.durationSelector = durationSelector;
          _this.subjectSelector = subjectSelector;
          _this.groups = null;
          _this.attemptedToUnsubscribe = false;
          _this.count = 0;
          return _this;
        }
        GroupBySubscriber2.prototype._next = function (value) {
          var key;
          try {
            key = this.keySelector(value);
          } catch (err) {
            this.error(err);
            return;
          }
          this._group(value, key);
        };
        GroupBySubscriber2.prototype._group = function (value, key) {
          var groups = this.groups;
          if (!groups) {
            groups = this.groups = /* @__PURE__ */ new Map();
          }
          var group = groups.get(key);
          var element;
          if (this.elementSelector) {
            try {
              element = this.elementSelector(value);
            } catch (err) {
              this.error(err);
            }
          } else {
            element = value;
          }
          if (!group) {
            group = this.subjectSelector
              ? this.subjectSelector()
              : new Subject_1.Subject();
            groups.set(key, group);
            var groupedObservable = new GroupedObservable(key, group, this);
            this.destination.next(groupedObservable);
            if (this.durationSelector) {
              var duration = void 0;
              try {
                duration = this.durationSelector(
                  new GroupedObservable(key, group),
                );
              } catch (err) {
                this.error(err);
                return;
              }
              this.add(
                duration.subscribe(
                  new GroupDurationSubscriber(key, group, this),
                ),
              );
            }
          }
          if (!group.closed) {
            group.next(element);
          }
        };
        GroupBySubscriber2.prototype._error = function (err) {
          var groups = this.groups;
          if (groups) {
            groups.forEach(function (group, key) {
              group.error(err);
            });
            groups.clear();
          }
          this.destination.error(err);
        };
        GroupBySubscriber2.prototype._complete = function () {
          var groups = this.groups;
          if (groups) {
            groups.forEach(function (group, key) {
              group.complete();
            });
            groups.clear();
          }
          this.destination.complete();
        };
        GroupBySubscriber2.prototype.removeGroup = function (key) {
          this.groups.delete(key);
        };
        GroupBySubscriber2.prototype.unsubscribe = function () {
          if (!this.closed) {
            this.attemptedToUnsubscribe = true;
            if (this.count === 0) {
              _super.prototype.unsubscribe.call(this);
            }
          }
        };
        return GroupBySubscriber2;
      })(Subscriber_1.Subscriber);
      var GroupDurationSubscriber = (function (_super) {
        __extends2(GroupDurationSubscriber2, _super);
        function GroupDurationSubscriber2(key, group, parent) {
          var _this = _super.call(this, group) || this;
          _this.key = key;
          _this.group = group;
          _this.parent = parent;
          return _this;
        }
        GroupDurationSubscriber2.prototype._next = function (value) {
          this.complete();
        };
        GroupDurationSubscriber2.prototype._unsubscribe = function () {
          var _a = this,
            parent = _a.parent,
            key = _a.key;
          this.key = this.parent = null;
          if (parent) {
            parent.removeGroup(key);
          }
        };
        return GroupDurationSubscriber2;
      })(Subscriber_1.Subscriber);
      var GroupedObservable = (function (_super) {
        __extends2(GroupedObservable2, _super);
        function GroupedObservable2(key, groupSubject, refCountSubscription) {
          var _this = _super.call(this) || this;
          _this.key = key;
          _this.groupSubject = groupSubject;
          _this.refCountSubscription = refCountSubscription;
          return _this;
        }
        GroupedObservable2.prototype._subscribe = function (subscriber) {
          var subscription = new Subscription_1.Subscription();
          var _a = this,
            refCountSubscription = _a.refCountSubscription,
            groupSubject = _a.groupSubject;
          if (refCountSubscription && !refCountSubscription.closed) {
            subscription.add(
              new InnerRefCountSubscription(refCountSubscription),
            );
          }
          subscription.add(groupSubject.subscribe(subscriber));
          return subscription;
        };
        return GroupedObservable2;
      })(Observable_1.Observable);
      exports.GroupedObservable = GroupedObservable;
      var InnerRefCountSubscription = (function (_super) {
        __extends2(InnerRefCountSubscription2, _super);
        function InnerRefCountSubscription2(parent) {
          var _this = _super.call(this) || this;
          _this.parent = parent;
          parent.count++;
          return _this;
        }
        InnerRefCountSubscription2.prototype.unsubscribe = function () {
          var parent = this.parent;
          if (!parent.closed && !this.closed) {
            _super.prototype.unsubscribe.call(this);
            parent.count -= 1;
            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
              parent.unsubscribe();
            }
          }
        };
        return InnerRefCountSubscription2;
      })(Subscription_1.Subscription);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/BehaviorSubject.js
  var require_BehaviorSubject = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/BehaviorSubject.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subject_1 = require_Subject();
      var ObjectUnsubscribedError_1 = require_ObjectUnsubscribedError();
      var BehaviorSubject = (function (_super) {
        __extends2(BehaviorSubject2, _super);
        function BehaviorSubject2(_value) {
          var _this = _super.call(this) || this;
          _this._value = _value;
          return _this;
        }
        Object.defineProperty(BehaviorSubject2.prototype, 'value', {
          get: function () {
            return this.getValue();
          },
          enumerable: true,
          configurable: true,
        });
        BehaviorSubject2.prototype._subscribe = function (subscriber) {
          var subscription = _super.prototype._subscribe.call(this, subscriber);
          if (subscription && !subscription.closed) {
            subscriber.next(this._value);
          }
          return subscription;
        };
        BehaviorSubject2.prototype.getValue = function () {
          if (this.hasError) {
            throw this.thrownError;
          } else if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
          } else {
            return this._value;
          }
        };
        BehaviorSubject2.prototype.next = function (value) {
          _super.prototype.next.call(this, (this._value = value));
        };
        return BehaviorSubject2;
      })(Subject_1.Subject);
      exports.BehaviorSubject = BehaviorSubject;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/Action.js
  var require_Action = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/Action.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscription_1 = require_Subscription();
      var Action = (function (_super) {
        __extends2(Action2, _super);
        function Action2(scheduler, work) {
          return _super.call(this) || this;
        }
        Action2.prototype.schedule = function (state, delay) {
          if (delay === void 0) {
            delay = 0;
          }
          return this;
        };
        return Action2;
      })(Subscription_1.Subscription);
      exports.Action = Action;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/AsyncAction.js
  var require_AsyncAction = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/AsyncAction.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Action_1 = require_Action();
      var AsyncAction = (function (_super) {
        __extends2(AsyncAction2, _super);
        function AsyncAction2(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          _this.pending = false;
          return _this;
        }
        AsyncAction2.prototype.schedule = function (state, delay) {
          if (delay === void 0) {
            delay = 0;
          }
          if (this.closed) {
            return this;
          }
          this.state = state;
          var id = this.id;
          var scheduler = this.scheduler;
          if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
          }
          this.pending = true;
          this.delay = delay;
          this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
          return this;
        };
        AsyncAction2.prototype.requestAsyncId = function (
          scheduler,
          id,
          delay,
        ) {
          if (delay === void 0) {
            delay = 0;
          }
          return setInterval(scheduler.flush.bind(scheduler, this), delay);
        };
        AsyncAction2.prototype.recycleAsyncId = function (
          scheduler,
          id,
          delay,
        ) {
          if (delay === void 0) {
            delay = 0;
          }
          if (
            delay !== null &&
            this.delay === delay &&
            this.pending === false
          ) {
            return id;
          }
          clearInterval(id);
          return void 0;
        };
        AsyncAction2.prototype.execute = function (state, delay) {
          if (this.closed) {
            return new Error('executing a cancelled action');
          }
          this.pending = false;
          var error = this._execute(state, delay);
          if (error) {
            return error;
          } else if (this.pending === false && this.id != null) {
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
          }
        };
        AsyncAction2.prototype._execute = function (state, delay) {
          var errored = false;
          var errorValue = void 0;
          try {
            this.work(state);
          } catch (e) {
            errored = true;
            errorValue = (!!e && e) || new Error(e);
          }
          if (errored) {
            this.unsubscribe();
            return errorValue;
          }
        };
        AsyncAction2.prototype._unsubscribe = function () {
          var id = this.id;
          var scheduler = this.scheduler;
          var actions = scheduler.actions;
          var index = actions.indexOf(this);
          this.work = null;
          this.state = null;
          this.pending = false;
          this.scheduler = null;
          if (index !== -1) {
            actions.splice(index, 1);
          }
          if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
          }
          this.delay = null;
        };
        return AsyncAction2;
      })(Action_1.Action);
      exports.AsyncAction = AsyncAction;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/QueueAction.js
  var require_QueueAction = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/QueueAction.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var AsyncAction_1 = require_AsyncAction();
      var QueueAction = (function (_super) {
        __extends2(QueueAction2, _super);
        function QueueAction2(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          return _this;
        }
        QueueAction2.prototype.schedule = function (state, delay) {
          if (delay === void 0) {
            delay = 0;
          }
          if (delay > 0) {
            return _super.prototype.schedule.call(this, state, delay);
          }
          this.delay = delay;
          this.state = state;
          this.scheduler.flush(this);
          return this;
        };
        QueueAction2.prototype.execute = function (state, delay) {
          return delay > 0 || this.closed
            ? _super.prototype.execute.call(this, state, delay)
            : this._execute(state, delay);
        };
        QueueAction2.prototype.requestAsyncId = function (
          scheduler,
          id,
          delay,
        ) {
          if (delay === void 0) {
            delay = 0;
          }
          if (
            (delay !== null && delay > 0) ||
            (delay === null && this.delay > 0)
          ) {
            return _super.prototype.requestAsyncId.call(
              this,
              scheduler,
              id,
              delay,
            );
          }
          return scheduler.flush(this);
        };
        return QueueAction2;
      })(AsyncAction_1.AsyncAction);
      exports.QueueAction = QueueAction;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/Scheduler.js
  var require_Scheduler = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/Scheduler.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Scheduler = (function () {
        function Scheduler2(SchedulerAction, now) {
          if (now === void 0) {
            now = Scheduler2.now;
          }
          this.SchedulerAction = SchedulerAction;
          this.now = now;
        }
        Scheduler2.prototype.schedule = function (work, delay, state) {
          if (delay === void 0) {
            delay = 0;
          }
          return new this.SchedulerAction(this, work).schedule(state, delay);
        };
        Scheduler2.now = function () {
          return Date.now();
        };
        return Scheduler2;
      })();
      exports.Scheduler = Scheduler;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/AsyncScheduler.js
  var require_AsyncScheduler = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/AsyncScheduler.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Scheduler_1 = require_Scheduler();
      var AsyncScheduler = (function (_super) {
        __extends2(AsyncScheduler2, _super);
        function AsyncScheduler2(SchedulerAction, now) {
          if (now === void 0) {
            now = Scheduler_1.Scheduler.now;
          }
          var _this =
            _super.call(this, SchedulerAction, function () {
              if (
                AsyncScheduler2.delegate &&
                AsyncScheduler2.delegate !== _this
              ) {
                return AsyncScheduler2.delegate.now();
              } else {
                return now();
              }
            }) || this;
          _this.actions = [];
          _this.active = false;
          _this.scheduled = void 0;
          return _this;
        }
        AsyncScheduler2.prototype.schedule = function (work, delay, state) {
          if (delay === void 0) {
            delay = 0;
          }
          if (AsyncScheduler2.delegate && AsyncScheduler2.delegate !== this) {
            return AsyncScheduler2.delegate.schedule(work, delay, state);
          } else {
            return _super.prototype.schedule.call(this, work, delay, state);
          }
        };
        AsyncScheduler2.prototype.flush = function (action) {
          var actions = this.actions;
          if (this.active) {
            actions.push(action);
            return;
          }
          var error;
          this.active = true;
          do {
            if ((error = action.execute(action.state, action.delay))) {
              break;
            }
          } while ((action = actions.shift()));
          this.active = false;
          if (error) {
            while ((action = actions.shift())) {
              action.unsubscribe();
            }
            throw error;
          }
        };
        return AsyncScheduler2;
      })(Scheduler_1.Scheduler);
      exports.AsyncScheduler = AsyncScheduler;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/QueueScheduler.js
  var require_QueueScheduler = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/QueueScheduler.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var AsyncScheduler_1 = require_AsyncScheduler();
      var QueueScheduler = (function (_super) {
        __extends2(QueueScheduler2, _super);
        function QueueScheduler2() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        return QueueScheduler2;
      })(AsyncScheduler_1.AsyncScheduler);
      exports.QueueScheduler = QueueScheduler;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/queue.js
  var require_queue = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/queue.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var QueueAction_1 = require_QueueAction();
      var QueueScheduler_1 = require_QueueScheduler();
      exports.queueScheduler = new QueueScheduler_1.QueueScheduler(
        QueueAction_1.QueueAction,
      );
      exports.queue = exports.queueScheduler;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/empty.js
  var require_empty = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/empty.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      exports.EMPTY = new Observable_1.Observable(function (subscriber) {
        return subscriber.complete();
      });
      function empty(scheduler) {
        return scheduler ? emptyScheduled(scheduler) : exports.EMPTY;
      }
      exports.empty = empty;
      function emptyScheduled(scheduler) {
        return new Observable_1.Observable(function (subscriber) {
          return scheduler.schedule(function () {
            return subscriber.complete();
          });
        });
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/isScheduler.js
  var require_isScheduler = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/isScheduler.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      function isScheduler(value) {
        return value && typeof value.schedule === 'function';
      }
      exports.isScheduler = isScheduler;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/subscribeToArray.js
  var require_subscribeToArray = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/subscribeToArray.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.subscribeToArray = function (array) {
        return function (subscriber) {
          for (
            var i = 0, len = array.length;
            i < len && !subscriber.closed;
            i++
          ) {
            subscriber.next(array[i]);
          }
          subscriber.complete();
        };
      };
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduled/scheduleArray.js
  var require_scheduleArray = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduled/scheduleArray.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var Subscription_1 = require_Subscription();
      function scheduleArray(input, scheduler) {
        return new Observable_1.Observable(function (subscriber) {
          var sub = new Subscription_1.Subscription();
          var i = 0;
          sub.add(
            scheduler.schedule(function () {
              if (i === input.length) {
                subscriber.complete();
                return;
              }
              subscriber.next(input[i++]);
              if (!subscriber.closed) {
                sub.add(this.schedule());
              }
            }),
          );
          return sub;
        });
      }
      exports.scheduleArray = scheduleArray;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/fromArray.js
  var require_fromArray = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/fromArray.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var subscribeToArray_1 = require_subscribeToArray();
      var scheduleArray_1 = require_scheduleArray();
      function fromArray(input, scheduler) {
        if (!scheduler) {
          return new Observable_1.Observable(
            subscribeToArray_1.subscribeToArray(input),
          );
        } else {
          return scheduleArray_1.scheduleArray(input, scheduler);
        }
      }
      exports.fromArray = fromArray;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/of.js
  var require_of = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/of.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var isScheduler_1 = require_isScheduler();
      var fromArray_1 = require_fromArray();
      var scheduleArray_1 = require_scheduleArray();
      function of() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var scheduler = args[args.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
          args.pop();
          return scheduleArray_1.scheduleArray(args, scheduler);
        } else {
          return fromArray_1.fromArray(args);
        }
      }
      exports.of = of;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/throwError.js
  var require_throwError = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/throwError.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      function throwError(error, scheduler) {
        if (!scheduler) {
          return new Observable_1.Observable(function (subscriber) {
            return subscriber.error(error);
          });
        } else {
          return new Observable_1.Observable(function (subscriber) {
            return scheduler.schedule(dispatch, 0, { error, subscriber });
          });
        }
      }
      exports.throwError = throwError;
      function dispatch(_a) {
        var error = _a.error,
          subscriber = _a.subscriber;
        subscriber.error(error);
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/Notification.js
  var require_Notification = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/Notification.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var empty_1 = require_empty();
      var of_1 = require_of();
      var throwError_1 = require_throwError();
      var NotificationKind;
      (function (NotificationKind2) {
        NotificationKind2['NEXT'] = 'N';
        NotificationKind2['ERROR'] = 'E';
        NotificationKind2['COMPLETE'] = 'C';
      })(
        (NotificationKind =
          exports.NotificationKind || (exports.NotificationKind = {})),
      );
      var Notification = (function () {
        function Notification2(kind, value, error) {
          this.kind = kind;
          this.value = value;
          this.error = error;
          this.hasValue = kind === 'N';
        }
        Notification2.prototype.observe = function (observer) {
          switch (this.kind) {
            case 'N':
              return observer.next && observer.next(this.value);
            case 'E':
              return observer.error && observer.error(this.error);
            case 'C':
              return observer.complete && observer.complete();
          }
        };
        Notification2.prototype.do = function (next, error, complete) {
          var kind = this.kind;
          switch (kind) {
            case 'N':
              return next && next(this.value);
            case 'E':
              return error && error(this.error);
            case 'C':
              return complete && complete();
          }
        };
        Notification2.prototype.accept = function (
          nextOrObserver,
          error,
          complete,
        ) {
          if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
          } else {
            return this.do(nextOrObserver, error, complete);
          }
        };
        Notification2.prototype.toObservable = function () {
          var kind = this.kind;
          switch (kind) {
            case 'N':
              return of_1.of(this.value);
            case 'E':
              return throwError_1.throwError(this.error);
            case 'C':
              return empty_1.empty();
          }
          throw new Error('unexpected notification kind value');
        };
        Notification2.createNext = function (value) {
          if (typeof value !== 'undefined') {
            return new Notification2('N', value);
          }
          return Notification2.undefinedValueNotification;
        };
        Notification2.createError = function (err) {
          return new Notification2('E', void 0, err);
        };
        Notification2.createComplete = function () {
          return Notification2.completeNotification;
        };
        Notification2.completeNotification = new Notification2('C');
        Notification2.undefinedValueNotification = new Notification2(
          'N',
          void 0,
        );
        return Notification2;
      })();
      exports.Notification = Notification;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/observeOn.js
  var require_observeOn = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/observeOn.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var Notification_1 = require_Notification();
      function observeOn(scheduler, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        return function observeOnOperatorFunction(source) {
          return source.lift(new ObserveOnOperator(scheduler, delay));
        };
      }
      exports.observeOn = observeOn;
      var ObserveOnOperator = (function () {
        function ObserveOnOperator2(scheduler, delay) {
          if (delay === void 0) {
            delay = 0;
          }
          this.scheduler = scheduler;
          this.delay = delay;
        }
        ObserveOnOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new ObserveOnSubscriber(subscriber, this.scheduler, this.delay),
          );
        };
        return ObserveOnOperator2;
      })();
      exports.ObserveOnOperator = ObserveOnOperator;
      var ObserveOnSubscriber = (function (_super) {
        __extends2(ObserveOnSubscriber2, _super);
        function ObserveOnSubscriber2(destination, scheduler, delay) {
          if (delay === void 0) {
            delay = 0;
          }
          var _this = _super.call(this, destination) || this;
          _this.scheduler = scheduler;
          _this.delay = delay;
          return _this;
        }
        ObserveOnSubscriber2.dispatch = function (arg) {
          var notification = arg.notification,
            destination = arg.destination;
          notification.observe(destination);
          this.unsubscribe();
        };
        ObserveOnSubscriber2.prototype.scheduleMessage = function (
          notification,
        ) {
          var destination = this.destination;
          destination.add(
            this.scheduler.schedule(
              ObserveOnSubscriber2.dispatch,
              this.delay,
              new ObserveOnMessage(notification, this.destination),
            ),
          );
        };
        ObserveOnSubscriber2.prototype._next = function (value) {
          this.scheduleMessage(Notification_1.Notification.createNext(value));
        };
        ObserveOnSubscriber2.prototype._error = function (err) {
          this.scheduleMessage(Notification_1.Notification.createError(err));
          this.unsubscribe();
        };
        ObserveOnSubscriber2.prototype._complete = function () {
          this.scheduleMessage(Notification_1.Notification.createComplete());
          this.unsubscribe();
        };
        return ObserveOnSubscriber2;
      })(Subscriber_1.Subscriber);
      exports.ObserveOnSubscriber = ObserveOnSubscriber;
      var ObserveOnMessage = (function () {
        function ObserveOnMessage2(notification, destination) {
          this.notification = notification;
          this.destination = destination;
        }
        return ObserveOnMessage2;
      })();
      exports.ObserveOnMessage = ObserveOnMessage;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/ReplaySubject.js
  var require_ReplaySubject = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/ReplaySubject.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subject_1 = require_Subject();
      var queue_1 = require_queue();
      var Subscription_1 = require_Subscription();
      var observeOn_1 = require_observeOn();
      var ObjectUnsubscribedError_1 = require_ObjectUnsubscribedError();
      var SubjectSubscription_1 = require_SubjectSubscription();
      var ReplaySubject = (function (_super) {
        __extends2(ReplaySubject2, _super);
        function ReplaySubject2(bufferSize, windowTime, scheduler) {
          if (bufferSize === void 0) {
            bufferSize = Number.POSITIVE_INFINITY;
          }
          if (windowTime === void 0) {
            windowTime = Number.POSITIVE_INFINITY;
          }
          var _this = _super.call(this) || this;
          _this.scheduler = scheduler;
          _this._events = [];
          _this._infiniteTimeWindow = false;
          _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
          _this._windowTime = windowTime < 1 ? 1 : windowTime;
          if (windowTime === Number.POSITIVE_INFINITY) {
            _this._infiniteTimeWindow = true;
            _this.next = _this.nextInfiniteTimeWindow;
          } else {
            _this.next = _this.nextTimeWindow;
          }
          return _this;
        }
        ReplaySubject2.prototype.nextInfiniteTimeWindow = function (value) {
          if (!this.isStopped) {
            var _events = this._events;
            _events.push(value);
            if (_events.length > this._bufferSize) {
              _events.shift();
            }
          }
          _super.prototype.next.call(this, value);
        };
        ReplaySubject2.prototype.nextTimeWindow = function (value) {
          if (!this.isStopped) {
            this._events.push(new ReplayEvent(this._getNow(), value));
            this._trimBufferThenGetEvents();
          }
          _super.prototype.next.call(this, value);
        };
        ReplaySubject2.prototype._subscribe = function (subscriber) {
          var _infiniteTimeWindow = this._infiniteTimeWindow;
          var _events = _infiniteTimeWindow
            ? this._events
            : this._trimBufferThenGetEvents();
          var scheduler = this.scheduler;
          var len = _events.length;
          var subscription;
          if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
          } else if (this.isStopped || this.hasError) {
            subscription = Subscription_1.Subscription.EMPTY;
          } else {
            this.observers.push(subscriber);
            subscription = new SubjectSubscription_1.SubjectSubscription(
              this,
              subscriber,
            );
          }
          if (scheduler) {
            subscriber.add(
              (subscriber = new observeOn_1.ObserveOnSubscriber(
                subscriber,
                scheduler,
              )),
            );
          }
          if (_infiniteTimeWindow) {
            for (var i = 0; i < len && !subscriber.closed; i++) {
              subscriber.next(_events[i]);
            }
          } else {
            for (var i = 0; i < len && !subscriber.closed; i++) {
              subscriber.next(_events[i].value);
            }
          }
          if (this.hasError) {
            subscriber.error(this.thrownError);
          } else if (this.isStopped) {
            subscriber.complete();
          }
          return subscription;
        };
        ReplaySubject2.prototype._getNow = function () {
          return (this.scheduler || queue_1.queue).now();
        };
        ReplaySubject2.prototype._trimBufferThenGetEvents = function () {
          var now = this._getNow();
          var _bufferSize = this._bufferSize;
          var _windowTime = this._windowTime;
          var _events = this._events;
          var eventsCount = _events.length;
          var spliceCount = 0;
          while (spliceCount < eventsCount) {
            if (now - _events[spliceCount].time < _windowTime) {
              break;
            }
            spliceCount++;
          }
          if (eventsCount > _bufferSize) {
            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
          }
          if (spliceCount > 0) {
            _events.splice(0, spliceCount);
          }
          return _events;
        };
        return ReplaySubject2;
      })(Subject_1.Subject);
      exports.ReplaySubject = ReplaySubject;
      var ReplayEvent = (function () {
        function ReplayEvent2(time, value) {
          this.time = time;
          this.value = value;
        }
        return ReplayEvent2;
      })();
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/AsyncSubject.js
  var require_AsyncSubject = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/AsyncSubject.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subject_1 = require_Subject();
      var Subscription_1 = require_Subscription();
      var AsyncSubject = (function (_super) {
        __extends2(AsyncSubject2, _super);
        function AsyncSubject2() {
          var _this =
            (_super !== null && _super.apply(this, arguments)) || this;
          _this.value = null;
          _this.hasNext = false;
          _this.hasCompleted = false;
          return _this;
        }
        AsyncSubject2.prototype._subscribe = function (subscriber) {
          if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
          } else if (this.hasCompleted && this.hasNext) {
            subscriber.next(this.value);
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
          }
          return _super.prototype._subscribe.call(this, subscriber);
        };
        AsyncSubject2.prototype.next = function (value) {
          if (!this.hasCompleted) {
            this.value = value;
            this.hasNext = true;
          }
        };
        AsyncSubject2.prototype.error = function (error) {
          if (!this.hasCompleted) {
            _super.prototype.error.call(this, error);
          }
        };
        AsyncSubject2.prototype.complete = function () {
          this.hasCompleted = true;
          if (this.hasNext) {
            _super.prototype.next.call(this, this.value);
          }
          _super.prototype.complete.call(this);
        };
        return AsyncSubject2;
      })(Subject_1.Subject);
      exports.AsyncSubject = AsyncSubject;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/Immediate.js
  var require_Immediate = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/Immediate.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var nextHandle = 1;
      var RESOLVED = (function () {
        return Promise.resolve();
      })();
      var activeHandles = {};
      function findAndClearHandle(handle) {
        if (handle in activeHandles) {
          delete activeHandles[handle];
          return true;
        }
        return false;
      }
      exports.Immediate = {
        setImmediate: function (cb) {
          var handle = nextHandle++;
          activeHandles[handle] = true;
          RESOLVED.then(function () {
            return findAndClearHandle(handle) && cb();
          });
          return handle;
        },
        clearImmediate: function (handle) {
          findAndClearHandle(handle);
        },
      };
      exports.TestTools = {
        pending: function () {
          return Object.keys(activeHandles).length;
        },
      };
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/AsapAction.js
  var require_AsapAction = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/AsapAction.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Immediate_1 = require_Immediate();
      var AsyncAction_1 = require_AsyncAction();
      var AsapAction = (function (_super) {
        __extends2(AsapAction2, _super);
        function AsapAction2(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          return _this;
        }
        AsapAction2.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
            delay = 0;
          }
          if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(
              this,
              scheduler,
              id,
              delay,
            );
          }
          scheduler.actions.push(this);
          return (
            scheduler.scheduled ||
            (scheduler.scheduled = Immediate_1.Immediate.setImmediate(
              scheduler.flush.bind(scheduler, null),
            ))
          );
        };
        AsapAction2.prototype.recycleAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) {
            delay = 0;
          }
          if (
            (delay !== null && delay > 0) ||
            (delay === null && this.delay > 0)
          ) {
            return _super.prototype.recycleAsyncId.call(
              this,
              scheduler,
              id,
              delay,
            );
          }
          if (scheduler.actions.length === 0) {
            Immediate_1.Immediate.clearImmediate(id);
            scheduler.scheduled = void 0;
          }
          return void 0;
        };
        return AsapAction2;
      })(AsyncAction_1.AsyncAction);
      exports.AsapAction = AsapAction;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/AsapScheduler.js
  var require_AsapScheduler = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/AsapScheduler.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var AsyncScheduler_1 = require_AsyncScheduler();
      var AsapScheduler = (function (_super) {
        __extends2(AsapScheduler2, _super);
        function AsapScheduler2() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        AsapScheduler2.prototype.flush = function (action) {
          this.active = true;
          this.scheduled = void 0;
          var actions = this.actions;
          var error;
          var index = -1;
          var count = actions.length;
          action = action || actions.shift();
          do {
            if ((error = action.execute(action.state, action.delay))) {
              break;
            }
          } while (++index < count && (action = actions.shift()));
          this.active = false;
          if (error) {
            while (++index < count && (action = actions.shift())) {
              action.unsubscribe();
            }
            throw error;
          }
        };
        return AsapScheduler2;
      })(AsyncScheduler_1.AsyncScheduler);
      exports.AsapScheduler = AsapScheduler;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/asap.js
  var require_asap = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/asap.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var AsapAction_1 = require_AsapAction();
      var AsapScheduler_1 = require_AsapScheduler();
      exports.asapScheduler = new AsapScheduler_1.AsapScheduler(
        AsapAction_1.AsapAction,
      );
      exports.asap = exports.asapScheduler;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/async.js
  var require_async = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/async.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var AsyncAction_1 = require_AsyncAction();
      var AsyncScheduler_1 = require_AsyncScheduler();
      exports.asyncScheduler = new AsyncScheduler_1.AsyncScheduler(
        AsyncAction_1.AsyncAction,
      );
      exports.async = exports.asyncScheduler;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/AnimationFrameAction.js
  var require_AnimationFrameAction = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/AnimationFrameAction.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var AsyncAction_1 = require_AsyncAction();
      var AnimationFrameAction = (function (_super) {
        __extends2(AnimationFrameAction2, _super);
        function AnimationFrameAction2(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          return _this;
        }
        AnimationFrameAction2.prototype.requestAsyncId = function (
          scheduler,
          id,
          delay,
        ) {
          if (delay === void 0) {
            delay = 0;
          }
          if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(
              this,
              scheduler,
              id,
              delay,
            );
          }
          scheduler.actions.push(this);
          return (
            scheduler.scheduled ||
            (scheduler.scheduled = requestAnimationFrame(function () {
              return scheduler.flush(null);
            }))
          );
        };
        AnimationFrameAction2.prototype.recycleAsyncId = function (
          scheduler,
          id,
          delay,
        ) {
          if (delay === void 0) {
            delay = 0;
          }
          if (
            (delay !== null && delay > 0) ||
            (delay === null && this.delay > 0)
          ) {
            return _super.prototype.recycleAsyncId.call(
              this,
              scheduler,
              id,
              delay,
            );
          }
          if (scheduler.actions.length === 0) {
            cancelAnimationFrame(id);
            scheduler.scheduled = void 0;
          }
          return void 0;
        };
        return AnimationFrameAction2;
      })(AsyncAction_1.AsyncAction);
      exports.AnimationFrameAction = AnimationFrameAction;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/AnimationFrameScheduler.js
  var require_AnimationFrameScheduler = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/AnimationFrameScheduler.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var AsyncScheduler_1 = require_AsyncScheduler();
      var AnimationFrameScheduler = (function (_super) {
        __extends2(AnimationFrameScheduler2, _super);
        function AnimationFrameScheduler2() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        AnimationFrameScheduler2.prototype.flush = function (action) {
          this.active = true;
          this.scheduled = void 0;
          var actions = this.actions;
          var error;
          var index = -1;
          var count = actions.length;
          action = action || actions.shift();
          do {
            if ((error = action.execute(action.state, action.delay))) {
              break;
            }
          } while (++index < count && (action = actions.shift()));
          this.active = false;
          if (error) {
            while (++index < count && (action = actions.shift())) {
              action.unsubscribe();
            }
            throw error;
          }
        };
        return AnimationFrameScheduler2;
      })(AsyncScheduler_1.AsyncScheduler);
      exports.AnimationFrameScheduler = AnimationFrameScheduler;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/animationFrame.js
  var require_animationFrame = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/animationFrame.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var AnimationFrameAction_1 = require_AnimationFrameAction();
      var AnimationFrameScheduler_1 = require_AnimationFrameScheduler();
      exports.animationFrameScheduler =
        new AnimationFrameScheduler_1.AnimationFrameScheduler(
          AnimationFrameAction_1.AnimationFrameAction,
        );
      exports.animationFrame = exports.animationFrameScheduler;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/VirtualTimeScheduler.js
  var require_VirtualTimeScheduler = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduler/VirtualTimeScheduler.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var AsyncAction_1 = require_AsyncAction();
      var AsyncScheduler_1 = require_AsyncScheduler();
      var VirtualTimeScheduler = (function (_super) {
        __extends2(VirtualTimeScheduler2, _super);
        function VirtualTimeScheduler2(SchedulerAction, maxFrames) {
          if (SchedulerAction === void 0) {
            SchedulerAction = VirtualAction;
          }
          if (maxFrames === void 0) {
            maxFrames = Number.POSITIVE_INFINITY;
          }
          var _this =
            _super.call(this, SchedulerAction, function () {
              return _this.frame;
            }) || this;
          _this.maxFrames = maxFrames;
          _this.frame = 0;
          _this.index = -1;
          return _this;
        }
        VirtualTimeScheduler2.prototype.flush = function () {
          var _a = this,
            actions = _a.actions,
            maxFrames = _a.maxFrames;
          var error, action;
          while ((action = actions[0]) && action.delay <= maxFrames) {
            actions.shift();
            this.frame = action.delay;
            if ((error = action.execute(action.state, action.delay))) {
              break;
            }
          }
          if (error) {
            while ((action = actions.shift())) {
              action.unsubscribe();
            }
            throw error;
          }
        };
        VirtualTimeScheduler2.frameTimeFactor = 10;
        return VirtualTimeScheduler2;
      })(AsyncScheduler_1.AsyncScheduler);
      exports.VirtualTimeScheduler = VirtualTimeScheduler;
      var VirtualAction = (function (_super) {
        __extends2(VirtualAction2, _super);
        function VirtualAction2(scheduler, work, index) {
          if (index === void 0) {
            index = scheduler.index += 1;
          }
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          _this.index = index;
          _this.active = true;
          _this.index = scheduler.index = index;
          return _this;
        }
        VirtualAction2.prototype.schedule = function (state, delay) {
          if (delay === void 0) {
            delay = 0;
          }
          if (!this.id) {
            return _super.prototype.schedule.call(this, state, delay);
          }
          this.active = false;
          var action = new VirtualAction2(this.scheduler, this.work);
          this.add(action);
          return action.schedule(state, delay);
        };
        VirtualAction2.prototype.requestAsyncId = function (
          scheduler,
          id,
          delay,
        ) {
          if (delay === void 0) {
            delay = 0;
          }
          this.delay = scheduler.frame + delay;
          var actions = scheduler.actions;
          actions.push(this);
          actions.sort(VirtualAction2.sortActions);
          return true;
        };
        VirtualAction2.prototype.recycleAsyncId = function (
          scheduler,
          id,
          delay,
        ) {
          if (delay === void 0) {
            delay = 0;
          }
          return void 0;
        };
        VirtualAction2.prototype._execute = function (state, delay) {
          if (this.active === true) {
            return _super.prototype._execute.call(this, state, delay);
          }
        };
        VirtualAction2.sortActions = function (a, b) {
          if (a.delay === b.delay) {
            if (a.index === b.index) {
              return 0;
            } else if (a.index > b.index) {
              return 1;
            } else {
              return -1;
            }
          } else if (a.delay > b.delay) {
            return 1;
          } else {
            return -1;
          }
        };
        return VirtualAction2;
      })(AsyncAction_1.AsyncAction);
      exports.VirtualAction = VirtualAction;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/noop.js
  var require_noop = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/noop.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      function noop2() {}
      exports.noop = noop2;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/isObservable.js
  var require_isObservable = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/isObservable.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      function isObservable(obj) {
        return (
          !!obj &&
          (obj instanceof Observable_1.Observable ||
            (typeof obj.lift === 'function' &&
              typeof obj.subscribe === 'function'))
        );
      }
      exports.isObservable = isObservable;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/ArgumentOutOfRangeError.js
  var require_ArgumentOutOfRangeError = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/ArgumentOutOfRangeError.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var ArgumentOutOfRangeErrorImpl = (function () {
        function ArgumentOutOfRangeErrorImpl2() {
          Error.call(this);
          this.message = 'argument out of range';
          this.name = 'ArgumentOutOfRangeError';
          return this;
        }
        ArgumentOutOfRangeErrorImpl2.prototype = Object.create(Error.prototype);
        return ArgumentOutOfRangeErrorImpl2;
      })();
      exports.ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/EmptyError.js
  var require_EmptyError = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/EmptyError.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var EmptyErrorImpl = (function () {
        function EmptyErrorImpl2() {
          Error.call(this);
          this.message = 'no elements in sequence';
          this.name = 'EmptyError';
          return this;
        }
        EmptyErrorImpl2.prototype = Object.create(Error.prototype);
        return EmptyErrorImpl2;
      })();
      exports.EmptyError = EmptyErrorImpl;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/TimeoutError.js
  var require_TimeoutError = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/TimeoutError.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var TimeoutErrorImpl = (function () {
        function TimeoutErrorImpl2() {
          Error.call(this);
          this.message = 'Timeout has occurred';
          this.name = 'TimeoutError';
          return this;
        }
        TimeoutErrorImpl2.prototype = Object.create(Error.prototype);
        return TimeoutErrorImpl2;
      })();
      exports.TimeoutError = TimeoutErrorImpl;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/map.js
  var require_map = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/map.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function map2(project, thisArg) {
        return function mapOperation(source) {
          if (typeof project !== 'function') {
            throw new TypeError(
              'argument is not a function. Are you looking for `mapTo()`?',
            );
          }
          return source.lift(new MapOperator(project, thisArg));
        };
      }
      exports.map = map2;
      var MapOperator = (function () {
        function MapOperator2(project, thisArg) {
          this.project = project;
          this.thisArg = thisArg;
        }
        MapOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new MapSubscriber(subscriber, this.project, this.thisArg),
          );
        };
        return MapOperator2;
      })();
      exports.MapOperator = MapOperator;
      var MapSubscriber = (function (_super) {
        __extends2(MapSubscriber2, _super);
        function MapSubscriber2(destination, project, thisArg) {
          var _this = _super.call(this, destination) || this;
          _this.project = project;
          _this.count = 0;
          _this.thisArg = thisArg || _this;
          return _this;
        }
        MapSubscriber2.prototype._next = function (value) {
          var result;
          try {
            result = this.project.call(this.thisArg, value, this.count++);
          } catch (err) {
            this.destination.error(err);
            return;
          }
          this.destination.next(result);
        };
        return MapSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/bindCallback.js
  var require_bindCallback = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/bindCallback.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var AsyncSubject_1 = require_AsyncSubject();
      var map_1 = require_map();
      var canReportError_1 = require_canReportError();
      var isArray_1 = require_isArray();
      var isScheduler_1 = require_isScheduler();
      function bindCallback(callbackFunc, resultSelector, scheduler) {
        if (resultSelector) {
          if (isScheduler_1.isScheduler(resultSelector)) {
            scheduler = resultSelector;
          } else {
            return function () {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              return bindCallback(callbackFunc, scheduler)
                .apply(void 0, args)
                .pipe(
                  map_1.map(function (args2) {
                    return isArray_1.isArray(args2)
                      ? resultSelector.apply(void 0, args2)
                      : resultSelector(args2);
                  }),
                );
            };
          }
        }
        return function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          var context2 = this;
          var subject;
          var params = {
            context: context2,
            subject,
            callbackFunc,
            scheduler,
          };
          return new Observable_1.Observable(function (subscriber) {
            if (!scheduler) {
              if (!subject) {
                subject = new AsyncSubject_1.AsyncSubject();
                var handler = function () {
                  var innerArgs = [];
                  for (var _i2 = 0; _i2 < arguments.length; _i2++) {
                    innerArgs[_i2] = arguments[_i2];
                  }
                  subject.next(
                    innerArgs.length <= 1 ? innerArgs[0] : innerArgs,
                  );
                  subject.complete();
                };
                try {
                  callbackFunc.apply(context2, args.concat([handler]));
                } catch (err) {
                  if (canReportError_1.canReportError(subject)) {
                    subject.error(err);
                  } else {
                    console.warn(err);
                  }
                }
              }
              return subject.subscribe(subscriber);
            } else {
              var state = {
                args,
                subscriber,
                params,
              };
              return scheduler.schedule(dispatch, 0, state);
            }
          });
        };
      }
      exports.bindCallback = bindCallback;
      function dispatch(state) {
        var _this = this;
        var self2 = this;
        var args = state.args,
          subscriber = state.subscriber,
          params = state.params;
        var callbackFunc = params.callbackFunc,
          context2 = params.context,
          scheduler = params.scheduler;
        var subject = params.subject;
        if (!subject) {
          subject = params.subject = new AsyncSubject_1.AsyncSubject();
          var handler = function () {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              innerArgs[_i] = arguments[_i];
            }
            var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
            _this.add(scheduler.schedule(dispatchNext, 0, { value, subject }));
          };
          try {
            callbackFunc.apply(context2, args.concat([handler]));
          } catch (err) {
            subject.error(err);
          }
        }
        this.add(subject.subscribe(subscriber));
      }
      function dispatchNext(state) {
        var value = state.value,
          subject = state.subject;
        subject.next(value);
        subject.complete();
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/bindNodeCallback.js
  var require_bindNodeCallback = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/bindNodeCallback.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var AsyncSubject_1 = require_AsyncSubject();
      var map_1 = require_map();
      var canReportError_1 = require_canReportError();
      var isScheduler_1 = require_isScheduler();
      var isArray_1 = require_isArray();
      function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
        if (resultSelector) {
          if (isScheduler_1.isScheduler(resultSelector)) {
            scheduler = resultSelector;
          } else {
            return function () {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              return bindNodeCallback(callbackFunc, scheduler)
                .apply(void 0, args)
                .pipe(
                  map_1.map(function (args2) {
                    return isArray_1.isArray(args2)
                      ? resultSelector.apply(void 0, args2)
                      : resultSelector(args2);
                  }),
                );
            };
          }
        }
        return function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          var params = {
            subject: void 0,
            args,
            callbackFunc,
            scheduler,
            context: this,
          };
          return new Observable_1.Observable(function (subscriber) {
            var context2 = params.context;
            var subject = params.subject;
            if (!scheduler) {
              if (!subject) {
                subject = params.subject = new AsyncSubject_1.AsyncSubject();
                var handler = function () {
                  var innerArgs = [];
                  for (var _i2 = 0; _i2 < arguments.length; _i2++) {
                    innerArgs[_i2] = arguments[_i2];
                  }
                  var err = innerArgs.shift();
                  if (err) {
                    subject.error(err);
                    return;
                  }
                  subject.next(
                    innerArgs.length <= 1 ? innerArgs[0] : innerArgs,
                  );
                  subject.complete();
                };
                try {
                  callbackFunc.apply(context2, args.concat([handler]));
                } catch (err) {
                  if (canReportError_1.canReportError(subject)) {
                    subject.error(err);
                  } else {
                    console.warn(err);
                  }
                }
              }
              return subject.subscribe(subscriber);
            } else {
              return scheduler.schedule(dispatch, 0, {
                params,
                subscriber,
                context: context2,
              });
            }
          });
        };
      }
      exports.bindNodeCallback = bindNodeCallback;
      function dispatch(state) {
        var _this = this;
        var params = state.params,
          subscriber = state.subscriber,
          context2 = state.context;
        var callbackFunc = params.callbackFunc,
          args = params.args,
          scheduler = params.scheduler;
        var subject = params.subject;
        if (!subject) {
          subject = params.subject = new AsyncSubject_1.AsyncSubject();
          var handler = function () {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              innerArgs[_i] = arguments[_i];
            }
            var err = innerArgs.shift();
            if (err) {
              _this.add(scheduler.schedule(dispatchError, 0, { err, subject }));
            } else {
              var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
              _this.add(
                scheduler.schedule(dispatchNext, 0, { value, subject }),
              );
            }
          };
          try {
            callbackFunc.apply(context2, args.concat([handler]));
          } catch (err) {
            this.add(scheduler.schedule(dispatchError, 0, { err, subject }));
          }
        }
        this.add(subject.subscribe(subscriber));
      }
      function dispatchNext(arg) {
        var value = arg.value,
          subject = arg.subject;
        subject.next(value);
        subject.complete();
      }
      function dispatchError(arg) {
        var err = arg.err,
          subject = arg.subject;
        subject.error(err);
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/OuterSubscriber.js
  var require_OuterSubscriber = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/OuterSubscriber.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var OuterSubscriber = (function (_super) {
        __extends2(OuterSubscriber2, _super);
        function OuterSubscriber2() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        OuterSubscriber2.prototype.notifyNext = function (
          outerValue,
          innerValue,
          outerIndex,
          innerIndex,
          innerSub,
        ) {
          this.destination.next(innerValue);
        };
        OuterSubscriber2.prototype.notifyError = function (error, innerSub) {
          this.destination.error(error);
        };
        OuterSubscriber2.prototype.notifyComplete = function (innerSub) {
          this.destination.complete();
        };
        return OuterSubscriber2;
      })(Subscriber_1.Subscriber);
      exports.OuterSubscriber = OuterSubscriber;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/InnerSubscriber.js
  var require_InnerSubscriber = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/InnerSubscriber.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var InnerSubscriber = (function (_super) {
        __extends2(InnerSubscriber2, _super);
        function InnerSubscriber2(parent, outerValue, outerIndex) {
          var _this = _super.call(this) || this;
          _this.parent = parent;
          _this.outerValue = outerValue;
          _this.outerIndex = outerIndex;
          _this.index = 0;
          return _this;
        }
        InnerSubscriber2.prototype._next = function (value) {
          this.parent.notifyNext(
            this.outerValue,
            value,
            this.outerIndex,
            this.index++,
            this,
          );
        };
        InnerSubscriber2.prototype._error = function (error) {
          this.parent.notifyError(error, this);
          this.unsubscribe();
        };
        InnerSubscriber2.prototype._complete = function () {
          this.parent.notifyComplete(this);
          this.unsubscribe();
        };
        return InnerSubscriber2;
      })(Subscriber_1.Subscriber);
      exports.InnerSubscriber = InnerSubscriber;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/subscribeToPromise.js
  var require_subscribeToPromise = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/subscribeToPromise.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var hostReportError_1 = require_hostReportError();
      exports.subscribeToPromise = function (promise) {
        return function (subscriber) {
          promise
            .then(
              function (value) {
                if (!subscriber.closed) {
                  subscriber.next(value);
                  subscriber.complete();
                }
              },
              function (err) {
                return subscriber.error(err);
              },
            )
            .then(null, hostReportError_1.hostReportError);
          return subscriber;
        };
      };
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/symbol/iterator.js
  var require_iterator = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/symbol/iterator.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      function getSymbolIterator2() {
        if (typeof Symbol !== 'function' || !Symbol.iterator) {
          return '@@iterator';
        }
        return Symbol.iterator;
      }
      exports.getSymbolIterator = getSymbolIterator2;
      exports.iterator = getSymbolIterator2();
      exports.$$iterator = exports.iterator;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/subscribeToIterable.js
  var require_subscribeToIterable = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/subscribeToIterable.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var iterator_1 = require_iterator();
      exports.subscribeToIterable = function (iterable) {
        return function (subscriber) {
          var iterator2 = iterable[iterator_1.iterator]();
          do {
            var item = void 0;
            try {
              item = iterator2.next();
            } catch (err) {
              subscriber.error(err);
              return subscriber;
            }
            if (item.done) {
              subscriber.complete();
              break;
            }
            subscriber.next(item.value);
            if (subscriber.closed) {
              break;
            }
          } while (true);
          if (typeof iterator2.return === 'function') {
            subscriber.add(function () {
              if (iterator2.return) {
                iterator2.return();
              }
            });
          }
          return subscriber;
        };
      };
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/subscribeToObservable.js
  var require_subscribeToObservable = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/subscribeToObservable.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var observable_1 = require_observable();
      exports.subscribeToObservable = function (obj) {
        return function (subscriber) {
          var obs = obj[observable_1.observable]();
          if (typeof obs.subscribe !== 'function') {
            throw new TypeError(
              'Provided object does not correctly implement Symbol.observable',
            );
          } else {
            return obs.subscribe(subscriber);
          }
        };
      };
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/isArrayLike.js
  var require_isArrayLike = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/isArrayLike.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.isArrayLike = function (x) {
        return x && typeof x.length === 'number' && typeof x !== 'function';
      };
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/isPromise.js
  var require_isPromise = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/isPromise.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      function isPromise2(value) {
        return (
          !!value &&
          typeof value.subscribe !== 'function' &&
          typeof value.then === 'function'
        );
      }
      exports.isPromise = isPromise2;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/subscribeTo.js
  var require_subscribeTo = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/subscribeTo.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var subscribeToArray_1 = require_subscribeToArray();
      var subscribeToPromise_1 = require_subscribeToPromise();
      var subscribeToIterable_1 = require_subscribeToIterable();
      var subscribeToObservable_1 = require_subscribeToObservable();
      var isArrayLike_1 = require_isArrayLike();
      var isPromise_1 = require_isPromise();
      var isObject_1 = require_isObject();
      var iterator_1 = require_iterator();
      var observable_1 = require_observable();
      exports.subscribeTo = function (result) {
        if (!!result && typeof result[observable_1.observable] === 'function') {
          return subscribeToObservable_1.subscribeToObservable(result);
        } else if (isArrayLike_1.isArrayLike(result)) {
          return subscribeToArray_1.subscribeToArray(result);
        } else if (isPromise_1.isPromise(result)) {
          return subscribeToPromise_1.subscribeToPromise(result);
        } else if (
          !!result &&
          typeof result[iterator_1.iterator] === 'function'
        ) {
          return subscribeToIterable_1.subscribeToIterable(result);
        } else {
          var value = isObject_1.isObject(result)
            ? 'an invalid object'
            : "'" + result + "'";
          var msg =
            'You provided ' +
            value +
            ' where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.';
          throw new TypeError(msg);
        }
      };
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/subscribeToResult.js
  var require_subscribeToResult = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/subscribeToResult.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var InnerSubscriber_1 = require_InnerSubscriber();
      var subscribeTo_1 = require_subscribeTo();
      var Observable_1 = require_Observable();
      function subscribeToResult(
        outerSubscriber,
        result,
        outerValue,
        outerIndex,
        innerSubscriber,
      ) {
        if (innerSubscriber === void 0) {
          innerSubscriber = new InnerSubscriber_1.InnerSubscriber(
            outerSubscriber,
            outerValue,
            outerIndex,
          );
        }
        if (innerSubscriber.closed) {
          return void 0;
        }
        if (result instanceof Observable_1.Observable) {
          return result.subscribe(innerSubscriber);
        }
        return subscribeTo_1.subscribeTo(result)(innerSubscriber);
      }
      exports.subscribeToResult = subscribeToResult;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/combineLatest.js
  var require_combineLatest = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/combineLatest.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var isScheduler_1 = require_isScheduler();
      var isArray_1 = require_isArray();
      var OuterSubscriber_1 = require_OuterSubscriber();
      var subscribeToResult_1 = require_subscribeToResult();
      var fromArray_1 = require_fromArray();
      var NONE = {};
      function combineLatest() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          observables[_i] = arguments[_i];
        }
        var resultSelector = void 0;
        var scheduler = void 0;
        if (isScheduler_1.isScheduler(observables[observables.length - 1])) {
          scheduler = observables.pop();
        }
        if (typeof observables[observables.length - 1] === 'function') {
          resultSelector = observables.pop();
        }
        if (observables.length === 1 && isArray_1.isArray(observables[0])) {
          observables = observables[0];
        }
        return fromArray_1
          .fromArray(observables, scheduler)
          .lift(new CombineLatestOperator(resultSelector));
      }
      exports.combineLatest = combineLatest;
      var CombineLatestOperator = (function () {
        function CombineLatestOperator2(resultSelector) {
          this.resultSelector = resultSelector;
        }
        CombineLatestOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new CombineLatestSubscriber(subscriber, this.resultSelector),
          );
        };
        return CombineLatestOperator2;
      })();
      exports.CombineLatestOperator = CombineLatestOperator;
      var CombineLatestSubscriber = (function (_super) {
        __extends2(CombineLatestSubscriber2, _super);
        function CombineLatestSubscriber2(destination, resultSelector) {
          var _this = _super.call(this, destination) || this;
          _this.resultSelector = resultSelector;
          _this.active = 0;
          _this.values = [];
          _this.observables = [];
          return _this;
        }
        CombineLatestSubscriber2.prototype._next = function (observable2) {
          this.values.push(NONE);
          this.observables.push(observable2);
        };
        CombineLatestSubscriber2.prototype._complete = function () {
          var observables = this.observables;
          var len = observables.length;
          if (len === 0) {
            this.destination.complete();
          } else {
            this.active = len;
            this.toRespond = len;
            for (var i = 0; i < len; i++) {
              var observable2 = observables[i];
              this.add(
                subscribeToResult_1.subscribeToResult(
                  this,
                  observable2,
                  void 0,
                  i,
                ),
              );
            }
          }
        };
        CombineLatestSubscriber2.prototype.notifyComplete = function (unused) {
          if ((this.active -= 1) === 0) {
            this.destination.complete();
          }
        };
        CombineLatestSubscriber2.prototype.notifyNext = function (
          _outerValue,
          innerValue,
          outerIndex,
        ) {
          var values = this.values;
          var oldVal = values[outerIndex];
          var toRespond = !this.toRespond
            ? 0
            : oldVal === NONE
            ? --this.toRespond
            : this.toRespond;
          values[outerIndex] = innerValue;
          if (toRespond === 0) {
            if (this.resultSelector) {
              this._tryResultSelector(values);
            } else {
              this.destination.next(values.slice());
            }
          }
        };
        CombineLatestSubscriber2.prototype._tryResultSelector = function (
          values,
        ) {
          var result;
          try {
            result = this.resultSelector.apply(this, values);
          } catch (err) {
            this.destination.error(err);
            return;
          }
          this.destination.next(result);
        };
        return CombineLatestSubscriber2;
      })(OuterSubscriber_1.OuterSubscriber);
      exports.CombineLatestSubscriber = CombineLatestSubscriber;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduled/scheduleObservable.js
  var require_scheduleObservable = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduled/scheduleObservable.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var Subscription_1 = require_Subscription();
      var observable_1 = require_observable();
      function scheduleObservable(input, scheduler) {
        return new Observable_1.Observable(function (subscriber) {
          var sub = new Subscription_1.Subscription();
          sub.add(
            scheduler.schedule(function () {
              var observable2 = input[observable_1.observable]();
              sub.add(
                observable2.subscribe({
                  next: function (value) {
                    sub.add(
                      scheduler.schedule(function () {
                        return subscriber.next(value);
                      }),
                    );
                  },
                  error: function (err) {
                    sub.add(
                      scheduler.schedule(function () {
                        return subscriber.error(err);
                      }),
                    );
                  },
                  complete: function () {
                    sub.add(
                      scheduler.schedule(function () {
                        return subscriber.complete();
                      }),
                    );
                  },
                }),
              );
            }),
          );
          return sub;
        });
      }
      exports.scheduleObservable = scheduleObservable;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduled/schedulePromise.js
  var require_schedulePromise = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduled/schedulePromise.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var Subscription_1 = require_Subscription();
      function schedulePromise(input, scheduler) {
        return new Observable_1.Observable(function (subscriber) {
          var sub = new Subscription_1.Subscription();
          sub.add(
            scheduler.schedule(function () {
              return input.then(
                function (value) {
                  sub.add(
                    scheduler.schedule(function () {
                      subscriber.next(value);
                      sub.add(
                        scheduler.schedule(function () {
                          return subscriber.complete();
                        }),
                      );
                    }),
                  );
                },
                function (err) {
                  sub.add(
                    scheduler.schedule(function () {
                      return subscriber.error(err);
                    }),
                  );
                },
              );
            }),
          );
          return sub;
        });
      }
      exports.schedulePromise = schedulePromise;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduled/scheduleIterable.js
  var require_scheduleIterable = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduled/scheduleIterable.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var Subscription_1 = require_Subscription();
      var iterator_1 = require_iterator();
      function scheduleIterable(input, scheduler) {
        if (!input) {
          throw new Error('Iterable cannot be null');
        }
        return new Observable_1.Observable(function (subscriber) {
          var sub = new Subscription_1.Subscription();
          var iterator2;
          sub.add(function () {
            if (iterator2 && typeof iterator2.return === 'function') {
              iterator2.return();
            }
          });
          sub.add(
            scheduler.schedule(function () {
              iterator2 = input[iterator_1.iterator]();
              sub.add(
                scheduler.schedule(function () {
                  if (subscriber.closed) {
                    return;
                  }
                  var value;
                  var done;
                  try {
                    var result = iterator2.next();
                    value = result.value;
                    done = result.done;
                  } catch (err) {
                    subscriber.error(err);
                    return;
                  }
                  if (done) {
                    subscriber.complete();
                  } else {
                    subscriber.next(value);
                    this.schedule();
                  }
                }),
              );
            }),
          );
          return sub;
        });
      }
      exports.scheduleIterable = scheduleIterable;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/isInteropObservable.js
  var require_isInteropObservable = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/isInteropObservable.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var observable_1 = require_observable();
      function isInteropObservable2(input) {
        return input && typeof input[observable_1.observable] === 'function';
      }
      exports.isInteropObservable = isInteropObservable2;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/isIterable.js
  var require_isIterable = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/isIterable.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var iterator_1 = require_iterator();
      function isIterable2(input) {
        return input && typeof input[iterator_1.iterator] === 'function';
      }
      exports.isIterable = isIterable2;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/scheduled/scheduled.js
  var require_scheduled = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/scheduled/scheduled.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var scheduleObservable_1 = require_scheduleObservable();
      var schedulePromise_1 = require_schedulePromise();
      var scheduleArray_1 = require_scheduleArray();
      var scheduleIterable_1 = require_scheduleIterable();
      var isInteropObservable_1 = require_isInteropObservable();
      var isPromise_1 = require_isPromise();
      var isArrayLike_1 = require_isArrayLike();
      var isIterable_1 = require_isIterable();
      function scheduled(input, scheduler) {
        if (input != null) {
          if (isInteropObservable_1.isInteropObservable(input)) {
            return scheduleObservable_1.scheduleObservable(input, scheduler);
          } else if (isPromise_1.isPromise(input)) {
            return schedulePromise_1.schedulePromise(input, scheduler);
          } else if (isArrayLike_1.isArrayLike(input)) {
            return scheduleArray_1.scheduleArray(input, scheduler);
          } else if (
            isIterable_1.isIterable(input) ||
            typeof input === 'string'
          ) {
            return scheduleIterable_1.scheduleIterable(input, scheduler);
          }
        }
        throw new TypeError(
          ((input !== null && typeof input) || input) + ' is not observable',
        );
      }
      exports.scheduled = scheduled;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/from.js
  var require_from = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/from.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var subscribeTo_1 = require_subscribeTo();
      var scheduled_1 = require_scheduled();
      function from(input, scheduler) {
        if (!scheduler) {
          if (input instanceof Observable_1.Observable) {
            return input;
          }
          return new Observable_1.Observable(subscribeTo_1.subscribeTo(input));
        } else {
          return scheduled_1.scheduled(input, scheduler);
        }
      }
      exports.from = from;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/innerSubscribe.js
  var require_innerSubscribe = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/innerSubscribe.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var Observable_1 = require_Observable();
      var subscribeTo_1 = require_subscribeTo();
      var SimpleInnerSubscriber = (function (_super) {
        __extends2(SimpleInnerSubscriber2, _super);
        function SimpleInnerSubscriber2(parent) {
          var _this = _super.call(this) || this;
          _this.parent = parent;
          return _this;
        }
        SimpleInnerSubscriber2.prototype._next = function (value) {
          this.parent.notifyNext(value);
        };
        SimpleInnerSubscriber2.prototype._error = function (error) {
          this.parent.notifyError(error);
          this.unsubscribe();
        };
        SimpleInnerSubscriber2.prototype._complete = function () {
          this.parent.notifyComplete();
          this.unsubscribe();
        };
        return SimpleInnerSubscriber2;
      })(Subscriber_1.Subscriber);
      exports.SimpleInnerSubscriber = SimpleInnerSubscriber;
      var ComplexInnerSubscriber = (function (_super) {
        __extends2(ComplexInnerSubscriber2, _super);
        function ComplexInnerSubscriber2(parent, outerValue, outerIndex) {
          var _this = _super.call(this) || this;
          _this.parent = parent;
          _this.outerValue = outerValue;
          _this.outerIndex = outerIndex;
          return _this;
        }
        ComplexInnerSubscriber2.prototype._next = function (value) {
          this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);
        };
        ComplexInnerSubscriber2.prototype._error = function (error) {
          this.parent.notifyError(error);
          this.unsubscribe();
        };
        ComplexInnerSubscriber2.prototype._complete = function () {
          this.parent.notifyComplete(this);
          this.unsubscribe();
        };
        return ComplexInnerSubscriber2;
      })(Subscriber_1.Subscriber);
      exports.ComplexInnerSubscriber = ComplexInnerSubscriber;
      var SimpleOuterSubscriber = (function (_super) {
        __extends2(SimpleOuterSubscriber2, _super);
        function SimpleOuterSubscriber2() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        SimpleOuterSubscriber2.prototype.notifyNext = function (innerValue) {
          this.destination.next(innerValue);
        };
        SimpleOuterSubscriber2.prototype.notifyError = function (err) {
          this.destination.error(err);
        };
        SimpleOuterSubscriber2.prototype.notifyComplete = function () {
          this.destination.complete();
        };
        return SimpleOuterSubscriber2;
      })(Subscriber_1.Subscriber);
      exports.SimpleOuterSubscriber = SimpleOuterSubscriber;
      var ComplexOuterSubscriber = (function (_super) {
        __extends2(ComplexOuterSubscriber2, _super);
        function ComplexOuterSubscriber2() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        ComplexOuterSubscriber2.prototype.notifyNext = function (
          _outerValue,
          innerValue,
          _outerIndex,
          _innerSub,
        ) {
          this.destination.next(innerValue);
        };
        ComplexOuterSubscriber2.prototype.notifyError = function (error) {
          this.destination.error(error);
        };
        ComplexOuterSubscriber2.prototype.notifyComplete = function (
          _innerSub,
        ) {
          this.destination.complete();
        };
        return ComplexOuterSubscriber2;
      })(Subscriber_1.Subscriber);
      exports.ComplexOuterSubscriber = ComplexOuterSubscriber;
      function innerSubscribe(result, innerSubscriber) {
        if (innerSubscriber.closed) {
          return void 0;
        }
        if (result instanceof Observable_1.Observable) {
          return result.subscribe(innerSubscriber);
        }
        var subscription;
        try {
          subscription = subscribeTo_1.subscribeTo(result)(innerSubscriber);
        } catch (error) {
          innerSubscriber.error(error);
        }
        return subscription;
      }
      exports.innerSubscribe = innerSubscribe;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/mergeMap.js
  var require_mergeMap = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/mergeMap.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var map_1 = require_map();
      var from_1 = require_from();
      var innerSubscribe_1 = require_innerSubscribe();
      function mergeMap(project, resultSelector, concurrent) {
        if (concurrent === void 0) {
          concurrent = Number.POSITIVE_INFINITY;
        }
        if (typeof resultSelector === 'function') {
          return function (source) {
            return source.pipe(
              mergeMap(function (a, i) {
                return from_1.from(project(a, i)).pipe(
                  map_1.map(function (b, ii) {
                    return resultSelector(a, b, i, ii);
                  }),
                );
              }, concurrent),
            );
          };
        } else if (typeof resultSelector === 'number') {
          concurrent = resultSelector;
        }
        return function (source) {
          return source.lift(new MergeMapOperator(project, concurrent));
        };
      }
      exports.mergeMap = mergeMap;
      var MergeMapOperator = (function () {
        function MergeMapOperator2(project, concurrent) {
          if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
          }
          this.project = project;
          this.concurrent = concurrent;
        }
        MergeMapOperator2.prototype.call = function (observer, source) {
          return source.subscribe(
            new MergeMapSubscriber(observer, this.project, this.concurrent),
          );
        };
        return MergeMapOperator2;
      })();
      exports.MergeMapOperator = MergeMapOperator;
      var MergeMapSubscriber = (function (_super) {
        __extends2(MergeMapSubscriber2, _super);
        function MergeMapSubscriber2(destination, project, concurrent) {
          if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
          }
          var _this = _super.call(this, destination) || this;
          _this.project = project;
          _this.concurrent = concurrent;
          _this.hasCompleted = false;
          _this.buffer = [];
          _this.active = 0;
          _this.index = 0;
          return _this;
        }
        MergeMapSubscriber2.prototype._next = function (value) {
          if (this.active < this.concurrent) {
            this._tryNext(value);
          } else {
            this.buffer.push(value);
          }
        };
        MergeMapSubscriber2.prototype._tryNext = function (value) {
          var result;
          var index = this.index++;
          try {
            result = this.project(value, index);
          } catch (err) {
            this.destination.error(err);
            return;
          }
          this.active++;
          this._innerSub(result);
        };
        MergeMapSubscriber2.prototype._innerSub = function (ish) {
          var innerSubscriber = new innerSubscribe_1.SimpleInnerSubscriber(
            this,
          );
          var destination = this.destination;
          destination.add(innerSubscriber);
          var innerSubscription = innerSubscribe_1.innerSubscribe(
            ish,
            innerSubscriber,
          );
          if (innerSubscription !== innerSubscriber) {
            destination.add(innerSubscription);
          }
        };
        MergeMapSubscriber2.prototype._complete = function () {
          this.hasCompleted = true;
          if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
          }
          this.unsubscribe();
        };
        MergeMapSubscriber2.prototype.notifyNext = function (innerValue) {
          this.destination.next(innerValue);
        };
        MergeMapSubscriber2.prototype.notifyComplete = function () {
          var buffer = this.buffer;
          this.active--;
          if (buffer.length > 0) {
            this._next(buffer.shift());
          } else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
          }
        };
        return MergeMapSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
      exports.MergeMapSubscriber = MergeMapSubscriber;
      exports.flatMap = mergeMap;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/mergeAll.js
  var require_mergeAll = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/mergeAll.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var mergeMap_1 = require_mergeMap();
      var identity_1 = require_identity();
      function mergeAll(concurrent) {
        if (concurrent === void 0) {
          concurrent = Number.POSITIVE_INFINITY;
        }
        return mergeMap_1.mergeMap(identity_1.identity, concurrent);
      }
      exports.mergeAll = mergeAll;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/concatAll.js
  var require_concatAll = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/concatAll.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var mergeAll_1 = require_mergeAll();
      function concatAll() {
        return mergeAll_1.mergeAll(1);
      }
      exports.concatAll = concatAll;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/concat.js
  var require_concat = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/concat.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var of_1 = require_of();
      var concatAll_1 = require_concatAll();
      function concat() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          observables[_i] = arguments[_i];
        }
        return concatAll_1.concatAll()(of_1.of.apply(void 0, observables));
      }
      exports.concat = concat;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/defer.js
  var require_defer = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/defer.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var from_1 = require_from();
      var empty_1 = require_empty();
      function defer2(observableFactory) {
        return new Observable_1.Observable(function (subscriber) {
          var input;
          try {
            input = observableFactory();
          } catch (err) {
            subscriber.error(err);
            return void 0;
          }
          var source = input ? from_1.from(input) : empty_1.empty();
          return source.subscribe(subscriber);
        });
      }
      exports.defer = defer2;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/forkJoin.js
  var require_forkJoin = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/forkJoin.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var isArray_1 = require_isArray();
      var map_1 = require_map();
      var isObject_1 = require_isObject();
      var from_1 = require_from();
      function forkJoin() {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          sources[_i] = arguments[_i];
        }
        if (sources.length === 1) {
          var first_1 = sources[0];
          if (isArray_1.isArray(first_1)) {
            return forkJoinInternal(first_1, null);
          }
          if (
            isObject_1.isObject(first_1) &&
            Object.getPrototypeOf(first_1) === Object.prototype
          ) {
            var keys = Object.keys(first_1);
            return forkJoinInternal(
              keys.map(function (key) {
                return first_1[key];
              }),
              keys,
            );
          }
        }
        if (typeof sources[sources.length - 1] === 'function') {
          var resultSelector_1 = sources.pop();
          sources =
            sources.length === 1 && isArray_1.isArray(sources[0])
              ? sources[0]
              : sources;
          return forkJoinInternal(sources, null).pipe(
            map_1.map(function (args) {
              return resultSelector_1.apply(void 0, args);
            }),
          );
        }
        return forkJoinInternal(sources, null);
      }
      exports.forkJoin = forkJoin;
      function forkJoinInternal(sources, keys) {
        return new Observable_1.Observable(function (subscriber) {
          var len = sources.length;
          if (len === 0) {
            subscriber.complete();
            return;
          }
          var values = new Array(len);
          var completed = 0;
          var emitted = 0;
          var _loop_1 = function (i2) {
            var source = from_1.from(sources[i2]);
            var hasValue = false;
            subscriber.add(
              source.subscribe({
                next: function (value) {
                  if (!hasValue) {
                    hasValue = true;
                    emitted++;
                  }
                  values[i2] = value;
                },
                error: function (err) {
                  return subscriber.error(err);
                },
                complete: function () {
                  completed++;
                  if (completed === len || !hasValue) {
                    if (emitted === len) {
                      subscriber.next(
                        keys
                          ? keys.reduce(function (result, key, i3) {
                              return (result[key] = values[i3]), result;
                            }, {})
                          : values,
                      );
                    }
                    subscriber.complete();
                  }
                },
              }),
            );
          };
          for (var i = 0; i < len; i++) {
            _loop_1(i);
          }
        });
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/fromEvent.js
  var require_fromEvent = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/fromEvent.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var isArray_1 = require_isArray();
      var isFunction_1 = require_isFunction();
      var map_1 = require_map();
      var toString = (function () {
        return Object.prototype.toString;
      })();
      function fromEvent(target, eventName, options, resultSelector) {
        if (isFunction_1.isFunction(options)) {
          resultSelector = options;
          options = void 0;
        }
        if (resultSelector) {
          return fromEvent(target, eventName, options).pipe(
            map_1.map(function (args) {
              return isArray_1.isArray(args)
                ? resultSelector.apply(void 0, args)
                : resultSelector(args);
            }),
          );
        }
        return new Observable_1.Observable(function (subscriber) {
          function handler(e) {
            if (arguments.length > 1) {
              subscriber.next(Array.prototype.slice.call(arguments));
            } else {
              subscriber.next(e);
            }
          }
          setupSubscription(target, eventName, handler, subscriber, options);
        });
      }
      exports.fromEvent = fromEvent;
      function setupSubscription(
        sourceObj,
        eventName,
        handler,
        subscriber,
        options,
      ) {
        var unsubscribe;
        if (isEventTarget(sourceObj)) {
          var source_1 = sourceObj;
          sourceObj.addEventListener(eventName, handler, options);
          unsubscribe = function () {
            return source_1.removeEventListener(eventName, handler, options);
          };
        } else if (isJQueryStyleEventEmitter(sourceObj)) {
          var source_2 = sourceObj;
          sourceObj.on(eventName, handler);
          unsubscribe = function () {
            return source_2.off(eventName, handler);
          };
        } else if (isNodeStyleEventEmitter(sourceObj)) {
          var source_3 = sourceObj;
          sourceObj.addListener(eventName, handler);
          unsubscribe = function () {
            return source_3.removeListener(eventName, handler);
          };
        } else if (sourceObj && sourceObj.length) {
          for (var i = 0, len = sourceObj.length; i < len; i++) {
            setupSubscription(
              sourceObj[i],
              eventName,
              handler,
              subscriber,
              options,
            );
          }
        } else {
          throw new TypeError('Invalid event target');
        }
        subscriber.add(unsubscribe);
      }
      function isNodeStyleEventEmitter(sourceObj) {
        return (
          sourceObj &&
          typeof sourceObj.addListener === 'function' &&
          typeof sourceObj.removeListener === 'function'
        );
      }
      function isJQueryStyleEventEmitter(sourceObj) {
        return (
          sourceObj &&
          typeof sourceObj.on === 'function' &&
          typeof sourceObj.off === 'function'
        );
      }
      function isEventTarget(sourceObj) {
        return (
          sourceObj &&
          typeof sourceObj.addEventListener === 'function' &&
          typeof sourceObj.removeEventListener === 'function'
        );
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/fromEventPattern.js
  var require_fromEventPattern = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/fromEventPattern.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var isArray_1 = require_isArray();
      var isFunction_1 = require_isFunction();
      var map_1 = require_map();
      function fromEventPattern(addHandler, removeHandler, resultSelector) {
        if (resultSelector) {
          return fromEventPattern(addHandler, removeHandler).pipe(
            map_1.map(function (args) {
              return isArray_1.isArray(args)
                ? resultSelector.apply(void 0, args)
                : resultSelector(args);
            }),
          );
        }
        return new Observable_1.Observable(function (subscriber) {
          var handler = function () {
            var e = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              e[_i] = arguments[_i];
            }
            return subscriber.next(e.length === 1 ? e[0] : e);
          };
          var retValue;
          try {
            retValue = addHandler(handler);
          } catch (err) {
            subscriber.error(err);
            return void 0;
          }
          if (!isFunction_1.isFunction(removeHandler)) {
            return void 0;
          }
          return function () {
            return removeHandler(handler, retValue);
          };
        });
      }
      exports.fromEventPattern = fromEventPattern;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/generate.js
  var require_generate = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/generate.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var identity_1 = require_identity();
      var isScheduler_1 = require_isScheduler();
      function generate(
        initialStateOrOptions,
        condition,
        iterate,
        resultSelectorOrObservable,
        scheduler,
      ) {
        var resultSelector;
        var initialState;
        if (arguments.length == 1) {
          var options = initialStateOrOptions;
          initialState = options.initialState;
          condition = options.condition;
          iterate = options.iterate;
          resultSelector = options.resultSelector || identity_1.identity;
          scheduler = options.scheduler;
        } else if (
          resultSelectorOrObservable === void 0 ||
          isScheduler_1.isScheduler(resultSelectorOrObservable)
        ) {
          initialState = initialStateOrOptions;
          resultSelector = identity_1.identity;
          scheduler = resultSelectorOrObservable;
        } else {
          initialState = initialStateOrOptions;
          resultSelector = resultSelectorOrObservable;
        }
        return new Observable_1.Observable(function (subscriber) {
          var state = initialState;
          if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
              subscriber,
              iterate,
              condition,
              resultSelector,
              state,
            });
          }
          do {
            if (condition) {
              var conditionResult = void 0;
              try {
                conditionResult = condition(state);
              } catch (err) {
                subscriber.error(err);
                return void 0;
              }
              if (!conditionResult) {
                subscriber.complete();
                break;
              }
            }
            var value = void 0;
            try {
              value = resultSelector(state);
            } catch (err) {
              subscriber.error(err);
              return void 0;
            }
            subscriber.next(value);
            if (subscriber.closed) {
              break;
            }
            try {
              state = iterate(state);
            } catch (err) {
              subscriber.error(err);
              return void 0;
            }
          } while (true);
          return void 0;
        });
      }
      exports.generate = generate;
      function dispatch(state) {
        var subscriber = state.subscriber,
          condition = state.condition;
        if (subscriber.closed) {
          return void 0;
        }
        if (state.needIterate) {
          try {
            state.state = state.iterate(state.state);
          } catch (err) {
            subscriber.error(err);
            return void 0;
          }
        } else {
          state.needIterate = true;
        }
        if (condition) {
          var conditionResult = void 0;
          try {
            conditionResult = condition(state.state);
          } catch (err) {
            subscriber.error(err);
            return void 0;
          }
          if (!conditionResult) {
            subscriber.complete();
            return void 0;
          }
          if (subscriber.closed) {
            return void 0;
          }
        }
        var value;
        try {
          value = state.resultSelector(state.state);
        } catch (err) {
          subscriber.error(err);
          return void 0;
        }
        if (subscriber.closed) {
          return void 0;
        }
        subscriber.next(value);
        if (subscriber.closed) {
          return void 0;
        }
        return this.schedule(state);
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/iif.js
  var require_iif = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/iif.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var defer_1 = require_defer();
      var empty_1 = require_empty();
      function iif(condition, trueResult, falseResult) {
        if (trueResult === void 0) {
          trueResult = empty_1.EMPTY;
        }
        if (falseResult === void 0) {
          falseResult = empty_1.EMPTY;
        }
        return defer_1.defer(function () {
          return condition() ? trueResult : falseResult;
        });
      }
      exports.iif = iif;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/isNumeric.js
  var require_isNumeric = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/isNumeric.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var isArray_1 = require_isArray();
      function isNumeric(val) {
        return !isArray_1.isArray(val) && val - parseFloat(val) + 1 >= 0;
      }
      exports.isNumeric = isNumeric;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/interval.js
  var require_interval = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/interval.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var async_1 = require_async();
      var isNumeric_1 = require_isNumeric();
      function interval(period, scheduler) {
        if (period === void 0) {
          period = 0;
        }
        if (scheduler === void 0) {
          scheduler = async_1.async;
        }
        if (!isNumeric_1.isNumeric(period) || period < 0) {
          period = 0;
        }
        if (!scheduler || typeof scheduler.schedule !== 'function') {
          scheduler = async_1.async;
        }
        return new Observable_1.Observable(function (subscriber) {
          subscriber.add(
            scheduler.schedule(dispatch, period, {
              subscriber,
              counter: 0,
              period,
            }),
          );
          return subscriber;
        });
      }
      exports.interval = interval;
      function dispatch(state) {
        var subscriber = state.subscriber,
          counter = state.counter,
          period = state.period;
        subscriber.next(counter);
        this.schedule({ subscriber, counter: counter + 1, period }, period);
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/merge.js
  var require_merge = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/merge.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var isScheduler_1 = require_isScheduler();
      var mergeAll_1 = require_mergeAll();
      var fromArray_1 = require_fromArray();
      function merge() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          observables[_i] = arguments[_i];
        }
        var concurrent = Number.POSITIVE_INFINITY;
        var scheduler = null;
        var last = observables[observables.length - 1];
        if (isScheduler_1.isScheduler(last)) {
          scheduler = observables.pop();
          if (
            observables.length > 1 &&
            typeof observables[observables.length - 1] === 'number'
          ) {
            concurrent = observables.pop();
          }
        } else if (typeof last === 'number') {
          concurrent = observables.pop();
        }
        if (
          scheduler === null &&
          observables.length === 1 &&
          observables[0] instanceof Observable_1.Observable
        ) {
          return observables[0];
        }
        return mergeAll_1.mergeAll(concurrent)(
          fromArray_1.fromArray(observables, scheduler),
        );
      }
      exports.merge = merge;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/never.js
  var require_never = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/never.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var noop_1 = require_noop();
      exports.NEVER = new Observable_1.Observable(noop_1.noop);
      function never() {
        return exports.NEVER;
      }
      exports.never = never;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/onErrorResumeNext.js
  var require_onErrorResumeNext = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/onErrorResumeNext.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var from_1 = require_from();
      var isArray_1 = require_isArray();
      var empty_1 = require_empty();
      function onErrorResumeNext() {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          sources[_i] = arguments[_i];
        }
        if (sources.length === 0) {
          return empty_1.EMPTY;
        }
        var first = sources[0],
          remainder = sources.slice(1);
        if (sources.length === 1 && isArray_1.isArray(first)) {
          return onErrorResumeNext.apply(void 0, first);
        }
        return new Observable_1.Observable(function (subscriber) {
          var subNext = function () {
            return subscriber.add(
              onErrorResumeNext.apply(void 0, remainder).subscribe(subscriber),
            );
          };
          return from_1.from(first).subscribe({
            next: function (value) {
              subscriber.next(value);
            },
            error: subNext,
            complete: subNext,
          });
        });
      }
      exports.onErrorResumeNext = onErrorResumeNext;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/pairs.js
  var require_pairs = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/pairs.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var Subscription_1 = require_Subscription();
      function pairs(obj, scheduler) {
        if (!scheduler) {
          return new Observable_1.Observable(function (subscriber) {
            var keys = Object.keys(obj);
            for (var i = 0; i < keys.length && !subscriber.closed; i++) {
              var key = keys[i];
              if (obj.hasOwnProperty(key)) {
                subscriber.next([key, obj[key]]);
              }
            }
            subscriber.complete();
          });
        } else {
          return new Observable_1.Observable(function (subscriber) {
            var keys = Object.keys(obj);
            var subscription = new Subscription_1.Subscription();
            subscription.add(
              scheduler.schedule(dispatch, 0, {
                keys,
                index: 0,
                subscriber,
                subscription,
                obj,
              }),
            );
            return subscription;
          });
        }
      }
      exports.pairs = pairs;
      function dispatch(state) {
        var keys = state.keys,
          index = state.index,
          subscriber = state.subscriber,
          subscription = state.subscription,
          obj = state.obj;
        if (!subscriber.closed) {
          if (index < keys.length) {
            var key = keys[index];
            subscriber.next([key, obj[key]]);
            subscription.add(
              this.schedule({
                keys,
                index: index + 1,
                subscriber,
                subscription,
                obj,
              }),
            );
          } else {
            subscriber.complete();
          }
        }
      }
      exports.dispatch = dispatch;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/not.js
  var require_not = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/not.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      function not(pred, thisArg) {
        function notPred() {
          return !notPred.pred.apply(notPred.thisArg, arguments);
        }
        notPred.pred = pred;
        notPred.thisArg = thisArg;
        return notPred;
      }
      exports.not = not;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/filter.js
  var require_filter = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/filter.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function filter(predicate, thisArg) {
        return function filterOperatorFunction(source) {
          return source.lift(new FilterOperator(predicate, thisArg));
        };
      }
      exports.filter = filter;
      var FilterOperator = (function () {
        function FilterOperator2(predicate, thisArg) {
          this.predicate = predicate;
          this.thisArg = thisArg;
        }
        FilterOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new FilterSubscriber(subscriber, this.predicate, this.thisArg),
          );
        };
        return FilterOperator2;
      })();
      var FilterSubscriber = (function (_super) {
        __extends2(FilterSubscriber2, _super);
        function FilterSubscriber2(destination, predicate, thisArg) {
          var _this = _super.call(this, destination) || this;
          _this.predicate = predicate;
          _this.thisArg = thisArg;
          _this.count = 0;
          return _this;
        }
        FilterSubscriber2.prototype._next = function (value) {
          var result;
          try {
            result = this.predicate.call(this.thisArg, value, this.count++);
          } catch (err) {
            this.destination.error(err);
            return;
          }
          if (result) {
            this.destination.next(value);
          }
        };
        return FilterSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/partition.js
  var require_partition = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/partition.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var not_1 = require_not();
      var subscribeTo_1 = require_subscribeTo();
      var filter_1 = require_filter();
      var Observable_1 = require_Observable();
      function partition(source, predicate, thisArg) {
        return [
          filter_1.filter(
            predicate,
            thisArg,
          )(new Observable_1.Observable(subscribeTo_1.subscribeTo(source))),
          filter_1.filter(not_1.not(predicate, thisArg))(
            new Observable_1.Observable(subscribeTo_1.subscribeTo(source)),
          ),
        ];
      }
      exports.partition = partition;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/race.js
  var require_race = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/race.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var isArray_1 = require_isArray();
      var fromArray_1 = require_fromArray();
      var OuterSubscriber_1 = require_OuterSubscriber();
      var subscribeToResult_1 = require_subscribeToResult();
      function race() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          observables[_i] = arguments[_i];
        }
        if (observables.length === 1) {
          if (isArray_1.isArray(observables[0])) {
            observables = observables[0];
          } else {
            return observables[0];
          }
        }
        return fromArray_1
          .fromArray(observables, void 0)
          .lift(new RaceOperator());
      }
      exports.race = race;
      var RaceOperator = (function () {
        function RaceOperator2() {}
        RaceOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(new RaceSubscriber(subscriber));
        };
        return RaceOperator2;
      })();
      exports.RaceOperator = RaceOperator;
      var RaceSubscriber = (function (_super) {
        __extends2(RaceSubscriber2, _super);
        function RaceSubscriber2(destination) {
          var _this = _super.call(this, destination) || this;
          _this.hasFirst = false;
          _this.observables = [];
          _this.subscriptions = [];
          return _this;
        }
        RaceSubscriber2.prototype._next = function (observable2) {
          this.observables.push(observable2);
        };
        RaceSubscriber2.prototype._complete = function () {
          var observables = this.observables;
          var len = observables.length;
          if (len === 0) {
            this.destination.complete();
          } else {
            for (var i = 0; i < len && !this.hasFirst; i++) {
              var observable2 = observables[i];
              var subscription = subscribeToResult_1.subscribeToResult(
                this,
                observable2,
                void 0,
                i,
              );
              if (this.subscriptions) {
                this.subscriptions.push(subscription);
              }
              this.add(subscription);
            }
            this.observables = null;
          }
        };
        RaceSubscriber2.prototype.notifyNext = function (
          _outerValue,
          innerValue,
          outerIndex,
        ) {
          if (!this.hasFirst) {
            this.hasFirst = true;
            for (var i = 0; i < this.subscriptions.length; i++) {
              if (i !== outerIndex) {
                var subscription = this.subscriptions[i];
                subscription.unsubscribe();
                this.remove(subscription);
              }
            }
            this.subscriptions = null;
          }
          this.destination.next(innerValue);
        };
        return RaceSubscriber2;
      })(OuterSubscriber_1.OuterSubscriber);
      exports.RaceSubscriber = RaceSubscriber;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/range.js
  var require_range = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/range.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      function range(start, count, scheduler) {
        if (start === void 0) {
          start = 0;
        }
        return new Observable_1.Observable(function (subscriber) {
          if (count === void 0) {
            count = start;
            start = 0;
          }
          var index = 0;
          var current = start;
          if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
              index,
              count,
              start,
              subscriber,
            });
          } else {
            do {
              if (index++ >= count) {
                subscriber.complete();
                break;
              }
              subscriber.next(current++);
              if (subscriber.closed) {
                break;
              }
            } while (true);
          }
          return void 0;
        });
      }
      exports.range = range;
      function dispatch(state) {
        var start = state.start,
          index = state.index,
          count = state.count,
          subscriber = state.subscriber;
        if (index >= count) {
          subscriber.complete();
          return;
        }
        subscriber.next(start);
        if (subscriber.closed) {
          return;
        }
        state.index = index + 1;
        state.start = start + 1;
        this.schedule(state);
      }
      exports.dispatch = dispatch;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/timer.js
  var require_timer = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/timer.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var async_1 = require_async();
      var isNumeric_1 = require_isNumeric();
      var isScheduler_1 = require_isScheduler();
      function timer(dueTime, periodOrScheduler, scheduler) {
        if (dueTime === void 0) {
          dueTime = 0;
        }
        var period = -1;
        if (isNumeric_1.isNumeric(periodOrScheduler)) {
          period =
            (Number(periodOrScheduler) < 1 && 1) || Number(periodOrScheduler);
        } else if (isScheduler_1.isScheduler(periodOrScheduler)) {
          scheduler = periodOrScheduler;
        }
        if (!isScheduler_1.isScheduler(scheduler)) {
          scheduler = async_1.async;
        }
        return new Observable_1.Observable(function (subscriber) {
          var due = isNumeric_1.isNumeric(dueTime)
            ? dueTime
            : +dueTime - scheduler.now();
          return scheduler.schedule(dispatch, due, {
            index: 0,
            period,
            subscriber,
          });
        });
      }
      exports.timer = timer;
      function dispatch(state) {
        var index = state.index,
          period = state.period,
          subscriber = state.subscriber;
        subscriber.next(index);
        if (subscriber.closed) {
          return;
        } else if (period === -1) {
          return subscriber.complete();
        }
        state.index = index + 1;
        this.schedule(state, period);
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/using.js
  var require_using = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/using.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var from_1 = require_from();
      var empty_1 = require_empty();
      function using(resourceFactory, observableFactory) {
        return new Observable_1.Observable(function (subscriber) {
          var resource;
          try {
            resource = resourceFactory();
          } catch (err) {
            subscriber.error(err);
            return void 0;
          }
          var result;
          try {
            result = observableFactory(resource);
          } catch (err) {
            subscriber.error(err);
            return void 0;
          }
          var source = result ? from_1.from(result) : empty_1.EMPTY;
          var subscription = source.subscribe(subscriber);
          return function () {
            subscription.unsubscribe();
            if (resource) {
              resource.unsubscribe();
            }
          };
        });
      }
      exports.using = using;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/zip.js
  var require_zip = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/zip.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var fromArray_1 = require_fromArray();
      var isArray_1 = require_isArray();
      var Subscriber_1 = require_Subscriber();
      var iterator_1 = require_iterator();
      var innerSubscribe_1 = require_innerSubscribe();
      function zip() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          observables[_i] = arguments[_i];
        }
        var resultSelector = observables[observables.length - 1];
        if (typeof resultSelector === 'function') {
          observables.pop();
        }
        return fromArray_1
          .fromArray(observables, void 0)
          .lift(new ZipOperator(resultSelector));
      }
      exports.zip = zip;
      var ZipOperator = (function () {
        function ZipOperator2(resultSelector) {
          this.resultSelector = resultSelector;
        }
        ZipOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new ZipSubscriber(subscriber, this.resultSelector),
          );
        };
        return ZipOperator2;
      })();
      exports.ZipOperator = ZipOperator;
      var ZipSubscriber = (function (_super) {
        __extends2(ZipSubscriber2, _super);
        function ZipSubscriber2(destination, resultSelector, values) {
          if (values === void 0) {
            values = /* @__PURE__ */ Object.create(null);
          }
          var _this = _super.call(this, destination) || this;
          _this.resultSelector = resultSelector;
          _this.iterators = [];
          _this.active = 0;
          _this.resultSelector =
            typeof resultSelector === 'function' ? resultSelector : void 0;
          return _this;
        }
        ZipSubscriber2.prototype._next = function (value) {
          var iterators = this.iterators;
          if (isArray_1.isArray(value)) {
            iterators.push(new StaticArrayIterator(value));
          } else if (typeof value[iterator_1.iterator] === 'function') {
            iterators.push(new StaticIterator(value[iterator_1.iterator]()));
          } else {
            iterators.push(
              new ZipBufferIterator(this.destination, this, value),
            );
          }
        };
        ZipSubscriber2.prototype._complete = function () {
          var iterators = this.iterators;
          var len = iterators.length;
          this.unsubscribe();
          if (len === 0) {
            this.destination.complete();
            return;
          }
          this.active = len;
          for (var i = 0; i < len; i++) {
            var iterator2 = iterators[i];
            if (iterator2.stillUnsubscribed) {
              var destination = this.destination;
              destination.add(iterator2.subscribe());
            } else {
              this.active--;
            }
          }
        };
        ZipSubscriber2.prototype.notifyInactive = function () {
          this.active--;
          if (this.active === 0) {
            this.destination.complete();
          }
        };
        ZipSubscriber2.prototype.checkIterators = function () {
          var iterators = this.iterators;
          var len = iterators.length;
          var destination = this.destination;
          for (var i = 0; i < len; i++) {
            var iterator2 = iterators[i];
            if (
              typeof iterator2.hasValue === 'function' &&
              !iterator2.hasValue()
            ) {
              return;
            }
          }
          var shouldComplete = false;
          var args = [];
          for (var i = 0; i < len; i++) {
            var iterator2 = iterators[i];
            var result = iterator2.next();
            if (iterator2.hasCompleted()) {
              shouldComplete = true;
            }
            if (result.done) {
              destination.complete();
              return;
            }
            args.push(result.value);
          }
          if (this.resultSelector) {
            this._tryresultSelector(args);
          } else {
            destination.next(args);
          }
          if (shouldComplete) {
            destination.complete();
          }
        };
        ZipSubscriber2.prototype._tryresultSelector = function (args) {
          var result;
          try {
            result = this.resultSelector.apply(this, args);
          } catch (err) {
            this.destination.error(err);
            return;
          }
          this.destination.next(result);
        };
        return ZipSubscriber2;
      })(Subscriber_1.Subscriber);
      exports.ZipSubscriber = ZipSubscriber;
      var StaticIterator = (function () {
        function StaticIterator2(iterator2) {
          this.iterator = iterator2;
          this.nextResult = iterator2.next();
        }
        StaticIterator2.prototype.hasValue = function () {
          return true;
        };
        StaticIterator2.prototype.next = function () {
          var result = this.nextResult;
          this.nextResult = this.iterator.next();
          return result;
        };
        StaticIterator2.prototype.hasCompleted = function () {
          var nextResult = this.nextResult;
          return Boolean(nextResult && nextResult.done);
        };
        return StaticIterator2;
      })();
      var StaticArrayIterator = (function () {
        function StaticArrayIterator2(array) {
          this.array = array;
          this.index = 0;
          this.length = 0;
          this.length = array.length;
        }
        StaticArrayIterator2.prototype[iterator_1.iterator] = function () {
          return this;
        };
        StaticArrayIterator2.prototype.next = function (value) {
          var i = this.index++;
          var array = this.array;
          return i < this.length
            ? { value: array[i], done: false }
            : { value: null, done: true };
        };
        StaticArrayIterator2.prototype.hasValue = function () {
          return this.array.length > this.index;
        };
        StaticArrayIterator2.prototype.hasCompleted = function () {
          return this.array.length === this.index;
        };
        return StaticArrayIterator2;
      })();
      var ZipBufferIterator = (function (_super) {
        __extends2(ZipBufferIterator2, _super);
        function ZipBufferIterator2(destination, parent, observable2) {
          var _this = _super.call(this, destination) || this;
          _this.parent = parent;
          _this.observable = observable2;
          _this.stillUnsubscribed = true;
          _this.buffer = [];
          _this.isComplete = false;
          return _this;
        }
        ZipBufferIterator2.prototype[iterator_1.iterator] = function () {
          return this;
        };
        ZipBufferIterator2.prototype.next = function () {
          var buffer = this.buffer;
          if (buffer.length === 0 && this.isComplete) {
            return { value: null, done: true };
          } else {
            return { value: buffer.shift(), done: false };
          }
        };
        ZipBufferIterator2.prototype.hasValue = function () {
          return this.buffer.length > 0;
        };
        ZipBufferIterator2.prototype.hasCompleted = function () {
          return this.buffer.length === 0 && this.isComplete;
        };
        ZipBufferIterator2.prototype.notifyComplete = function () {
          if (this.buffer.length > 0) {
            this.isComplete = true;
            this.parent.notifyInactive();
          } else {
            this.destination.complete();
          }
        };
        ZipBufferIterator2.prototype.notifyNext = function (innerValue) {
          this.buffer.push(innerValue);
          this.parent.checkIterators();
        };
        ZipBufferIterator2.prototype.subscribe = function () {
          return innerSubscribe_1.innerSubscribe(
            this.observable,
            new innerSubscribe_1.SimpleInnerSubscriber(this),
          );
        };
        return ZipBufferIterator2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/index.js
  var require_rxjs = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/index.js'(exports) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      exports.Observable = Observable_1.Observable;
      var ConnectableObservable_1 = require_ConnectableObservable();
      exports.ConnectableObservable =
        ConnectableObservable_1.ConnectableObservable;
      var groupBy_1 = require_groupBy();
      exports.GroupedObservable = groupBy_1.GroupedObservable;
      var observable_1 = require_observable();
      exports.observable = observable_1.observable;
      var Subject_1 = require_Subject();
      exports.Subject = Subject_1.Subject;
      var BehaviorSubject_1 = require_BehaviorSubject();
      exports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;
      var ReplaySubject_1 = require_ReplaySubject();
      exports.ReplaySubject = ReplaySubject_1.ReplaySubject;
      var AsyncSubject_1 = require_AsyncSubject();
      exports.AsyncSubject = AsyncSubject_1.AsyncSubject;
      var asap_1 = require_asap();
      exports.asap = asap_1.asap;
      exports.asapScheduler = asap_1.asapScheduler;
      var async_1 = require_async();
      exports.async = async_1.async;
      exports.asyncScheduler = async_1.asyncScheduler;
      var queue_1 = require_queue();
      exports.queue = queue_1.queue;
      exports.queueScheduler = queue_1.queueScheduler;
      var animationFrame_1 = require_animationFrame();
      exports.animationFrame = animationFrame_1.animationFrame;
      exports.animationFrameScheduler =
        animationFrame_1.animationFrameScheduler;
      var VirtualTimeScheduler_1 = require_VirtualTimeScheduler();
      exports.VirtualTimeScheduler =
        VirtualTimeScheduler_1.VirtualTimeScheduler;
      exports.VirtualAction = VirtualTimeScheduler_1.VirtualAction;
      var Scheduler_1 = require_Scheduler();
      exports.Scheduler = Scheduler_1.Scheduler;
      var Subscription_1 = require_Subscription();
      exports.Subscription = Subscription_1.Subscription;
      var Subscriber_1 = require_Subscriber();
      exports.Subscriber = Subscriber_1.Subscriber;
      var Notification_1 = require_Notification();
      exports.Notification = Notification_1.Notification;
      exports.NotificationKind = Notification_1.NotificationKind;
      var pipe_1 = require_pipe();
      exports.pipe = pipe_1.pipe;
      var noop_1 = require_noop();
      exports.noop = noop_1.noop;
      var identity_1 = require_identity();
      exports.identity = identity_1.identity;
      var isObservable_1 = require_isObservable();
      exports.isObservable = isObservable_1.isObservable;
      var ArgumentOutOfRangeError_1 = require_ArgumentOutOfRangeError();
      exports.ArgumentOutOfRangeError =
        ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
      var EmptyError_1 = require_EmptyError();
      exports.EmptyError = EmptyError_1.EmptyError;
      var ObjectUnsubscribedError_1 = require_ObjectUnsubscribedError();
      exports.ObjectUnsubscribedError =
        ObjectUnsubscribedError_1.ObjectUnsubscribedError;
      var UnsubscriptionError_1 = require_UnsubscriptionError();
      exports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;
      var TimeoutError_1 = require_TimeoutError();
      exports.TimeoutError = TimeoutError_1.TimeoutError;
      var bindCallback_1 = require_bindCallback();
      exports.bindCallback = bindCallback_1.bindCallback;
      var bindNodeCallback_1 = require_bindNodeCallback();
      exports.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;
      var combineLatest_1 = require_combineLatest();
      exports.combineLatest = combineLatest_1.combineLatest;
      var concat_1 = require_concat();
      exports.concat = concat_1.concat;
      var defer_1 = require_defer();
      exports.defer = defer_1.defer;
      var empty_1 = require_empty();
      exports.empty = empty_1.empty;
      var forkJoin_1 = require_forkJoin();
      exports.forkJoin = forkJoin_1.forkJoin;
      var from_1 = require_from();
      exports.from = from_1.from;
      var fromEvent_1 = require_fromEvent();
      exports.fromEvent = fromEvent_1.fromEvent;
      var fromEventPattern_1 = require_fromEventPattern();
      exports.fromEventPattern = fromEventPattern_1.fromEventPattern;
      var generate_1 = require_generate();
      exports.generate = generate_1.generate;
      var iif_1 = require_iif();
      exports.iif = iif_1.iif;
      var interval_1 = require_interval();
      exports.interval = interval_1.interval;
      var merge_1 = require_merge();
      exports.merge = merge_1.merge;
      var never_1 = require_never();
      exports.never = never_1.never;
      var of_1 = require_of();
      exports.of = of_1.of;
      var onErrorResumeNext_1 = require_onErrorResumeNext();
      exports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;
      var pairs_1 = require_pairs();
      exports.pairs = pairs_1.pairs;
      var partition_1 = require_partition();
      exports.partition = partition_1.partition;
      var race_1 = require_race();
      exports.race = race_1.race;
      var range_1 = require_range();
      exports.range = range_1.range;
      var throwError_1 = require_throwError();
      exports.throwError = throwError_1.throwError;
      var timer_1 = require_timer();
      exports.timer = timer_1.timer;
      var using_1 = require_using();
      exports.using = using_1.using;
      var zip_1 = require_zip();
      exports.zip = zip_1.zip;
      var scheduled_1 = require_scheduled();
      exports.scheduled = scheduled_1.scheduled;
      var empty_2 = require_empty();
      exports.EMPTY = empty_2.EMPTY;
      var never_2 = require_never();
      exports.NEVER = never_2.NEVER;
      var config_1 = require_config();
      exports.config = config_1.config;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/audit.js
  var require_audit = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/audit.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var innerSubscribe_1 = require_innerSubscribe();
      function audit(durationSelector) {
        return function auditOperatorFunction(source) {
          return source.lift(new AuditOperator(durationSelector));
        };
      }
      exports.audit = audit;
      var AuditOperator = (function () {
        function AuditOperator2(durationSelector) {
          this.durationSelector = durationSelector;
        }
        AuditOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new AuditSubscriber(subscriber, this.durationSelector),
          );
        };
        return AuditOperator2;
      })();
      var AuditSubscriber = (function (_super) {
        __extends2(AuditSubscriber2, _super);
        function AuditSubscriber2(destination, durationSelector) {
          var _this = _super.call(this, destination) || this;
          _this.durationSelector = durationSelector;
          _this.hasValue = false;
          return _this;
        }
        AuditSubscriber2.prototype._next = function (value) {
          this.value = value;
          this.hasValue = true;
          if (!this.throttled) {
            var duration = void 0;
            try {
              var durationSelector = this.durationSelector;
              duration = durationSelector(value);
            } catch (err) {
              return this.destination.error(err);
            }
            var innerSubscription = innerSubscribe_1.innerSubscribe(
              duration,
              new innerSubscribe_1.SimpleInnerSubscriber(this),
            );
            if (!innerSubscription || innerSubscription.closed) {
              this.clearThrottle();
            } else {
              this.add((this.throttled = innerSubscription));
            }
          }
        };
        AuditSubscriber2.prototype.clearThrottle = function () {
          var _a = this,
            value = _a.value,
            hasValue = _a.hasValue,
            throttled = _a.throttled;
          if (throttled) {
            this.remove(throttled);
            this.throttled = void 0;
            throttled.unsubscribe();
          }
          if (hasValue) {
            this.value = void 0;
            this.hasValue = false;
            this.destination.next(value);
          }
        };
        AuditSubscriber2.prototype.notifyNext = function () {
          this.clearThrottle();
        };
        AuditSubscriber2.prototype.notifyComplete = function () {
          this.clearThrottle();
        };
        return AuditSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/auditTime.js
  var require_auditTime = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/auditTime.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var async_1 = require_async();
      var audit_1 = require_audit();
      var timer_1 = require_timer();
      function auditTime(duration, scheduler) {
        if (scheduler === void 0) {
          scheduler = async_1.async;
        }
        return audit_1.audit(function () {
          return timer_1.timer(duration, scheduler);
        });
      }
      exports.auditTime = auditTime;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/buffer.js
  var require_buffer = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/buffer.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var innerSubscribe_1 = require_innerSubscribe();
      function buffer(closingNotifier) {
        return function bufferOperatorFunction(source) {
          return source.lift(new BufferOperator(closingNotifier));
        };
      }
      exports.buffer = buffer;
      var BufferOperator = (function () {
        function BufferOperator2(closingNotifier) {
          this.closingNotifier = closingNotifier;
        }
        BufferOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new BufferSubscriber(subscriber, this.closingNotifier),
          );
        };
        return BufferOperator2;
      })();
      var BufferSubscriber = (function (_super) {
        __extends2(BufferSubscriber2, _super);
        function BufferSubscriber2(destination, closingNotifier) {
          var _this = _super.call(this, destination) || this;
          _this.buffer = [];
          _this.add(
            innerSubscribe_1.innerSubscribe(
              closingNotifier,
              new innerSubscribe_1.SimpleInnerSubscriber(_this),
            ),
          );
          return _this;
        }
        BufferSubscriber2.prototype._next = function (value) {
          this.buffer.push(value);
        };
        BufferSubscriber2.prototype.notifyNext = function () {
          var buffer2 = this.buffer;
          this.buffer = [];
          this.destination.next(buffer2);
        };
        return BufferSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/bufferCount.js
  var require_bufferCount = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/bufferCount.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function bufferCount(bufferSize, startBufferEvery) {
        if (startBufferEvery === void 0) {
          startBufferEvery = null;
        }
        return function bufferCountOperatorFunction(source) {
          return source.lift(
            new BufferCountOperator(bufferSize, startBufferEvery),
          );
        };
      }
      exports.bufferCount = bufferCount;
      var BufferCountOperator = (function () {
        function BufferCountOperator2(bufferSize, startBufferEvery) {
          this.bufferSize = bufferSize;
          this.startBufferEvery = startBufferEvery;
          if (!startBufferEvery || bufferSize === startBufferEvery) {
            this.subscriberClass = BufferCountSubscriber;
          } else {
            this.subscriberClass = BufferSkipCountSubscriber;
          }
        }
        BufferCountOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new this.subscriberClass(
              subscriber,
              this.bufferSize,
              this.startBufferEvery,
            ),
          );
        };
        return BufferCountOperator2;
      })();
      var BufferCountSubscriber = (function (_super) {
        __extends2(BufferCountSubscriber2, _super);
        function BufferCountSubscriber2(destination, bufferSize) {
          var _this = _super.call(this, destination) || this;
          _this.bufferSize = bufferSize;
          _this.buffer = [];
          return _this;
        }
        BufferCountSubscriber2.prototype._next = function (value) {
          var buffer = this.buffer;
          buffer.push(value);
          if (buffer.length == this.bufferSize) {
            this.destination.next(buffer);
            this.buffer = [];
          }
        };
        BufferCountSubscriber2.prototype._complete = function () {
          var buffer = this.buffer;
          if (buffer.length > 0) {
            this.destination.next(buffer);
          }
          _super.prototype._complete.call(this);
        };
        return BufferCountSubscriber2;
      })(Subscriber_1.Subscriber);
      var BufferSkipCountSubscriber = (function (_super) {
        __extends2(BufferSkipCountSubscriber2, _super);
        function BufferSkipCountSubscriber2(
          destination,
          bufferSize,
          startBufferEvery,
        ) {
          var _this = _super.call(this, destination) || this;
          _this.bufferSize = bufferSize;
          _this.startBufferEvery = startBufferEvery;
          _this.buffers = [];
          _this.count = 0;
          return _this;
        }
        BufferSkipCountSubscriber2.prototype._next = function (value) {
          var _a = this,
            bufferSize = _a.bufferSize,
            startBufferEvery = _a.startBufferEvery,
            buffers = _a.buffers,
            count = _a.count;
          this.count++;
          if (count % startBufferEvery === 0) {
            buffers.push([]);
          }
          for (var i = buffers.length; i--; ) {
            var buffer = buffers[i];
            buffer.push(value);
            if (buffer.length === bufferSize) {
              buffers.splice(i, 1);
              this.destination.next(buffer);
            }
          }
        };
        BufferSkipCountSubscriber2.prototype._complete = function () {
          var _a = this,
            buffers = _a.buffers,
            destination = _a.destination;
          while (buffers.length > 0) {
            var buffer = buffers.shift();
            if (buffer.length > 0) {
              destination.next(buffer);
            }
          }
          _super.prototype._complete.call(this);
        };
        return BufferSkipCountSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/bufferTime.js
  var require_bufferTime = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/bufferTime.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var async_1 = require_async();
      var Subscriber_1 = require_Subscriber();
      var isScheduler_1 = require_isScheduler();
      function bufferTime(bufferTimeSpan) {
        var length = arguments.length;
        var scheduler = async_1.async;
        if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {
          scheduler = arguments[arguments.length - 1];
          length--;
        }
        var bufferCreationInterval = null;
        if (length >= 2) {
          bufferCreationInterval = arguments[1];
        }
        var maxBufferSize = Number.POSITIVE_INFINITY;
        if (length >= 3) {
          maxBufferSize = arguments[2];
        }
        return function bufferTimeOperatorFunction(source) {
          return source.lift(
            new BufferTimeOperator(
              bufferTimeSpan,
              bufferCreationInterval,
              maxBufferSize,
              scheduler,
            ),
          );
        };
      }
      exports.bufferTime = bufferTime;
      var BufferTimeOperator = (function () {
        function BufferTimeOperator2(
          bufferTimeSpan,
          bufferCreationInterval,
          maxBufferSize,
          scheduler,
        ) {
          this.bufferTimeSpan = bufferTimeSpan;
          this.bufferCreationInterval = bufferCreationInterval;
          this.maxBufferSize = maxBufferSize;
          this.scheduler = scheduler;
        }
        BufferTimeOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new BufferTimeSubscriber(
              subscriber,
              this.bufferTimeSpan,
              this.bufferCreationInterval,
              this.maxBufferSize,
              this.scheduler,
            ),
          );
        };
        return BufferTimeOperator2;
      })();
      var Context = (function () {
        function Context2() {
          this.buffer = [];
        }
        return Context2;
      })();
      var BufferTimeSubscriber = (function (_super) {
        __extends2(BufferTimeSubscriber2, _super);
        function BufferTimeSubscriber2(
          destination,
          bufferTimeSpan,
          bufferCreationInterval,
          maxBufferSize,
          scheduler,
        ) {
          var _this = _super.call(this, destination) || this;
          _this.bufferTimeSpan = bufferTimeSpan;
          _this.bufferCreationInterval = bufferCreationInterval;
          _this.maxBufferSize = maxBufferSize;
          _this.scheduler = scheduler;
          _this.contexts = [];
          var context2 = _this.openContext();
          _this.timespanOnly =
            bufferCreationInterval == null || bufferCreationInterval < 0;
          if (_this.timespanOnly) {
            var timeSpanOnlyState = {
              subscriber: _this,
              context: context2,
              bufferTimeSpan,
            };
            _this.add(
              (context2.closeAction = scheduler.schedule(
                dispatchBufferTimeSpanOnly,
                bufferTimeSpan,
                timeSpanOnlyState,
              )),
            );
          } else {
            var closeState = { subscriber: _this, context: context2 };
            var creationState = {
              bufferTimeSpan,
              bufferCreationInterval,
              subscriber: _this,
              scheduler,
            };
            _this.add(
              (context2.closeAction = scheduler.schedule(
                dispatchBufferClose,
                bufferTimeSpan,
                closeState,
              )),
            );
            _this.add(
              scheduler.schedule(
                dispatchBufferCreation,
                bufferCreationInterval,
                creationState,
              ),
            );
          }
          return _this;
        }
        BufferTimeSubscriber2.prototype._next = function (value) {
          var contexts = this.contexts;
          var len = contexts.length;
          var filledBufferContext;
          for (var i = 0; i < len; i++) {
            var context_1 = contexts[i];
            var buffer = context_1.buffer;
            buffer.push(value);
            if (buffer.length == this.maxBufferSize) {
              filledBufferContext = context_1;
            }
          }
          if (filledBufferContext) {
            this.onBufferFull(filledBufferContext);
          }
        };
        BufferTimeSubscriber2.prototype._error = function (err) {
          this.contexts.length = 0;
          _super.prototype._error.call(this, err);
        };
        BufferTimeSubscriber2.prototype._complete = function () {
          var _a = this,
            contexts = _a.contexts,
            destination = _a.destination;
          while (contexts.length > 0) {
            var context_2 = contexts.shift();
            destination.next(context_2.buffer);
          }
          _super.prototype._complete.call(this);
        };
        BufferTimeSubscriber2.prototype._unsubscribe = function () {
          this.contexts = null;
        };
        BufferTimeSubscriber2.prototype.onBufferFull = function (context2) {
          this.closeContext(context2);
          var closeAction = context2.closeAction;
          closeAction.unsubscribe();
          this.remove(closeAction);
          if (!this.closed && this.timespanOnly) {
            context2 = this.openContext();
            var bufferTimeSpan = this.bufferTimeSpan;
            var timeSpanOnlyState = {
              subscriber: this,
              context: context2,
              bufferTimeSpan,
            };
            this.add(
              (context2.closeAction = this.scheduler.schedule(
                dispatchBufferTimeSpanOnly,
                bufferTimeSpan,
                timeSpanOnlyState,
              )),
            );
          }
        };
        BufferTimeSubscriber2.prototype.openContext = function () {
          var context2 = new Context();
          this.contexts.push(context2);
          return context2;
        };
        BufferTimeSubscriber2.prototype.closeContext = function (context2) {
          this.destination.next(context2.buffer);
          var contexts = this.contexts;
          var spliceIndex = contexts ? contexts.indexOf(context2) : -1;
          if (spliceIndex >= 0) {
            contexts.splice(contexts.indexOf(context2), 1);
          }
        };
        return BufferTimeSubscriber2;
      })(Subscriber_1.Subscriber);
      function dispatchBufferTimeSpanOnly(state) {
        var subscriber = state.subscriber;
        var prevContext = state.context;
        if (prevContext) {
          subscriber.closeContext(prevContext);
        }
        if (!subscriber.closed) {
          state.context = subscriber.openContext();
          state.context.closeAction = this.schedule(
            state,
            state.bufferTimeSpan,
          );
        }
      }
      function dispatchBufferCreation(state) {
        var bufferCreationInterval = state.bufferCreationInterval,
          bufferTimeSpan = state.bufferTimeSpan,
          subscriber = state.subscriber,
          scheduler = state.scheduler;
        var context2 = subscriber.openContext();
        var action = this;
        if (!subscriber.closed) {
          subscriber.add(
            (context2.closeAction = scheduler.schedule(
              dispatchBufferClose,
              bufferTimeSpan,
              { subscriber, context: context2 },
            )),
          );
          action.schedule(state, bufferCreationInterval);
        }
      }
      function dispatchBufferClose(arg) {
        var subscriber = arg.subscriber,
          context2 = arg.context;
        subscriber.closeContext(context2);
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/bufferToggle.js
  var require_bufferToggle = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/bufferToggle.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscription_1 = require_Subscription();
      var subscribeToResult_1 = require_subscribeToResult();
      var OuterSubscriber_1 = require_OuterSubscriber();
      function bufferToggle(openings, closingSelector) {
        return function bufferToggleOperatorFunction(source) {
          return source.lift(
            new BufferToggleOperator(openings, closingSelector),
          );
        };
      }
      exports.bufferToggle = bufferToggle;
      var BufferToggleOperator = (function () {
        function BufferToggleOperator2(openings, closingSelector) {
          this.openings = openings;
          this.closingSelector = closingSelector;
        }
        BufferToggleOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new BufferToggleSubscriber(
              subscriber,
              this.openings,
              this.closingSelector,
            ),
          );
        };
        return BufferToggleOperator2;
      })();
      var BufferToggleSubscriber = (function (_super) {
        __extends2(BufferToggleSubscriber2, _super);
        function BufferToggleSubscriber2(
          destination,
          openings,
          closingSelector,
        ) {
          var _this = _super.call(this, destination) || this;
          _this.closingSelector = closingSelector;
          _this.contexts = [];
          _this.add(subscribeToResult_1.subscribeToResult(_this, openings));
          return _this;
        }
        BufferToggleSubscriber2.prototype._next = function (value) {
          var contexts = this.contexts;
          var len = contexts.length;
          for (var i = 0; i < len; i++) {
            contexts[i].buffer.push(value);
          }
        };
        BufferToggleSubscriber2.prototype._error = function (err) {
          var contexts = this.contexts;
          while (contexts.length > 0) {
            var context_1 = contexts.shift();
            context_1.subscription.unsubscribe();
            context_1.buffer = null;
            context_1.subscription = null;
          }
          this.contexts = null;
          _super.prototype._error.call(this, err);
        };
        BufferToggleSubscriber2.prototype._complete = function () {
          var contexts = this.contexts;
          while (contexts.length > 0) {
            var context_2 = contexts.shift();
            this.destination.next(context_2.buffer);
            context_2.subscription.unsubscribe();
            context_2.buffer = null;
            context_2.subscription = null;
          }
          this.contexts = null;
          _super.prototype._complete.call(this);
        };
        BufferToggleSubscriber2.prototype.notifyNext = function (
          outerValue,
          innerValue,
        ) {
          outerValue
            ? this.closeBuffer(outerValue)
            : this.openBuffer(innerValue);
        };
        BufferToggleSubscriber2.prototype.notifyComplete = function (innerSub) {
          this.closeBuffer(innerSub.context);
        };
        BufferToggleSubscriber2.prototype.openBuffer = function (value) {
          try {
            var closingSelector = this.closingSelector;
            var closingNotifier = closingSelector.call(this, value);
            if (closingNotifier) {
              this.trySubscribe(closingNotifier);
            }
          } catch (err) {
            this._error(err);
          }
        };
        BufferToggleSubscriber2.prototype.closeBuffer = function (context2) {
          var contexts = this.contexts;
          if (contexts && context2) {
            var buffer = context2.buffer,
              subscription = context2.subscription;
            this.destination.next(buffer);
            contexts.splice(contexts.indexOf(context2), 1);
            this.remove(subscription);
            subscription.unsubscribe();
          }
        };
        BufferToggleSubscriber2.prototype.trySubscribe = function (
          closingNotifier,
        ) {
          var contexts = this.contexts;
          var buffer = [];
          var subscription = new Subscription_1.Subscription();
          var context2 = { buffer, subscription };
          contexts.push(context2);
          var innerSubscription = subscribeToResult_1.subscribeToResult(
            this,
            closingNotifier,
            context2,
          );
          if (!innerSubscription || innerSubscription.closed) {
            this.closeBuffer(context2);
          } else {
            innerSubscription.context = context2;
            this.add(innerSubscription);
            subscription.add(innerSubscription);
          }
        };
        return BufferToggleSubscriber2;
      })(OuterSubscriber_1.OuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/bufferWhen.js
  var require_bufferWhen = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/bufferWhen.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscription_1 = require_Subscription();
      var innerSubscribe_1 = require_innerSubscribe();
      function bufferWhen(closingSelector) {
        return function (source) {
          return source.lift(new BufferWhenOperator(closingSelector));
        };
      }
      exports.bufferWhen = bufferWhen;
      var BufferWhenOperator = (function () {
        function BufferWhenOperator2(closingSelector) {
          this.closingSelector = closingSelector;
        }
        BufferWhenOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new BufferWhenSubscriber(subscriber, this.closingSelector),
          );
        };
        return BufferWhenOperator2;
      })();
      var BufferWhenSubscriber = (function (_super) {
        __extends2(BufferWhenSubscriber2, _super);
        function BufferWhenSubscriber2(destination, closingSelector) {
          var _this = _super.call(this, destination) || this;
          _this.closingSelector = closingSelector;
          _this.subscribing = false;
          _this.openBuffer();
          return _this;
        }
        BufferWhenSubscriber2.prototype._next = function (value) {
          this.buffer.push(value);
        };
        BufferWhenSubscriber2.prototype._complete = function () {
          var buffer = this.buffer;
          if (buffer) {
            this.destination.next(buffer);
          }
          _super.prototype._complete.call(this);
        };
        BufferWhenSubscriber2.prototype._unsubscribe = function () {
          this.buffer = void 0;
          this.subscribing = false;
        };
        BufferWhenSubscriber2.prototype.notifyNext = function () {
          this.openBuffer();
        };
        BufferWhenSubscriber2.prototype.notifyComplete = function () {
          if (this.subscribing) {
            this.complete();
          } else {
            this.openBuffer();
          }
        };
        BufferWhenSubscriber2.prototype.openBuffer = function () {
          var closingSubscription = this.closingSubscription;
          if (closingSubscription) {
            this.remove(closingSubscription);
            closingSubscription.unsubscribe();
          }
          var buffer = this.buffer;
          if (this.buffer) {
            this.destination.next(buffer);
          }
          this.buffer = [];
          var closingNotifier;
          try {
            var closingSelector = this.closingSelector;
            closingNotifier = closingSelector();
          } catch (err) {
            return this.error(err);
          }
          closingSubscription = new Subscription_1.Subscription();
          this.closingSubscription = closingSubscription;
          this.add(closingSubscription);
          this.subscribing = true;
          closingSubscription.add(
            innerSubscribe_1.innerSubscribe(
              closingNotifier,
              new innerSubscribe_1.SimpleInnerSubscriber(this),
            ),
          );
          this.subscribing = false;
        };
        return BufferWhenSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/catchError.js
  var require_catchError = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/catchError.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var innerSubscribe_1 = require_innerSubscribe();
      function catchError(selector) {
        return function catchErrorOperatorFunction(source) {
          var operator = new CatchOperator(selector);
          var caught = source.lift(operator);
          return (operator.caught = caught);
        };
      }
      exports.catchError = catchError;
      var CatchOperator = (function () {
        function CatchOperator2(selector) {
          this.selector = selector;
        }
        CatchOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new CatchSubscriber(subscriber, this.selector, this.caught),
          );
        };
        return CatchOperator2;
      })();
      var CatchSubscriber = (function (_super) {
        __extends2(CatchSubscriber2, _super);
        function CatchSubscriber2(destination, selector, caught) {
          var _this = _super.call(this, destination) || this;
          _this.selector = selector;
          _this.caught = caught;
          return _this;
        }
        CatchSubscriber2.prototype.error = function (err) {
          if (!this.isStopped) {
            var result = void 0;
            try {
              result = this.selector(err, this.caught);
            } catch (err2) {
              _super.prototype.error.call(this, err2);
              return;
            }
            this._unsubscribeAndRecycle();
            var innerSubscriber = new innerSubscribe_1.SimpleInnerSubscriber(
              this,
            );
            this.add(innerSubscriber);
            var innerSubscription = innerSubscribe_1.innerSubscribe(
              result,
              innerSubscriber,
            );
            if (innerSubscription !== innerSubscriber) {
              this.add(innerSubscription);
            }
          }
        };
        return CatchSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/combineAll.js
  var require_combineAll = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/combineAll.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var combineLatest_1 = require_combineLatest();
      function combineAll(project) {
        return function (source) {
          return source.lift(
            new combineLatest_1.CombineLatestOperator(project),
          );
        };
      }
      exports.combineAll = combineAll;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/combineLatest.js
  var require_combineLatest2 = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/combineLatest.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var isArray_1 = require_isArray();
      var combineLatest_1 = require_combineLatest();
      var from_1 = require_from();
      function combineLatest() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          observables[_i] = arguments[_i];
        }
        var project = null;
        if (typeof observables[observables.length - 1] === 'function') {
          project = observables.pop();
        }
        if (observables.length === 1 && isArray_1.isArray(observables[0])) {
          observables = observables[0].slice();
        }
        return function (source) {
          return source.lift.call(
            from_1.from([source].concat(observables)),
            new combineLatest_1.CombineLatestOperator(project),
          );
        };
      }
      exports.combineLatest = combineLatest;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/concat.js
  var require_concat2 = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/concat.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var concat_1 = require_concat();
      function concat() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          observables[_i] = arguments[_i];
        }
        return function (source) {
          return source.lift.call(
            concat_1.concat.apply(void 0, [source].concat(observables)),
          );
        };
      }
      exports.concat = concat;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/concatMap.js
  var require_concatMap = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/concatMap.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var mergeMap_1 = require_mergeMap();
      function concatMap(project, resultSelector) {
        return mergeMap_1.mergeMap(project, resultSelector, 1);
      }
      exports.concatMap = concatMap;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/concatMapTo.js
  var require_concatMapTo = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/concatMapTo.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var concatMap_1 = require_concatMap();
      function concatMapTo(innerObservable, resultSelector) {
        return concatMap_1.concatMap(function () {
          return innerObservable;
        }, resultSelector);
      }
      exports.concatMapTo = concatMapTo;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/count.js
  var require_count = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/count.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function count(predicate) {
        return function (source) {
          return source.lift(new CountOperator(predicate, source));
        };
      }
      exports.count = count;
      var CountOperator = (function () {
        function CountOperator2(predicate, source) {
          this.predicate = predicate;
          this.source = source;
        }
        CountOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new CountSubscriber(subscriber, this.predicate, this.source),
          );
        };
        return CountOperator2;
      })();
      var CountSubscriber = (function (_super) {
        __extends2(CountSubscriber2, _super);
        function CountSubscriber2(destination, predicate, source) {
          var _this = _super.call(this, destination) || this;
          _this.predicate = predicate;
          _this.source = source;
          _this.count = 0;
          _this.index = 0;
          return _this;
        }
        CountSubscriber2.prototype._next = function (value) {
          if (this.predicate) {
            this._tryPredicate(value);
          } else {
            this.count++;
          }
        };
        CountSubscriber2.prototype._tryPredicate = function (value) {
          var result;
          try {
            result = this.predicate(value, this.index++, this.source);
          } catch (err) {
            this.destination.error(err);
            return;
          }
          if (result) {
            this.count++;
          }
        };
        CountSubscriber2.prototype._complete = function () {
          this.destination.next(this.count);
          this.destination.complete();
        };
        return CountSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/debounce.js
  var require_debounce = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/debounce.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var innerSubscribe_1 = require_innerSubscribe();
      function debounce(durationSelector) {
        return function (source) {
          return source.lift(new DebounceOperator(durationSelector));
        };
      }
      exports.debounce = debounce;
      var DebounceOperator = (function () {
        function DebounceOperator2(durationSelector) {
          this.durationSelector = durationSelector;
        }
        DebounceOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new DebounceSubscriber(subscriber, this.durationSelector),
          );
        };
        return DebounceOperator2;
      })();
      var DebounceSubscriber = (function (_super) {
        __extends2(DebounceSubscriber2, _super);
        function DebounceSubscriber2(destination, durationSelector) {
          var _this = _super.call(this, destination) || this;
          _this.durationSelector = durationSelector;
          _this.hasValue = false;
          return _this;
        }
        DebounceSubscriber2.prototype._next = function (value) {
          try {
            var result = this.durationSelector.call(this, value);
            if (result) {
              this._tryNext(value, result);
            }
          } catch (err) {
            this.destination.error(err);
          }
        };
        DebounceSubscriber2.prototype._complete = function () {
          this.emitValue();
          this.destination.complete();
        };
        DebounceSubscriber2.prototype._tryNext = function (value, duration) {
          var subscription = this.durationSubscription;
          this.value = value;
          this.hasValue = true;
          if (subscription) {
            subscription.unsubscribe();
            this.remove(subscription);
          }
          subscription = innerSubscribe_1.innerSubscribe(
            duration,
            new innerSubscribe_1.SimpleInnerSubscriber(this),
          );
          if (subscription && !subscription.closed) {
            this.add((this.durationSubscription = subscription));
          }
        };
        DebounceSubscriber2.prototype.notifyNext = function () {
          this.emitValue();
        };
        DebounceSubscriber2.prototype.notifyComplete = function () {
          this.emitValue();
        };
        DebounceSubscriber2.prototype.emitValue = function () {
          if (this.hasValue) {
            var value = this.value;
            var subscription = this.durationSubscription;
            if (subscription) {
              this.durationSubscription = void 0;
              subscription.unsubscribe();
              this.remove(subscription);
            }
            this.value = void 0;
            this.hasValue = false;
            _super.prototype._next.call(this, value);
          }
        };
        return DebounceSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/debounceTime.js
  var require_debounceTime = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/debounceTime.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var async_1 = require_async();
      function debounceTime(dueTime, scheduler) {
        if (scheduler === void 0) {
          scheduler = async_1.async;
        }
        return function (source) {
          return source.lift(new DebounceTimeOperator(dueTime, scheduler));
        };
      }
      exports.debounceTime = debounceTime;
      var DebounceTimeOperator = (function () {
        function DebounceTimeOperator2(dueTime, scheduler) {
          this.dueTime = dueTime;
          this.scheduler = scheduler;
        }
        DebounceTimeOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new DebounceTimeSubscriber(
              subscriber,
              this.dueTime,
              this.scheduler,
            ),
          );
        };
        return DebounceTimeOperator2;
      })();
      var DebounceTimeSubscriber = (function (_super) {
        __extends2(DebounceTimeSubscriber2, _super);
        function DebounceTimeSubscriber2(destination, dueTime, scheduler) {
          var _this = _super.call(this, destination) || this;
          _this.dueTime = dueTime;
          _this.scheduler = scheduler;
          _this.debouncedSubscription = null;
          _this.lastValue = null;
          _this.hasValue = false;
          return _this;
        }
        DebounceTimeSubscriber2.prototype._next = function (value) {
          this.clearDebounce();
          this.lastValue = value;
          this.hasValue = true;
          this.add(
            (this.debouncedSubscription = this.scheduler.schedule(
              dispatchNext,
              this.dueTime,
              this,
            )),
          );
        };
        DebounceTimeSubscriber2.prototype._complete = function () {
          this.debouncedNext();
          this.destination.complete();
        };
        DebounceTimeSubscriber2.prototype.debouncedNext = function () {
          this.clearDebounce();
          if (this.hasValue) {
            var lastValue = this.lastValue;
            this.lastValue = null;
            this.hasValue = false;
            this.destination.next(lastValue);
          }
        };
        DebounceTimeSubscriber2.prototype.clearDebounce = function () {
          var debouncedSubscription = this.debouncedSubscription;
          if (debouncedSubscription !== null) {
            this.remove(debouncedSubscription);
            debouncedSubscription.unsubscribe();
            this.debouncedSubscription = null;
          }
        };
        return DebounceTimeSubscriber2;
      })(Subscriber_1.Subscriber);
      function dispatchNext(subscriber) {
        subscriber.debouncedNext();
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/defaultIfEmpty.js
  var require_defaultIfEmpty = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/defaultIfEmpty.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function defaultIfEmpty(defaultValue) {
        if (defaultValue === void 0) {
          defaultValue = null;
        }
        return function (source) {
          return source.lift(new DefaultIfEmptyOperator(defaultValue));
        };
      }
      exports.defaultIfEmpty = defaultIfEmpty;
      var DefaultIfEmptyOperator = (function () {
        function DefaultIfEmptyOperator2(defaultValue) {
          this.defaultValue = defaultValue;
        }
        DefaultIfEmptyOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new DefaultIfEmptySubscriber(subscriber, this.defaultValue),
          );
        };
        return DefaultIfEmptyOperator2;
      })();
      var DefaultIfEmptySubscriber = (function (_super) {
        __extends2(DefaultIfEmptySubscriber2, _super);
        function DefaultIfEmptySubscriber2(destination, defaultValue) {
          var _this = _super.call(this, destination) || this;
          _this.defaultValue = defaultValue;
          _this.isEmpty = true;
          return _this;
        }
        DefaultIfEmptySubscriber2.prototype._next = function (value) {
          this.isEmpty = false;
          this.destination.next(value);
        };
        DefaultIfEmptySubscriber2.prototype._complete = function () {
          if (this.isEmpty) {
            this.destination.next(this.defaultValue);
          }
          this.destination.complete();
        };
        return DefaultIfEmptySubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/util/isDate.js
  var require_isDate = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/util/isDate.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      function isDate(value) {
        return value instanceof Date && !isNaN(+value);
      }
      exports.isDate = isDate;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/delay.js
  var require_delay = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/delay.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var async_1 = require_async();
      var isDate_1 = require_isDate();
      var Subscriber_1 = require_Subscriber();
      var Notification_1 = require_Notification();
      function delay(delay2, scheduler) {
        if (scheduler === void 0) {
          scheduler = async_1.async;
        }
        var absoluteDelay = isDate_1.isDate(delay2);
        var delayFor = absoluteDelay
          ? +delay2 - scheduler.now()
          : Math.abs(delay2);
        return function (source) {
          return source.lift(new DelayOperator(delayFor, scheduler));
        };
      }
      exports.delay = delay;
      var DelayOperator = (function () {
        function DelayOperator2(delay2, scheduler) {
          this.delay = delay2;
          this.scheduler = scheduler;
        }
        DelayOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new DelaySubscriber(subscriber, this.delay, this.scheduler),
          );
        };
        return DelayOperator2;
      })();
      var DelaySubscriber = (function (_super) {
        __extends2(DelaySubscriber2, _super);
        function DelaySubscriber2(destination, delay2, scheduler) {
          var _this = _super.call(this, destination) || this;
          _this.delay = delay2;
          _this.scheduler = scheduler;
          _this.queue = [];
          _this.active = false;
          _this.errored = false;
          return _this;
        }
        DelaySubscriber2.dispatch = function (state) {
          var source = state.source;
          var queue = source.queue;
          var scheduler = state.scheduler;
          var destination = state.destination;
          while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {
            queue.shift().notification.observe(destination);
          }
          if (queue.length > 0) {
            var delay_1 = Math.max(0, queue[0].time - scheduler.now());
            this.schedule(state, delay_1);
          } else {
            this.unsubscribe();
            source.active = false;
          }
        };
        DelaySubscriber2.prototype._schedule = function (scheduler) {
          this.active = true;
          var destination = this.destination;
          destination.add(
            scheduler.schedule(DelaySubscriber2.dispatch, this.delay, {
              source: this,
              destination: this.destination,
              scheduler,
            }),
          );
        };
        DelaySubscriber2.prototype.scheduleNotification = function (
          notification,
        ) {
          if (this.errored === true) {
            return;
          }
          var scheduler = this.scheduler;
          var message = new DelayMessage(
            scheduler.now() + this.delay,
            notification,
          );
          this.queue.push(message);
          if (this.active === false) {
            this._schedule(scheduler);
          }
        };
        DelaySubscriber2.prototype._next = function (value) {
          this.scheduleNotification(
            Notification_1.Notification.createNext(value),
          );
        };
        DelaySubscriber2.prototype._error = function (err) {
          this.errored = true;
          this.queue = [];
          this.destination.error(err);
          this.unsubscribe();
        };
        DelaySubscriber2.prototype._complete = function () {
          this.scheduleNotification(
            Notification_1.Notification.createComplete(),
          );
          this.unsubscribe();
        };
        return DelaySubscriber2;
      })(Subscriber_1.Subscriber);
      var DelayMessage = (function () {
        function DelayMessage2(time, notification) {
          this.time = time;
          this.notification = notification;
        }
        return DelayMessage2;
      })();
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/delayWhen.js
  var require_delayWhen = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/delayWhen.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var Observable_1 = require_Observable();
      var OuterSubscriber_1 = require_OuterSubscriber();
      var subscribeToResult_1 = require_subscribeToResult();
      function delayWhen(delayDurationSelector, subscriptionDelay) {
        if (subscriptionDelay) {
          return function (source) {
            return new SubscriptionDelayObservable(
              source,
              subscriptionDelay,
            ).lift(new DelayWhenOperator(delayDurationSelector));
          };
        }
        return function (source) {
          return source.lift(new DelayWhenOperator(delayDurationSelector));
        };
      }
      exports.delayWhen = delayWhen;
      var DelayWhenOperator = (function () {
        function DelayWhenOperator2(delayDurationSelector) {
          this.delayDurationSelector = delayDurationSelector;
        }
        DelayWhenOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new DelayWhenSubscriber(subscriber, this.delayDurationSelector),
          );
        };
        return DelayWhenOperator2;
      })();
      var DelayWhenSubscriber = (function (_super) {
        __extends2(DelayWhenSubscriber2, _super);
        function DelayWhenSubscriber2(destination, delayDurationSelector) {
          var _this = _super.call(this, destination) || this;
          _this.delayDurationSelector = delayDurationSelector;
          _this.completed = false;
          _this.delayNotifierSubscriptions = [];
          _this.index = 0;
          return _this;
        }
        DelayWhenSubscriber2.prototype.notifyNext = function (
          outerValue,
          _innerValue,
          _outerIndex,
          _innerIndex,
          innerSub,
        ) {
          this.destination.next(outerValue);
          this.removeSubscription(innerSub);
          this.tryComplete();
        };
        DelayWhenSubscriber2.prototype.notifyError = function (
          error,
          innerSub,
        ) {
          this._error(error);
        };
        DelayWhenSubscriber2.prototype.notifyComplete = function (innerSub) {
          var value = this.removeSubscription(innerSub);
          if (value) {
            this.destination.next(value);
          }
          this.tryComplete();
        };
        DelayWhenSubscriber2.prototype._next = function (value) {
          var index = this.index++;
          try {
            var delayNotifier = this.delayDurationSelector(value, index);
            if (delayNotifier) {
              this.tryDelay(delayNotifier, value);
            }
          } catch (err) {
            this.destination.error(err);
          }
        };
        DelayWhenSubscriber2.prototype._complete = function () {
          this.completed = true;
          this.tryComplete();
          this.unsubscribe();
        };
        DelayWhenSubscriber2.prototype.removeSubscription = function (
          subscription,
        ) {
          subscription.unsubscribe();
          var subscriptionIdx =
            this.delayNotifierSubscriptions.indexOf(subscription);
          if (subscriptionIdx !== -1) {
            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
          }
          return subscription.outerValue;
        };
        DelayWhenSubscriber2.prototype.tryDelay = function (
          delayNotifier,
          value,
        ) {
          var notifierSubscription = subscribeToResult_1.subscribeToResult(
            this,
            delayNotifier,
            value,
          );
          if (notifierSubscription && !notifierSubscription.closed) {
            var destination = this.destination;
            destination.add(notifierSubscription);
            this.delayNotifierSubscriptions.push(notifierSubscription);
          }
        };
        DelayWhenSubscriber2.prototype.tryComplete = function () {
          if (this.completed && this.delayNotifierSubscriptions.length === 0) {
            this.destination.complete();
          }
        };
        return DelayWhenSubscriber2;
      })(OuterSubscriber_1.OuterSubscriber);
      var SubscriptionDelayObservable = (function (_super) {
        __extends2(SubscriptionDelayObservable2, _super);
        function SubscriptionDelayObservable2(source, subscriptionDelay) {
          var _this = _super.call(this) || this;
          _this.source = source;
          _this.subscriptionDelay = subscriptionDelay;
          return _this;
        }
        SubscriptionDelayObservable2.prototype._subscribe = function (
          subscriber,
        ) {
          this.subscriptionDelay.subscribe(
            new SubscriptionDelaySubscriber(subscriber, this.source),
          );
        };
        return SubscriptionDelayObservable2;
      })(Observable_1.Observable);
      var SubscriptionDelaySubscriber = (function (_super) {
        __extends2(SubscriptionDelaySubscriber2, _super);
        function SubscriptionDelaySubscriber2(parent, source) {
          var _this = _super.call(this) || this;
          _this.parent = parent;
          _this.source = source;
          _this.sourceSubscribed = false;
          return _this;
        }
        SubscriptionDelaySubscriber2.prototype._next = function (unused) {
          this.subscribeToSource();
        };
        SubscriptionDelaySubscriber2.prototype._error = function (err) {
          this.unsubscribe();
          this.parent.error(err);
        };
        SubscriptionDelaySubscriber2.prototype._complete = function () {
          this.unsubscribe();
          this.subscribeToSource();
        };
        SubscriptionDelaySubscriber2.prototype.subscribeToSource = function () {
          if (!this.sourceSubscribed) {
            this.sourceSubscribed = true;
            this.unsubscribe();
            this.source.subscribe(this.parent);
          }
        };
        return SubscriptionDelaySubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/dematerialize.js
  var require_dematerialize = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/dematerialize.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function dematerialize() {
        return function dematerializeOperatorFunction(source) {
          return source.lift(new DeMaterializeOperator());
        };
      }
      exports.dematerialize = dematerialize;
      var DeMaterializeOperator = (function () {
        function DeMaterializeOperator2() {}
        DeMaterializeOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(new DeMaterializeSubscriber(subscriber));
        };
        return DeMaterializeOperator2;
      })();
      var DeMaterializeSubscriber = (function (_super) {
        __extends2(DeMaterializeSubscriber2, _super);
        function DeMaterializeSubscriber2(destination) {
          return _super.call(this, destination) || this;
        }
        DeMaterializeSubscriber2.prototype._next = function (value) {
          value.observe(this.destination);
        };
        return DeMaterializeSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/distinct.js
  var require_distinct = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/distinct.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var innerSubscribe_1 = require_innerSubscribe();
      function distinct(keySelector, flushes) {
        return function (source) {
          return source.lift(new DistinctOperator(keySelector, flushes));
        };
      }
      exports.distinct = distinct;
      var DistinctOperator = (function () {
        function DistinctOperator2(keySelector, flushes) {
          this.keySelector = keySelector;
          this.flushes = flushes;
        }
        DistinctOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new DistinctSubscriber(subscriber, this.keySelector, this.flushes),
          );
        };
        return DistinctOperator2;
      })();
      var DistinctSubscriber = (function (_super) {
        __extends2(DistinctSubscriber2, _super);
        function DistinctSubscriber2(destination, keySelector, flushes) {
          var _this = _super.call(this, destination) || this;
          _this.keySelector = keySelector;
          _this.values = /* @__PURE__ */ new Set();
          if (flushes) {
            _this.add(
              innerSubscribe_1.innerSubscribe(
                flushes,
                new innerSubscribe_1.SimpleInnerSubscriber(_this),
              ),
            );
          }
          return _this;
        }
        DistinctSubscriber2.prototype.notifyNext = function () {
          this.values.clear();
        };
        DistinctSubscriber2.prototype.notifyError = function (error) {
          this._error(error);
        };
        DistinctSubscriber2.prototype._next = function (value) {
          if (this.keySelector) {
            this._useKeySelector(value);
          } else {
            this._finalizeNext(value, value);
          }
        };
        DistinctSubscriber2.prototype._useKeySelector = function (value) {
          var key;
          var destination = this.destination;
          try {
            key = this.keySelector(value);
          } catch (err) {
            destination.error(err);
            return;
          }
          this._finalizeNext(key, value);
        };
        DistinctSubscriber2.prototype._finalizeNext = function (key, value) {
          var values = this.values;
          if (!values.has(key)) {
            values.add(key);
            this.destination.next(value);
          }
        };
        return DistinctSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
      exports.DistinctSubscriber = DistinctSubscriber;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/distinctUntilChanged.js
  var require_distinctUntilChanged = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/distinctUntilChanged.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function distinctUntilChanged(compare, keySelector) {
        return function (source) {
          return source.lift(
            new DistinctUntilChangedOperator(compare, keySelector),
          );
        };
      }
      exports.distinctUntilChanged = distinctUntilChanged;
      var DistinctUntilChangedOperator = (function () {
        function DistinctUntilChangedOperator2(compare, keySelector) {
          this.compare = compare;
          this.keySelector = keySelector;
        }
        DistinctUntilChangedOperator2.prototype.call = function (
          subscriber,
          source,
        ) {
          return source.subscribe(
            new DistinctUntilChangedSubscriber(
              subscriber,
              this.compare,
              this.keySelector,
            ),
          );
        };
        return DistinctUntilChangedOperator2;
      })();
      var DistinctUntilChangedSubscriber = (function (_super) {
        __extends2(DistinctUntilChangedSubscriber2, _super);
        function DistinctUntilChangedSubscriber2(
          destination,
          compare,
          keySelector,
        ) {
          var _this = _super.call(this, destination) || this;
          _this.keySelector = keySelector;
          _this.hasKey = false;
          if (typeof compare === 'function') {
            _this.compare = compare;
          }
          return _this;
        }
        DistinctUntilChangedSubscriber2.prototype.compare = function (x, y) {
          return x === y;
        };
        DistinctUntilChangedSubscriber2.prototype._next = function (value) {
          var key;
          try {
            var keySelector = this.keySelector;
            key = keySelector ? keySelector(value) : value;
          } catch (err) {
            return this.destination.error(err);
          }
          var result = false;
          if (this.hasKey) {
            try {
              var compare = this.compare;
              result = compare(this.key, key);
            } catch (err) {
              return this.destination.error(err);
            }
          } else {
            this.hasKey = true;
          }
          if (!result) {
            this.key = key;
            this.destination.next(value);
          }
        };
        return DistinctUntilChangedSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/distinctUntilKeyChanged.js
  var require_distinctUntilKeyChanged = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/distinctUntilKeyChanged.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var distinctUntilChanged_1 = require_distinctUntilChanged();
      function distinctUntilKeyChanged(key, compare) {
        return distinctUntilChanged_1.distinctUntilChanged(function (x, y) {
          return compare ? compare(x[key], y[key]) : x[key] === y[key];
        });
      }
      exports.distinctUntilKeyChanged = distinctUntilKeyChanged;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/throwIfEmpty.js
  var require_throwIfEmpty = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/throwIfEmpty.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var EmptyError_1 = require_EmptyError();
      var Subscriber_1 = require_Subscriber();
      function throwIfEmpty(errorFactory) {
        if (errorFactory === void 0) {
          errorFactory = defaultErrorFactory;
        }
        return function (source) {
          return source.lift(new ThrowIfEmptyOperator(errorFactory));
        };
      }
      exports.throwIfEmpty = throwIfEmpty;
      var ThrowIfEmptyOperator = (function () {
        function ThrowIfEmptyOperator2(errorFactory) {
          this.errorFactory = errorFactory;
        }
        ThrowIfEmptyOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new ThrowIfEmptySubscriber(subscriber, this.errorFactory),
          );
        };
        return ThrowIfEmptyOperator2;
      })();
      var ThrowIfEmptySubscriber = (function (_super) {
        __extends2(ThrowIfEmptySubscriber2, _super);
        function ThrowIfEmptySubscriber2(destination, errorFactory) {
          var _this = _super.call(this, destination) || this;
          _this.errorFactory = errorFactory;
          _this.hasValue = false;
          return _this;
        }
        ThrowIfEmptySubscriber2.prototype._next = function (value) {
          this.hasValue = true;
          this.destination.next(value);
        };
        ThrowIfEmptySubscriber2.prototype._complete = function () {
          if (!this.hasValue) {
            var err = void 0;
            try {
              err = this.errorFactory();
            } catch (e) {
              err = e;
            }
            this.destination.error(err);
          } else {
            return this.destination.complete();
          }
        };
        return ThrowIfEmptySubscriber2;
      })(Subscriber_1.Subscriber);
      function defaultErrorFactory() {
        return new EmptyError_1.EmptyError();
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/take.js
  var require_take = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/take.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var ArgumentOutOfRangeError_1 = require_ArgumentOutOfRangeError();
      var empty_1 = require_empty();
      function take(count) {
        return function (source) {
          if (count === 0) {
            return empty_1.empty();
          } else {
            return source.lift(new TakeOperator(count));
          }
        };
      }
      exports.take = take;
      var TakeOperator = (function () {
        function TakeOperator2(total) {
          this.total = total;
          if (this.total < 0) {
            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
          }
        }
        TakeOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(new TakeSubscriber(subscriber, this.total));
        };
        return TakeOperator2;
      })();
      var TakeSubscriber = (function (_super) {
        __extends2(TakeSubscriber2, _super);
        function TakeSubscriber2(destination, total) {
          var _this = _super.call(this, destination) || this;
          _this.total = total;
          _this.count = 0;
          return _this;
        }
        TakeSubscriber2.prototype._next = function (value) {
          var total = this.total;
          var count = ++this.count;
          if (count <= total) {
            this.destination.next(value);
            if (count === total) {
              this.destination.complete();
              this.unsubscribe();
            }
          }
        };
        return TakeSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/elementAt.js
  var require_elementAt = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/elementAt.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var ArgumentOutOfRangeError_1 = require_ArgumentOutOfRangeError();
      var filter_1 = require_filter();
      var throwIfEmpty_1 = require_throwIfEmpty();
      var defaultIfEmpty_1 = require_defaultIfEmpty();
      var take_1 = require_take();
      function elementAt(index, defaultValue) {
        if (index < 0) {
          throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
        }
        var hasDefaultValue = arguments.length >= 2;
        return function (source) {
          return source.pipe(
            filter_1.filter(function (v, i) {
              return i === index;
            }),
            take_1.take(1),
            hasDefaultValue
              ? defaultIfEmpty_1.defaultIfEmpty(defaultValue)
              : throwIfEmpty_1.throwIfEmpty(function () {
                  return new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
                }),
          );
        };
      }
      exports.elementAt = elementAt;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/endWith.js
  var require_endWith = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/endWith.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var concat_1 = require_concat();
      var of_1 = require_of();
      function endWith() {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          array[_i] = arguments[_i];
        }
        return function (source) {
          return concat_1.concat(source, of_1.of.apply(void 0, array));
        };
      }
      exports.endWith = endWith;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/every.js
  var require_every = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/every.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function every(predicate, thisArg) {
        return function (source) {
          return source.lift(new EveryOperator(predicate, thisArg, source));
        };
      }
      exports.every = every;
      var EveryOperator = (function () {
        function EveryOperator2(predicate, thisArg, source) {
          this.predicate = predicate;
          this.thisArg = thisArg;
          this.source = source;
        }
        EveryOperator2.prototype.call = function (observer, source) {
          return source.subscribe(
            new EverySubscriber(
              observer,
              this.predicate,
              this.thisArg,
              this.source,
            ),
          );
        };
        return EveryOperator2;
      })();
      var EverySubscriber = (function (_super) {
        __extends2(EverySubscriber2, _super);
        function EverySubscriber2(destination, predicate, thisArg, source) {
          var _this = _super.call(this, destination) || this;
          _this.predicate = predicate;
          _this.thisArg = thisArg;
          _this.source = source;
          _this.index = 0;
          _this.thisArg = thisArg || _this;
          return _this;
        }
        EverySubscriber2.prototype.notifyComplete = function (everyValueMatch) {
          this.destination.next(everyValueMatch);
          this.destination.complete();
        };
        EverySubscriber2.prototype._next = function (value) {
          var result = false;
          try {
            result = this.predicate.call(
              this.thisArg,
              value,
              this.index++,
              this.source,
            );
          } catch (err) {
            this.destination.error(err);
            return;
          }
          if (!result) {
            this.notifyComplete(false);
          }
        };
        EverySubscriber2.prototype._complete = function () {
          this.notifyComplete(true);
        };
        return EverySubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/exhaust.js
  var require_exhaust = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/exhaust.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var innerSubscribe_1 = require_innerSubscribe();
      function exhaust() {
        return function (source) {
          return source.lift(new SwitchFirstOperator());
        };
      }
      exports.exhaust = exhaust;
      var SwitchFirstOperator = (function () {
        function SwitchFirstOperator2() {}
        SwitchFirstOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(new SwitchFirstSubscriber(subscriber));
        };
        return SwitchFirstOperator2;
      })();
      var SwitchFirstSubscriber = (function (_super) {
        __extends2(SwitchFirstSubscriber2, _super);
        function SwitchFirstSubscriber2(destination) {
          var _this = _super.call(this, destination) || this;
          _this.hasCompleted = false;
          _this.hasSubscription = false;
          return _this;
        }
        SwitchFirstSubscriber2.prototype._next = function (value) {
          if (!this.hasSubscription) {
            this.hasSubscription = true;
            this.add(
              innerSubscribe_1.innerSubscribe(
                value,
                new innerSubscribe_1.SimpleInnerSubscriber(this),
              ),
            );
          }
        };
        SwitchFirstSubscriber2.prototype._complete = function () {
          this.hasCompleted = true;
          if (!this.hasSubscription) {
            this.destination.complete();
          }
        };
        SwitchFirstSubscriber2.prototype.notifyComplete = function () {
          this.hasSubscription = false;
          if (this.hasCompleted) {
            this.destination.complete();
          }
        };
        return SwitchFirstSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/exhaustMap.js
  var require_exhaustMap = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/exhaustMap.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var map_1 = require_map();
      var from_1 = require_from();
      var innerSubscribe_1 = require_innerSubscribe();
      function exhaustMap(project, resultSelector) {
        if (resultSelector) {
          return function (source) {
            return source.pipe(
              exhaustMap(function (a, i) {
                return from_1.from(project(a, i)).pipe(
                  map_1.map(function (b, ii) {
                    return resultSelector(a, b, i, ii);
                  }),
                );
              }),
            );
          };
        }
        return function (source) {
          return source.lift(new ExhaustMapOperator(project));
        };
      }
      exports.exhaustMap = exhaustMap;
      var ExhaustMapOperator = (function () {
        function ExhaustMapOperator2(project) {
          this.project = project;
        }
        ExhaustMapOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new ExhaustMapSubscriber(subscriber, this.project),
          );
        };
        return ExhaustMapOperator2;
      })();
      var ExhaustMapSubscriber = (function (_super) {
        __extends2(ExhaustMapSubscriber2, _super);
        function ExhaustMapSubscriber2(destination, project) {
          var _this = _super.call(this, destination) || this;
          _this.project = project;
          _this.hasSubscription = false;
          _this.hasCompleted = false;
          _this.index = 0;
          return _this;
        }
        ExhaustMapSubscriber2.prototype._next = function (value) {
          if (!this.hasSubscription) {
            this.tryNext(value);
          }
        };
        ExhaustMapSubscriber2.prototype.tryNext = function (value) {
          var result;
          var index = this.index++;
          try {
            result = this.project(value, index);
          } catch (err) {
            this.destination.error(err);
            return;
          }
          this.hasSubscription = true;
          this._innerSub(result);
        };
        ExhaustMapSubscriber2.prototype._innerSub = function (result) {
          var innerSubscriber = new innerSubscribe_1.SimpleInnerSubscriber(
            this,
          );
          var destination = this.destination;
          destination.add(innerSubscriber);
          var innerSubscription = innerSubscribe_1.innerSubscribe(
            result,
            innerSubscriber,
          );
          if (innerSubscription !== innerSubscriber) {
            destination.add(innerSubscription);
          }
        };
        ExhaustMapSubscriber2.prototype._complete = function () {
          this.hasCompleted = true;
          if (!this.hasSubscription) {
            this.destination.complete();
          }
          this.unsubscribe();
        };
        ExhaustMapSubscriber2.prototype.notifyNext = function (innerValue) {
          this.destination.next(innerValue);
        };
        ExhaustMapSubscriber2.prototype.notifyError = function (err) {
          this.destination.error(err);
        };
        ExhaustMapSubscriber2.prototype.notifyComplete = function () {
          this.hasSubscription = false;
          if (this.hasCompleted) {
            this.destination.complete();
          }
        };
        return ExhaustMapSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/expand.js
  var require_expand = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/expand.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var innerSubscribe_1 = require_innerSubscribe();
      function expand(project, concurrent, scheduler) {
        if (concurrent === void 0) {
          concurrent = Number.POSITIVE_INFINITY;
        }
        concurrent =
          (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
        return function (source) {
          return source.lift(
            new ExpandOperator(project, concurrent, scheduler),
          );
        };
      }
      exports.expand = expand;
      var ExpandOperator = (function () {
        function ExpandOperator2(project, concurrent, scheduler) {
          this.project = project;
          this.concurrent = concurrent;
          this.scheduler = scheduler;
        }
        ExpandOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new ExpandSubscriber(
              subscriber,
              this.project,
              this.concurrent,
              this.scheduler,
            ),
          );
        };
        return ExpandOperator2;
      })();
      exports.ExpandOperator = ExpandOperator;
      var ExpandSubscriber = (function (_super) {
        __extends2(ExpandSubscriber2, _super);
        function ExpandSubscriber2(
          destination,
          project,
          concurrent,
          scheduler,
        ) {
          var _this = _super.call(this, destination) || this;
          _this.project = project;
          _this.concurrent = concurrent;
          _this.scheduler = scheduler;
          _this.index = 0;
          _this.active = 0;
          _this.hasCompleted = false;
          if (concurrent < Number.POSITIVE_INFINITY) {
            _this.buffer = [];
          }
          return _this;
        }
        ExpandSubscriber2.dispatch = function (arg) {
          var subscriber = arg.subscriber,
            result = arg.result,
            value = arg.value,
            index = arg.index;
          subscriber.subscribeToProjection(result, value, index);
        };
        ExpandSubscriber2.prototype._next = function (value) {
          var destination = this.destination;
          if (destination.closed) {
            this._complete();
            return;
          }
          var index = this.index++;
          if (this.active < this.concurrent) {
            destination.next(value);
            try {
              var project = this.project;
              var result = project(value, index);
              if (!this.scheduler) {
                this.subscribeToProjection(result, value, index);
              } else {
                var state = { subscriber: this, result, value, index };
                var destination_1 = this.destination;
                destination_1.add(
                  this.scheduler.schedule(ExpandSubscriber2.dispatch, 0, state),
                );
              }
            } catch (e) {
              destination.error(e);
            }
          } else {
            this.buffer.push(value);
          }
        };
        ExpandSubscriber2.prototype.subscribeToProjection = function (
          result,
          value,
          index,
        ) {
          this.active++;
          var destination = this.destination;
          destination.add(
            innerSubscribe_1.innerSubscribe(
              result,
              new innerSubscribe_1.SimpleInnerSubscriber(this),
            ),
          );
        };
        ExpandSubscriber2.prototype._complete = function () {
          this.hasCompleted = true;
          if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
          }
          this.unsubscribe();
        };
        ExpandSubscriber2.prototype.notifyNext = function (innerValue) {
          this._next(innerValue);
        };
        ExpandSubscriber2.prototype.notifyComplete = function () {
          var buffer = this.buffer;
          this.active--;
          if (buffer && buffer.length > 0) {
            this._next(buffer.shift());
          }
          if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
          }
        };
        return ExpandSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
      exports.ExpandSubscriber = ExpandSubscriber;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/finalize.js
  var require_finalize = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/finalize.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var Subscription_1 = require_Subscription();
      function finalize(callback) {
        return function (source) {
          return source.lift(new FinallyOperator(callback));
        };
      }
      exports.finalize = finalize;
      var FinallyOperator = (function () {
        function FinallyOperator2(callback) {
          this.callback = callback;
        }
        FinallyOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new FinallySubscriber(subscriber, this.callback),
          );
        };
        return FinallyOperator2;
      })();
      var FinallySubscriber = (function (_super) {
        __extends2(FinallySubscriber2, _super);
        function FinallySubscriber2(destination, callback) {
          var _this = _super.call(this, destination) || this;
          _this.add(new Subscription_1.Subscription(callback));
          return _this;
        }
        return FinallySubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/find.js
  var require_find = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/find.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function find(predicate, thisArg) {
        if (typeof predicate !== 'function') {
          throw new TypeError('predicate is not a function');
        }
        return function (source) {
          return source.lift(
            new FindValueOperator(predicate, source, false, thisArg),
          );
        };
      }
      exports.find = find;
      var FindValueOperator = (function () {
        function FindValueOperator2(predicate, source, yieldIndex, thisArg) {
          this.predicate = predicate;
          this.source = source;
          this.yieldIndex = yieldIndex;
          this.thisArg = thisArg;
        }
        FindValueOperator2.prototype.call = function (observer, source) {
          return source.subscribe(
            new FindValueSubscriber(
              observer,
              this.predicate,
              this.source,
              this.yieldIndex,
              this.thisArg,
            ),
          );
        };
        return FindValueOperator2;
      })();
      exports.FindValueOperator = FindValueOperator;
      var FindValueSubscriber = (function (_super) {
        __extends2(FindValueSubscriber2, _super);
        function FindValueSubscriber2(
          destination,
          predicate,
          source,
          yieldIndex,
          thisArg,
        ) {
          var _this = _super.call(this, destination) || this;
          _this.predicate = predicate;
          _this.source = source;
          _this.yieldIndex = yieldIndex;
          _this.thisArg = thisArg;
          _this.index = 0;
          return _this;
        }
        FindValueSubscriber2.prototype.notifyComplete = function (value) {
          var destination = this.destination;
          destination.next(value);
          destination.complete();
          this.unsubscribe();
        };
        FindValueSubscriber2.prototype._next = function (value) {
          var _a = this,
            predicate = _a.predicate,
            thisArg = _a.thisArg;
          var index = this.index++;
          try {
            var result = predicate.call(
              thisArg || this,
              value,
              index,
              this.source,
            );
            if (result) {
              this.notifyComplete(this.yieldIndex ? index : value);
            }
          } catch (err) {
            this.destination.error(err);
          }
        };
        FindValueSubscriber2.prototype._complete = function () {
          this.notifyComplete(this.yieldIndex ? -1 : void 0);
        };
        return FindValueSubscriber2;
      })(Subscriber_1.Subscriber);
      exports.FindValueSubscriber = FindValueSubscriber;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/findIndex.js
  var require_findIndex = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/findIndex.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var find_1 = require_find();
      function findIndex(predicate, thisArg) {
        return function (source) {
          return source.lift(
            new find_1.FindValueOperator(predicate, source, true, thisArg),
          );
        };
      }
      exports.findIndex = findIndex;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/first.js
  var require_first = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/first.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var EmptyError_1 = require_EmptyError();
      var filter_1 = require_filter();
      var take_1 = require_take();
      var defaultIfEmpty_1 = require_defaultIfEmpty();
      var throwIfEmpty_1 = require_throwIfEmpty();
      var identity_1 = require_identity();
      function first(predicate, defaultValue) {
        var hasDefaultValue = arguments.length >= 2;
        return function (source) {
          return source.pipe(
            predicate
              ? filter_1.filter(function (v, i) {
                  return predicate(v, i, source);
                })
              : identity_1.identity,
            take_1.take(1),
            hasDefaultValue
              ? defaultIfEmpty_1.defaultIfEmpty(defaultValue)
              : throwIfEmpty_1.throwIfEmpty(function () {
                  return new EmptyError_1.EmptyError();
                }),
          );
        };
      }
      exports.first = first;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/ignoreElements.js
  var require_ignoreElements = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/ignoreElements.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function ignoreElements() {
        return function ignoreElementsOperatorFunction(source) {
          return source.lift(new IgnoreElementsOperator());
        };
      }
      exports.ignoreElements = ignoreElements;
      var IgnoreElementsOperator = (function () {
        function IgnoreElementsOperator2() {}
        IgnoreElementsOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(new IgnoreElementsSubscriber(subscriber));
        };
        return IgnoreElementsOperator2;
      })();
      var IgnoreElementsSubscriber = (function (_super) {
        __extends2(IgnoreElementsSubscriber2, _super);
        function IgnoreElementsSubscriber2() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        IgnoreElementsSubscriber2.prototype._next = function (unused) {};
        return IgnoreElementsSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/isEmpty.js
  var require_isEmpty = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/isEmpty.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function isEmpty() {
        return function (source) {
          return source.lift(new IsEmptyOperator());
        };
      }
      exports.isEmpty = isEmpty;
      var IsEmptyOperator = (function () {
        function IsEmptyOperator2() {}
        IsEmptyOperator2.prototype.call = function (observer, source) {
          return source.subscribe(new IsEmptySubscriber(observer));
        };
        return IsEmptyOperator2;
      })();
      var IsEmptySubscriber = (function (_super) {
        __extends2(IsEmptySubscriber2, _super);
        function IsEmptySubscriber2(destination) {
          return _super.call(this, destination) || this;
        }
        IsEmptySubscriber2.prototype.notifyComplete = function (isEmpty2) {
          var destination = this.destination;
          destination.next(isEmpty2);
          destination.complete();
        };
        IsEmptySubscriber2.prototype._next = function (value) {
          this.notifyComplete(false);
        };
        IsEmptySubscriber2.prototype._complete = function () {
          this.notifyComplete(true);
        };
        return IsEmptySubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/takeLast.js
  var require_takeLast = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/takeLast.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var ArgumentOutOfRangeError_1 = require_ArgumentOutOfRangeError();
      var empty_1 = require_empty();
      function takeLast(count) {
        return function takeLastOperatorFunction(source) {
          if (count === 0) {
            return empty_1.empty();
          } else {
            return source.lift(new TakeLastOperator(count));
          }
        };
      }
      exports.takeLast = takeLast;
      var TakeLastOperator = (function () {
        function TakeLastOperator2(total) {
          this.total = total;
          if (this.total < 0) {
            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
          }
        }
        TakeLastOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new TakeLastSubscriber(subscriber, this.total),
          );
        };
        return TakeLastOperator2;
      })();
      var TakeLastSubscriber = (function (_super) {
        __extends2(TakeLastSubscriber2, _super);
        function TakeLastSubscriber2(destination, total) {
          var _this = _super.call(this, destination) || this;
          _this.total = total;
          _this.ring = new Array();
          _this.count = 0;
          return _this;
        }
        TakeLastSubscriber2.prototype._next = function (value) {
          var ring = this.ring;
          var total = this.total;
          var count = this.count++;
          if (ring.length < total) {
            ring.push(value);
          } else {
            var index = count % total;
            ring[index] = value;
          }
        };
        TakeLastSubscriber2.prototype._complete = function () {
          var destination = this.destination;
          var count = this.count;
          if (count > 0) {
            var total = this.count >= this.total ? this.total : this.count;
            var ring = this.ring;
            for (var i = 0; i < total; i++) {
              var idx = count++ % total;
              destination.next(ring[idx]);
            }
          }
          destination.complete();
        };
        return TakeLastSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/last.js
  var require_last = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/last.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var EmptyError_1 = require_EmptyError();
      var filter_1 = require_filter();
      var takeLast_1 = require_takeLast();
      var throwIfEmpty_1 = require_throwIfEmpty();
      var defaultIfEmpty_1 = require_defaultIfEmpty();
      var identity_1 = require_identity();
      function last(predicate, defaultValue) {
        var hasDefaultValue = arguments.length >= 2;
        return function (source) {
          return source.pipe(
            predicate
              ? filter_1.filter(function (v, i) {
                  return predicate(v, i, source);
                })
              : identity_1.identity,
            takeLast_1.takeLast(1),
            hasDefaultValue
              ? defaultIfEmpty_1.defaultIfEmpty(defaultValue)
              : throwIfEmpty_1.throwIfEmpty(function () {
                  return new EmptyError_1.EmptyError();
                }),
          );
        };
      }
      exports.last = last;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/mapTo.js
  var require_mapTo = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/mapTo.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function mapTo(value) {
        return function (source) {
          return source.lift(new MapToOperator(value));
        };
      }
      exports.mapTo = mapTo;
      var MapToOperator = (function () {
        function MapToOperator2(value) {
          this.value = value;
        }
        MapToOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(new MapToSubscriber(subscriber, this.value));
        };
        return MapToOperator2;
      })();
      var MapToSubscriber = (function (_super) {
        __extends2(MapToSubscriber2, _super);
        function MapToSubscriber2(destination, value) {
          var _this = _super.call(this, destination) || this;
          _this.value = value;
          return _this;
        }
        MapToSubscriber2.prototype._next = function (x) {
          this.destination.next(this.value);
        };
        return MapToSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/materialize.js
  var require_materialize = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/materialize.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var Notification_1 = require_Notification();
      function materialize() {
        return function materializeOperatorFunction(source) {
          return source.lift(new MaterializeOperator());
        };
      }
      exports.materialize = materialize;
      var MaterializeOperator = (function () {
        function MaterializeOperator2() {}
        MaterializeOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(new MaterializeSubscriber(subscriber));
        };
        return MaterializeOperator2;
      })();
      var MaterializeSubscriber = (function (_super) {
        __extends2(MaterializeSubscriber2, _super);
        function MaterializeSubscriber2(destination) {
          return _super.call(this, destination) || this;
        }
        MaterializeSubscriber2.prototype._next = function (value) {
          this.destination.next(Notification_1.Notification.createNext(value));
        };
        MaterializeSubscriber2.prototype._error = function (err) {
          var destination = this.destination;
          destination.next(Notification_1.Notification.createError(err));
          destination.complete();
        };
        MaterializeSubscriber2.prototype._complete = function () {
          var destination = this.destination;
          destination.next(Notification_1.Notification.createComplete());
          destination.complete();
        };
        return MaterializeSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/scan.js
  var require_scan = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/scan.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function scan(accumulator, seed) {
        var hasSeed = false;
        if (arguments.length >= 2) {
          hasSeed = true;
        }
        return function scanOperatorFunction(source) {
          return source.lift(new ScanOperator(accumulator, seed, hasSeed));
        };
      }
      exports.scan = scan;
      var ScanOperator = (function () {
        function ScanOperator2(accumulator, seed, hasSeed) {
          if (hasSeed === void 0) {
            hasSeed = false;
          }
          this.accumulator = accumulator;
          this.seed = seed;
          this.hasSeed = hasSeed;
        }
        ScanOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new ScanSubscriber(
              subscriber,
              this.accumulator,
              this.seed,
              this.hasSeed,
            ),
          );
        };
        return ScanOperator2;
      })();
      var ScanSubscriber = (function (_super) {
        __extends2(ScanSubscriber2, _super);
        function ScanSubscriber2(destination, accumulator, _seed, hasSeed) {
          var _this = _super.call(this, destination) || this;
          _this.accumulator = accumulator;
          _this._seed = _seed;
          _this.hasSeed = hasSeed;
          _this.index = 0;
          return _this;
        }
        Object.defineProperty(ScanSubscriber2.prototype, 'seed', {
          get: function () {
            return this._seed;
          },
          set: function (value) {
            this.hasSeed = true;
            this._seed = value;
          },
          enumerable: true,
          configurable: true,
        });
        ScanSubscriber2.prototype._next = function (value) {
          if (!this.hasSeed) {
            this.seed = value;
            this.destination.next(value);
          } else {
            return this._tryNext(value);
          }
        };
        ScanSubscriber2.prototype._tryNext = function (value) {
          var index = this.index++;
          var result;
          try {
            result = this.accumulator(this.seed, value, index);
          } catch (err) {
            this.destination.error(err);
          }
          this.seed = result;
          this.destination.next(result);
        };
        return ScanSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/reduce.js
  var require_reduce = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/reduce.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var scan_1 = require_scan();
      var takeLast_1 = require_takeLast();
      var defaultIfEmpty_1 = require_defaultIfEmpty();
      var pipe_1 = require_pipe();
      function reduce(accumulator, seed) {
        if (arguments.length >= 2) {
          return function reduceOperatorFunctionWithSeed(source) {
            return pipe_1.pipe(
              scan_1.scan(accumulator, seed),
              takeLast_1.takeLast(1),
              defaultIfEmpty_1.defaultIfEmpty(seed),
            )(source);
          };
        }
        return function reduceOperatorFunction(source) {
          return pipe_1.pipe(
            scan_1.scan(function (acc, value, index) {
              return accumulator(acc, value, index + 1);
            }),
            takeLast_1.takeLast(1),
          )(source);
        };
      }
      exports.reduce = reduce;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/max.js
  var require_max = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/max.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var reduce_1 = require_reduce();
      function max(comparer) {
        var max2 =
          typeof comparer === 'function'
            ? function (x, y) {
                return comparer(x, y) > 0 ? x : y;
              }
            : function (x, y) {
                return x > y ? x : y;
              };
        return reduce_1.reduce(max2);
      }
      exports.max = max;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/merge.js
  var require_merge2 = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/merge.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var merge_1 = require_merge();
      function merge() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          observables[_i] = arguments[_i];
        }
        return function (source) {
          return source.lift.call(
            merge_1.merge.apply(void 0, [source].concat(observables)),
          );
        };
      }
      exports.merge = merge;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/mergeMapTo.js
  var require_mergeMapTo = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/mergeMapTo.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var mergeMap_1 = require_mergeMap();
      function mergeMapTo(innerObservable, resultSelector, concurrent) {
        if (concurrent === void 0) {
          concurrent = Number.POSITIVE_INFINITY;
        }
        if (typeof resultSelector === 'function') {
          return mergeMap_1.mergeMap(
            function () {
              return innerObservable;
            },
            resultSelector,
            concurrent,
          );
        }
        if (typeof resultSelector === 'number') {
          concurrent = resultSelector;
        }
        return mergeMap_1.mergeMap(function () {
          return innerObservable;
        }, concurrent);
      }
      exports.mergeMapTo = mergeMapTo;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/mergeScan.js
  var require_mergeScan = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/mergeScan.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var innerSubscribe_1 = require_innerSubscribe();
      function mergeScan(accumulator, seed, concurrent) {
        if (concurrent === void 0) {
          concurrent = Number.POSITIVE_INFINITY;
        }
        return function (source) {
          return source.lift(
            new MergeScanOperator(accumulator, seed, concurrent),
          );
        };
      }
      exports.mergeScan = mergeScan;
      var MergeScanOperator = (function () {
        function MergeScanOperator2(accumulator, seed, concurrent) {
          this.accumulator = accumulator;
          this.seed = seed;
          this.concurrent = concurrent;
        }
        MergeScanOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new MergeScanSubscriber(
              subscriber,
              this.accumulator,
              this.seed,
              this.concurrent,
            ),
          );
        };
        return MergeScanOperator2;
      })();
      exports.MergeScanOperator = MergeScanOperator;
      var MergeScanSubscriber = (function (_super) {
        __extends2(MergeScanSubscriber2, _super);
        function MergeScanSubscriber2(
          destination,
          accumulator,
          acc,
          concurrent,
        ) {
          var _this = _super.call(this, destination) || this;
          _this.accumulator = accumulator;
          _this.acc = acc;
          _this.concurrent = concurrent;
          _this.hasValue = false;
          _this.hasCompleted = false;
          _this.buffer = [];
          _this.active = 0;
          _this.index = 0;
          return _this;
        }
        MergeScanSubscriber2.prototype._next = function (value) {
          if (this.active < this.concurrent) {
            var index = this.index++;
            var destination = this.destination;
            var ish = void 0;
            try {
              var accumulator = this.accumulator;
              ish = accumulator(this.acc, value, index);
            } catch (e) {
              return destination.error(e);
            }
            this.active++;
            this._innerSub(ish);
          } else {
            this.buffer.push(value);
          }
        };
        MergeScanSubscriber2.prototype._innerSub = function (ish) {
          var innerSubscriber = new innerSubscribe_1.SimpleInnerSubscriber(
            this,
          );
          var destination = this.destination;
          destination.add(innerSubscriber);
          var innerSubscription = innerSubscribe_1.innerSubscribe(
            ish,
            innerSubscriber,
          );
          if (innerSubscription !== innerSubscriber) {
            destination.add(innerSubscription);
          }
        };
        MergeScanSubscriber2.prototype._complete = function () {
          this.hasCompleted = true;
          if (this.active === 0 && this.buffer.length === 0) {
            if (this.hasValue === false) {
              this.destination.next(this.acc);
            }
            this.destination.complete();
          }
          this.unsubscribe();
        };
        MergeScanSubscriber2.prototype.notifyNext = function (innerValue) {
          var destination = this.destination;
          this.acc = innerValue;
          this.hasValue = true;
          destination.next(innerValue);
        };
        MergeScanSubscriber2.prototype.notifyComplete = function () {
          var buffer = this.buffer;
          this.active--;
          if (buffer.length > 0) {
            this._next(buffer.shift());
          } else if (this.active === 0 && this.hasCompleted) {
            if (this.hasValue === false) {
              this.destination.next(this.acc);
            }
            this.destination.complete();
          }
        };
        return MergeScanSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
      exports.MergeScanSubscriber = MergeScanSubscriber;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/min.js
  var require_min = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/min.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var reduce_1 = require_reduce();
      function min(comparer) {
        var min2 =
          typeof comparer === 'function'
            ? function (x, y) {
                return comparer(x, y) < 0 ? x : y;
              }
            : function (x, y) {
                return x < y ? x : y;
              };
        return reduce_1.reduce(min2);
      }
      exports.min = min;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/multicast.js
  var require_multicast = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/multicast.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var ConnectableObservable_1 = require_ConnectableObservable();
      function multicast(subjectOrSubjectFactory, selector) {
        return function multicastOperatorFunction(source) {
          var subjectFactory;
          if (typeof subjectOrSubjectFactory === 'function') {
            subjectFactory = subjectOrSubjectFactory;
          } else {
            subjectFactory = function subjectFactory2() {
              return subjectOrSubjectFactory;
            };
          }
          if (typeof selector === 'function') {
            return source.lift(new MulticastOperator(subjectFactory, selector));
          }
          var connectable = Object.create(
            source,
            ConnectableObservable_1.connectableObservableDescriptor,
          );
          connectable.source = source;
          connectable.subjectFactory = subjectFactory;
          return connectable;
        };
      }
      exports.multicast = multicast;
      var MulticastOperator = (function () {
        function MulticastOperator2(subjectFactory, selector) {
          this.subjectFactory = subjectFactory;
          this.selector = selector;
        }
        MulticastOperator2.prototype.call = function (subscriber, source) {
          var selector = this.selector;
          var subject = this.subjectFactory();
          var subscription = selector(subject).subscribe(subscriber);
          subscription.add(source.subscribe(subject));
          return subscription;
        };
        return MulticastOperator2;
      })();
      exports.MulticastOperator = MulticastOperator;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/onErrorResumeNext.js
  var require_onErrorResumeNext2 = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/onErrorResumeNext.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var from_1 = require_from();
      var isArray_1 = require_isArray();
      var innerSubscribe_1 = require_innerSubscribe();
      function onErrorResumeNext() {
        var nextSources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          nextSources[_i] = arguments[_i];
        }
        if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
          nextSources = nextSources[0];
        }
        return function (source) {
          return source.lift(new OnErrorResumeNextOperator(nextSources));
        };
      }
      exports.onErrorResumeNext = onErrorResumeNext;
      function onErrorResumeNextStatic() {
        var nextSources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          nextSources[_i] = arguments[_i];
        }
        var source = void 0;
        if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {
          nextSources = nextSources[0];
        }
        source = nextSources.shift();
        return from_1
          .from(source)
          .lift(new OnErrorResumeNextOperator(nextSources));
      }
      exports.onErrorResumeNextStatic = onErrorResumeNextStatic;
      var OnErrorResumeNextOperator = (function () {
        function OnErrorResumeNextOperator2(nextSources) {
          this.nextSources = nextSources;
        }
        OnErrorResumeNextOperator2.prototype.call = function (
          subscriber,
          source,
        ) {
          return source.subscribe(
            new OnErrorResumeNextSubscriber(subscriber, this.nextSources),
          );
        };
        return OnErrorResumeNextOperator2;
      })();
      var OnErrorResumeNextSubscriber = (function (_super) {
        __extends2(OnErrorResumeNextSubscriber2, _super);
        function OnErrorResumeNextSubscriber2(destination, nextSources) {
          var _this = _super.call(this, destination) || this;
          _this.destination = destination;
          _this.nextSources = nextSources;
          return _this;
        }
        OnErrorResumeNextSubscriber2.prototype.notifyError = function () {
          this.subscribeToNextSource();
        };
        OnErrorResumeNextSubscriber2.prototype.notifyComplete = function () {
          this.subscribeToNextSource();
        };
        OnErrorResumeNextSubscriber2.prototype._error = function (err) {
          this.subscribeToNextSource();
          this.unsubscribe();
        };
        OnErrorResumeNextSubscriber2.prototype._complete = function () {
          this.subscribeToNextSource();
          this.unsubscribe();
        };
        OnErrorResumeNextSubscriber2.prototype.subscribeToNextSource =
          function () {
            var next = this.nextSources.shift();
            if (!!next) {
              var innerSubscriber = new innerSubscribe_1.SimpleInnerSubscriber(
                this,
              );
              var destination = this.destination;
              destination.add(innerSubscriber);
              var innerSubscription = innerSubscribe_1.innerSubscribe(
                next,
                innerSubscriber,
              );
              if (innerSubscription !== innerSubscriber) {
                destination.add(innerSubscription);
              }
            } else {
              this.destination.complete();
            }
          };
        return OnErrorResumeNextSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/pairwise.js
  var require_pairwise = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/pairwise.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function pairwise() {
        return function (source) {
          return source.lift(new PairwiseOperator());
        };
      }
      exports.pairwise = pairwise;
      var PairwiseOperator = (function () {
        function PairwiseOperator2() {}
        PairwiseOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(new PairwiseSubscriber(subscriber));
        };
        return PairwiseOperator2;
      })();
      var PairwiseSubscriber = (function (_super) {
        __extends2(PairwiseSubscriber2, _super);
        function PairwiseSubscriber2(destination) {
          var _this = _super.call(this, destination) || this;
          _this.hasPrev = false;
          return _this;
        }
        PairwiseSubscriber2.prototype._next = function (value) {
          var pair;
          if (this.hasPrev) {
            pair = [this.prev, value];
          } else {
            this.hasPrev = true;
          }
          this.prev = value;
          if (pair) {
            this.destination.next(pair);
          }
        };
        return PairwiseSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/partition.js
  var require_partition2 = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/partition.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var not_1 = require_not();
      var filter_1 = require_filter();
      function partition(predicate, thisArg) {
        return function (source) {
          return [
            filter_1.filter(predicate, thisArg)(source),
            filter_1.filter(not_1.not(predicate, thisArg))(source),
          ];
        };
      }
      exports.partition = partition;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/pluck.js
  var require_pluck = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/pluck.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var map_1 = require_map();
      function pluck() {
        var properties = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          properties[_i] = arguments[_i];
        }
        var length = properties.length;
        if (length === 0) {
          throw new Error('list of properties cannot be empty.');
        }
        return function (source) {
          return map_1.map(plucker(properties, length))(source);
        };
      }
      exports.pluck = pluck;
      function plucker(props, length) {
        var mapper = function (x) {
          var currentProp = x;
          for (var i = 0; i < length; i++) {
            var p = currentProp != null ? currentProp[props[i]] : void 0;
            if (p !== void 0) {
              currentProp = p;
            } else {
              return void 0;
            }
          }
          return currentProp;
        };
        return mapper;
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/publish.js
  var require_publish = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/publish.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subject_1 = require_Subject();
      var multicast_1 = require_multicast();
      function publish(selector) {
        return selector
          ? multicast_1.multicast(function () {
              return new Subject_1.Subject();
            }, selector)
          : multicast_1.multicast(new Subject_1.Subject());
      }
      exports.publish = publish;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/publishBehavior.js
  var require_publishBehavior = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/publishBehavior.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var BehaviorSubject_1 = require_BehaviorSubject();
      var multicast_1 = require_multicast();
      function publishBehavior(value) {
        return function (source) {
          return multicast_1.multicast(
            new BehaviorSubject_1.BehaviorSubject(value),
          )(source);
        };
      }
      exports.publishBehavior = publishBehavior;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/publishLast.js
  var require_publishLast = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/publishLast.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var AsyncSubject_1 = require_AsyncSubject();
      var multicast_1 = require_multicast();
      function publishLast() {
        return function (source) {
          return multicast_1.multicast(new AsyncSubject_1.AsyncSubject())(
            source,
          );
        };
      }
      exports.publishLast = publishLast;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/publishReplay.js
  var require_publishReplay = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/publishReplay.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var ReplaySubject_1 = require_ReplaySubject();
      var multicast_1 = require_multicast();
      function publishReplay(
        bufferSize,
        windowTime,
        selectorOrScheduler,
        scheduler,
      ) {
        if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {
          scheduler = selectorOrScheduler;
        }
        var selector =
          typeof selectorOrScheduler === 'function'
            ? selectorOrScheduler
            : void 0;
        var subject = new ReplaySubject_1.ReplaySubject(
          bufferSize,
          windowTime,
          scheduler,
        );
        return function (source) {
          return multicast_1.multicast(function () {
            return subject;
          }, selector)(source);
        };
      }
      exports.publishReplay = publishReplay;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/race.js
  var require_race2 = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/race.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var isArray_1 = require_isArray();
      var race_1 = require_race();
      function race() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          observables[_i] = arguments[_i];
        }
        return function raceOperatorFunction(source) {
          if (observables.length === 1 && isArray_1.isArray(observables[0])) {
            observables = observables[0];
          }
          return source.lift.call(
            race_1.race.apply(void 0, [source].concat(observables)),
          );
        };
      }
      exports.race = race;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/repeat.js
  var require_repeat = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/repeat.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var empty_1 = require_empty();
      function repeat(count) {
        if (count === void 0) {
          count = -1;
        }
        return function (source) {
          if (count === 0) {
            return empty_1.empty();
          } else if (count < 0) {
            return source.lift(new RepeatOperator(-1, source));
          } else {
            return source.lift(new RepeatOperator(count - 1, source));
          }
        };
      }
      exports.repeat = repeat;
      var RepeatOperator = (function () {
        function RepeatOperator2(count, source) {
          this.count = count;
          this.source = source;
        }
        RepeatOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new RepeatSubscriber(subscriber, this.count, this.source),
          );
        };
        return RepeatOperator2;
      })();
      var RepeatSubscriber = (function (_super) {
        __extends2(RepeatSubscriber2, _super);
        function RepeatSubscriber2(destination, count, source) {
          var _this = _super.call(this, destination) || this;
          _this.count = count;
          _this.source = source;
          return _this;
        }
        RepeatSubscriber2.prototype.complete = function () {
          if (!this.isStopped) {
            var _a = this,
              source = _a.source,
              count = _a.count;
            if (count === 0) {
              return _super.prototype.complete.call(this);
            } else if (count > -1) {
              this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
          }
        };
        return RepeatSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/repeatWhen.js
  var require_repeatWhen = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/repeatWhen.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subject_1 = require_Subject();
      var innerSubscribe_1 = require_innerSubscribe();
      function repeatWhen(notifier) {
        return function (source) {
          return source.lift(new RepeatWhenOperator(notifier));
        };
      }
      exports.repeatWhen = repeatWhen;
      var RepeatWhenOperator = (function () {
        function RepeatWhenOperator2(notifier) {
          this.notifier = notifier;
        }
        RepeatWhenOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new RepeatWhenSubscriber(subscriber, this.notifier, source),
          );
        };
        return RepeatWhenOperator2;
      })();
      var RepeatWhenSubscriber = (function (_super) {
        __extends2(RepeatWhenSubscriber2, _super);
        function RepeatWhenSubscriber2(destination, notifier, source) {
          var _this = _super.call(this, destination) || this;
          _this.notifier = notifier;
          _this.source = source;
          _this.sourceIsBeingSubscribedTo = true;
          return _this;
        }
        RepeatWhenSubscriber2.prototype.notifyNext = function () {
          this.sourceIsBeingSubscribedTo = true;
          this.source.subscribe(this);
        };
        RepeatWhenSubscriber2.prototype.notifyComplete = function () {
          if (this.sourceIsBeingSubscribedTo === false) {
            return _super.prototype.complete.call(this);
          }
        };
        RepeatWhenSubscriber2.prototype.complete = function () {
          this.sourceIsBeingSubscribedTo = false;
          if (!this.isStopped) {
            if (!this.retries) {
              this.subscribeToRetries();
            }
            if (!this.retriesSubscription || this.retriesSubscription.closed) {
              return _super.prototype.complete.call(this);
            }
            this._unsubscribeAndRecycle();
            this.notifications.next(void 0);
          }
        };
        RepeatWhenSubscriber2.prototype._unsubscribe = function () {
          var _a = this,
            notifications = _a.notifications,
            retriesSubscription = _a.retriesSubscription;
          if (notifications) {
            notifications.unsubscribe();
            this.notifications = void 0;
          }
          if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = void 0;
          }
          this.retries = void 0;
        };
        RepeatWhenSubscriber2.prototype._unsubscribeAndRecycle = function () {
          var _unsubscribe = this._unsubscribe;
          this._unsubscribe = null;
          _super.prototype._unsubscribeAndRecycle.call(this);
          this._unsubscribe = _unsubscribe;
          return this;
        };
        RepeatWhenSubscriber2.prototype.subscribeToRetries = function () {
          this.notifications = new Subject_1.Subject();
          var retries;
          try {
            var notifier = this.notifier;
            retries = notifier(this.notifications);
          } catch (e) {
            return _super.prototype.complete.call(this);
          }
          this.retries = retries;
          this.retriesSubscription = innerSubscribe_1.innerSubscribe(
            retries,
            new innerSubscribe_1.SimpleInnerSubscriber(this),
          );
        };
        return RepeatWhenSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/retry.js
  var require_retry = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/retry.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function retry(count) {
        if (count === void 0) {
          count = -1;
        }
        return function (source) {
          return source.lift(new RetryOperator(count, source));
        };
      }
      exports.retry = retry;
      var RetryOperator = (function () {
        function RetryOperator2(count, source) {
          this.count = count;
          this.source = source;
        }
        RetryOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new RetrySubscriber(subscriber, this.count, this.source),
          );
        };
        return RetryOperator2;
      })();
      var RetrySubscriber = (function (_super) {
        __extends2(RetrySubscriber2, _super);
        function RetrySubscriber2(destination, count, source) {
          var _this = _super.call(this, destination) || this;
          _this.count = count;
          _this.source = source;
          return _this;
        }
        RetrySubscriber2.prototype.error = function (err) {
          if (!this.isStopped) {
            var _a = this,
              source = _a.source,
              count = _a.count;
            if (count === 0) {
              return _super.prototype.error.call(this, err);
            } else if (count > -1) {
              this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
          }
        };
        return RetrySubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/retryWhen.js
  var require_retryWhen = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/retryWhen.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subject_1 = require_Subject();
      var innerSubscribe_1 = require_innerSubscribe();
      function retryWhen(notifier) {
        return function (source) {
          return source.lift(new RetryWhenOperator(notifier, source));
        };
      }
      exports.retryWhen = retryWhen;
      var RetryWhenOperator = (function () {
        function RetryWhenOperator2(notifier, source) {
          this.notifier = notifier;
          this.source = source;
        }
        RetryWhenOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new RetryWhenSubscriber(subscriber, this.notifier, this.source),
          );
        };
        return RetryWhenOperator2;
      })();
      var RetryWhenSubscriber = (function (_super) {
        __extends2(RetryWhenSubscriber2, _super);
        function RetryWhenSubscriber2(destination, notifier, source) {
          var _this = _super.call(this, destination) || this;
          _this.notifier = notifier;
          _this.source = source;
          return _this;
        }
        RetryWhenSubscriber2.prototype.error = function (err) {
          if (!this.isStopped) {
            var errors = this.errors;
            var retries = this.retries;
            var retriesSubscription = this.retriesSubscription;
            if (!retries) {
              errors = new Subject_1.Subject();
              try {
                var notifier = this.notifier;
                retries = notifier(errors);
              } catch (e) {
                return _super.prototype.error.call(this, e);
              }
              retriesSubscription = innerSubscribe_1.innerSubscribe(
                retries,
                new innerSubscribe_1.SimpleInnerSubscriber(this),
              );
            } else {
              this.errors = void 0;
              this.retriesSubscription = void 0;
            }
            this._unsubscribeAndRecycle();
            this.errors = errors;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            errors.next(err);
          }
        };
        RetryWhenSubscriber2.prototype._unsubscribe = function () {
          var _a = this,
            errors = _a.errors,
            retriesSubscription = _a.retriesSubscription;
          if (errors) {
            errors.unsubscribe();
            this.errors = void 0;
          }
          if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = void 0;
          }
          this.retries = void 0;
        };
        RetryWhenSubscriber2.prototype.notifyNext = function () {
          var _unsubscribe = this._unsubscribe;
          this._unsubscribe = null;
          this._unsubscribeAndRecycle();
          this._unsubscribe = _unsubscribe;
          this.source.subscribe(this);
        };
        return RetryWhenSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/sample.js
  var require_sample = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/sample.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var innerSubscribe_1 = require_innerSubscribe();
      function sample(notifier) {
        return function (source) {
          return source.lift(new SampleOperator(notifier));
        };
      }
      exports.sample = sample;
      var SampleOperator = (function () {
        function SampleOperator2(notifier) {
          this.notifier = notifier;
        }
        SampleOperator2.prototype.call = function (subscriber, source) {
          var sampleSubscriber = new SampleSubscriber(subscriber);
          var subscription = source.subscribe(sampleSubscriber);
          subscription.add(
            innerSubscribe_1.innerSubscribe(
              this.notifier,
              new innerSubscribe_1.SimpleInnerSubscriber(sampleSubscriber),
            ),
          );
          return subscription;
        };
        return SampleOperator2;
      })();
      var SampleSubscriber = (function (_super) {
        __extends2(SampleSubscriber2, _super);
        function SampleSubscriber2() {
          var _this =
            (_super !== null && _super.apply(this, arguments)) || this;
          _this.hasValue = false;
          return _this;
        }
        SampleSubscriber2.prototype._next = function (value) {
          this.value = value;
          this.hasValue = true;
        };
        SampleSubscriber2.prototype.notifyNext = function () {
          this.emitValue();
        };
        SampleSubscriber2.prototype.notifyComplete = function () {
          this.emitValue();
        };
        SampleSubscriber2.prototype.emitValue = function () {
          if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.value);
          }
        };
        return SampleSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/sampleTime.js
  var require_sampleTime = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/sampleTime.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var async_1 = require_async();
      function sampleTime(period, scheduler) {
        if (scheduler === void 0) {
          scheduler = async_1.async;
        }
        return function (source) {
          return source.lift(new SampleTimeOperator(period, scheduler));
        };
      }
      exports.sampleTime = sampleTime;
      var SampleTimeOperator = (function () {
        function SampleTimeOperator2(period, scheduler) {
          this.period = period;
          this.scheduler = scheduler;
        }
        SampleTimeOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new SampleTimeSubscriber(subscriber, this.period, this.scheduler),
          );
        };
        return SampleTimeOperator2;
      })();
      var SampleTimeSubscriber = (function (_super) {
        __extends2(SampleTimeSubscriber2, _super);
        function SampleTimeSubscriber2(destination, period, scheduler) {
          var _this = _super.call(this, destination) || this;
          _this.period = period;
          _this.scheduler = scheduler;
          _this.hasValue = false;
          _this.add(
            scheduler.schedule(dispatchNotification, period, {
              subscriber: _this,
              period,
            }),
          );
          return _this;
        }
        SampleTimeSubscriber2.prototype._next = function (value) {
          this.lastValue = value;
          this.hasValue = true;
        };
        SampleTimeSubscriber2.prototype.notifyNext = function () {
          if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.lastValue);
          }
        };
        return SampleTimeSubscriber2;
      })(Subscriber_1.Subscriber);
      function dispatchNotification(state) {
        var subscriber = state.subscriber,
          period = state.period;
        subscriber.notifyNext();
        this.schedule(state, period);
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/sequenceEqual.js
  var require_sequenceEqual = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/sequenceEqual.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function sequenceEqual(compareTo, comparator) {
        return function (source) {
          return source.lift(new SequenceEqualOperator(compareTo, comparator));
        };
      }
      exports.sequenceEqual = sequenceEqual;
      var SequenceEqualOperator = (function () {
        function SequenceEqualOperator2(compareTo, comparator) {
          this.compareTo = compareTo;
          this.comparator = comparator;
        }
        SequenceEqualOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new SequenceEqualSubscriber(
              subscriber,
              this.compareTo,
              this.comparator,
            ),
          );
        };
        return SequenceEqualOperator2;
      })();
      exports.SequenceEqualOperator = SequenceEqualOperator;
      var SequenceEqualSubscriber = (function (_super) {
        __extends2(SequenceEqualSubscriber2, _super);
        function SequenceEqualSubscriber2(destination, compareTo, comparator) {
          var _this = _super.call(this, destination) || this;
          _this.compareTo = compareTo;
          _this.comparator = comparator;
          _this._a = [];
          _this._b = [];
          _this._oneComplete = false;
          _this.destination.add(
            compareTo.subscribe(
              new SequenceEqualCompareToSubscriber(destination, _this),
            ),
          );
          return _this;
        }
        SequenceEqualSubscriber2.prototype._next = function (value) {
          if (this._oneComplete && this._b.length === 0) {
            this.emit(false);
          } else {
            this._a.push(value);
            this.checkValues();
          }
        };
        SequenceEqualSubscriber2.prototype._complete = function () {
          if (this._oneComplete) {
            this.emit(this._a.length === 0 && this._b.length === 0);
          } else {
            this._oneComplete = true;
          }
          this.unsubscribe();
        };
        SequenceEqualSubscriber2.prototype.checkValues = function () {
          var _c = this,
            _a = _c._a,
            _b = _c._b,
            comparator = _c.comparator;
          while (_a.length > 0 && _b.length > 0) {
            var a = _a.shift();
            var b = _b.shift();
            var areEqual = false;
            try {
              areEqual = comparator ? comparator(a, b) : a === b;
            } catch (e) {
              this.destination.error(e);
            }
            if (!areEqual) {
              this.emit(false);
            }
          }
        };
        SequenceEqualSubscriber2.prototype.emit = function (value) {
          var destination = this.destination;
          destination.next(value);
          destination.complete();
        };
        SequenceEqualSubscriber2.prototype.nextB = function (value) {
          if (this._oneComplete && this._a.length === 0) {
            this.emit(false);
          } else {
            this._b.push(value);
            this.checkValues();
          }
        };
        SequenceEqualSubscriber2.prototype.completeB = function () {
          if (this._oneComplete) {
            this.emit(this._a.length === 0 && this._b.length === 0);
          } else {
            this._oneComplete = true;
          }
        };
        return SequenceEqualSubscriber2;
      })(Subscriber_1.Subscriber);
      exports.SequenceEqualSubscriber = SequenceEqualSubscriber;
      var SequenceEqualCompareToSubscriber = (function (_super) {
        __extends2(SequenceEqualCompareToSubscriber2, _super);
        function SequenceEqualCompareToSubscriber2(destination, parent) {
          var _this = _super.call(this, destination) || this;
          _this.parent = parent;
          return _this;
        }
        SequenceEqualCompareToSubscriber2.prototype._next = function (value) {
          this.parent.nextB(value);
        };
        SequenceEqualCompareToSubscriber2.prototype._error = function (err) {
          this.parent.error(err);
          this.unsubscribe();
        };
        SequenceEqualCompareToSubscriber2.prototype._complete = function () {
          this.parent.completeB();
          this.unsubscribe();
        };
        return SequenceEqualCompareToSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/share.js
  var require_share = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/share.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var multicast_1 = require_multicast();
      var refCount_1 = require_refCount();
      var Subject_1 = require_Subject();
      function shareSubjectFactory() {
        return new Subject_1.Subject();
      }
      function share() {
        return function (source) {
          return refCount_1.refCount()(
            multicast_1.multicast(shareSubjectFactory)(source),
          );
        };
      }
      exports.share = share;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/shareReplay.js
  var require_shareReplay = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/shareReplay.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var ReplaySubject_1 = require_ReplaySubject();
      function shareReplay(configOrBufferSize, windowTime, scheduler) {
        var config2;
        if (configOrBufferSize && typeof configOrBufferSize === 'object') {
          config2 = configOrBufferSize;
        } else {
          config2 = {
            bufferSize: configOrBufferSize,
            windowTime,
            refCount: false,
            scheduler,
          };
        }
        return function (source) {
          return source.lift(shareReplayOperator(config2));
        };
      }
      exports.shareReplay = shareReplay;
      function shareReplayOperator(_a) {
        var _b = _a.bufferSize,
          bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b,
          _c = _a.windowTime,
          windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c,
          useRefCount = _a.refCount,
          scheduler = _a.scheduler;
        var subject;
        var refCount = 0;
        var subscription;
        var hasError = false;
        var isComplete = false;
        return function shareReplayOperation(source) {
          refCount++;
          var innerSub;
          if (!subject || hasError) {
            hasError = false;
            subject = new ReplaySubject_1.ReplaySubject(
              bufferSize,
              windowTime,
              scheduler,
            );
            innerSub = subject.subscribe(this);
            subscription = source.subscribe({
              next: function (value) {
                subject.next(value);
              },
              error: function (err) {
                hasError = true;
                subject.error(err);
              },
              complete: function () {
                isComplete = true;
                subscription = void 0;
                subject.complete();
              },
            });
            if (isComplete) {
              subscription = void 0;
            }
          } else {
            innerSub = subject.subscribe(this);
          }
          this.add(function () {
            refCount--;
            innerSub.unsubscribe();
            innerSub = void 0;
            if (subscription && !isComplete && useRefCount && refCount === 0) {
              subscription.unsubscribe();
              subscription = void 0;
              subject = void 0;
            }
          });
        };
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/single.js
  var require_single = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/single.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var EmptyError_1 = require_EmptyError();
      function single(predicate) {
        return function (source) {
          return source.lift(new SingleOperator(predicate, source));
        };
      }
      exports.single = single;
      var SingleOperator = (function () {
        function SingleOperator2(predicate, source) {
          this.predicate = predicate;
          this.source = source;
        }
        SingleOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new SingleSubscriber(subscriber, this.predicate, this.source),
          );
        };
        return SingleOperator2;
      })();
      var SingleSubscriber = (function (_super) {
        __extends2(SingleSubscriber2, _super);
        function SingleSubscriber2(destination, predicate, source) {
          var _this = _super.call(this, destination) || this;
          _this.predicate = predicate;
          _this.source = source;
          _this.seenValue = false;
          _this.index = 0;
          return _this;
        }
        SingleSubscriber2.prototype.applySingleValue = function (value) {
          if (this.seenValue) {
            this.destination.error('Sequence contains more than one element');
          } else {
            this.seenValue = true;
            this.singleValue = value;
          }
        };
        SingleSubscriber2.prototype._next = function (value) {
          var index = this.index++;
          if (this.predicate) {
            this.tryNext(value, index);
          } else {
            this.applySingleValue(value);
          }
        };
        SingleSubscriber2.prototype.tryNext = function (value, index) {
          try {
            if (this.predicate(value, index, this.source)) {
              this.applySingleValue(value);
            }
          } catch (err) {
            this.destination.error(err);
          }
        };
        SingleSubscriber2.prototype._complete = function () {
          var destination = this.destination;
          if (this.index > 0) {
            destination.next(this.seenValue ? this.singleValue : void 0);
            destination.complete();
          } else {
            destination.error(new EmptyError_1.EmptyError());
          }
        };
        return SingleSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/skip.js
  var require_skip = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/skip.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function skip(count) {
        return function (source) {
          return source.lift(new SkipOperator(count));
        };
      }
      exports.skip = skip;
      var SkipOperator = (function () {
        function SkipOperator2(total) {
          this.total = total;
        }
        SkipOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(new SkipSubscriber(subscriber, this.total));
        };
        return SkipOperator2;
      })();
      var SkipSubscriber = (function (_super) {
        __extends2(SkipSubscriber2, _super);
        function SkipSubscriber2(destination, total) {
          var _this = _super.call(this, destination) || this;
          _this.total = total;
          _this.count = 0;
          return _this;
        }
        SkipSubscriber2.prototype._next = function (x) {
          if (++this.count > this.total) {
            this.destination.next(x);
          }
        };
        return SkipSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/skipLast.js
  var require_skipLast = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/skipLast.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var ArgumentOutOfRangeError_1 = require_ArgumentOutOfRangeError();
      function skipLast(count) {
        return function (source) {
          return source.lift(new SkipLastOperator(count));
        };
      }
      exports.skipLast = skipLast;
      var SkipLastOperator = (function () {
        function SkipLastOperator2(_skipCount) {
          this._skipCount = _skipCount;
          if (this._skipCount < 0) {
            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();
          }
        }
        SkipLastOperator2.prototype.call = function (subscriber, source) {
          if (this._skipCount === 0) {
            return source.subscribe(new Subscriber_1.Subscriber(subscriber));
          } else {
            return source.subscribe(
              new SkipLastSubscriber(subscriber, this._skipCount),
            );
          }
        };
        return SkipLastOperator2;
      })();
      var SkipLastSubscriber = (function (_super) {
        __extends2(SkipLastSubscriber2, _super);
        function SkipLastSubscriber2(destination, _skipCount) {
          var _this = _super.call(this, destination) || this;
          _this._skipCount = _skipCount;
          _this._count = 0;
          _this._ring = new Array(_skipCount);
          return _this;
        }
        SkipLastSubscriber2.prototype._next = function (value) {
          var skipCount = this._skipCount;
          var count = this._count++;
          if (count < skipCount) {
            this._ring[count] = value;
          } else {
            var currentIndex = count % skipCount;
            var ring = this._ring;
            var oldValue = ring[currentIndex];
            ring[currentIndex] = value;
            this.destination.next(oldValue);
          }
        };
        return SkipLastSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/skipUntil.js
  var require_skipUntil = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/skipUntil.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var innerSubscribe_1 = require_innerSubscribe();
      function skipUntil(notifier) {
        return function (source) {
          return source.lift(new SkipUntilOperator(notifier));
        };
      }
      exports.skipUntil = skipUntil;
      var SkipUntilOperator = (function () {
        function SkipUntilOperator2(notifier) {
          this.notifier = notifier;
        }
        SkipUntilOperator2.prototype.call = function (destination, source) {
          return source.subscribe(
            new SkipUntilSubscriber(destination, this.notifier),
          );
        };
        return SkipUntilOperator2;
      })();
      var SkipUntilSubscriber = (function (_super) {
        __extends2(SkipUntilSubscriber2, _super);
        function SkipUntilSubscriber2(destination, notifier) {
          var _this = _super.call(this, destination) || this;
          _this.hasValue = false;
          var innerSubscriber = new innerSubscribe_1.SimpleInnerSubscriber(
            _this,
          );
          _this.add(innerSubscriber);
          _this.innerSubscription = innerSubscriber;
          var innerSubscription = innerSubscribe_1.innerSubscribe(
            notifier,
            innerSubscriber,
          );
          if (innerSubscription !== innerSubscriber) {
            _this.add(innerSubscription);
            _this.innerSubscription = innerSubscription;
          }
          return _this;
        }
        SkipUntilSubscriber2.prototype._next = function (value) {
          if (this.hasValue) {
            _super.prototype._next.call(this, value);
          }
        };
        SkipUntilSubscriber2.prototype.notifyNext = function () {
          this.hasValue = true;
          if (this.innerSubscription) {
            this.innerSubscription.unsubscribe();
          }
        };
        SkipUntilSubscriber2.prototype.notifyComplete = function () {};
        return SkipUntilSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/skipWhile.js
  var require_skipWhile = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/skipWhile.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function skipWhile(predicate) {
        return function (source) {
          return source.lift(new SkipWhileOperator(predicate));
        };
      }
      exports.skipWhile = skipWhile;
      var SkipWhileOperator = (function () {
        function SkipWhileOperator2(predicate) {
          this.predicate = predicate;
        }
        SkipWhileOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new SkipWhileSubscriber(subscriber, this.predicate),
          );
        };
        return SkipWhileOperator2;
      })();
      var SkipWhileSubscriber = (function (_super) {
        __extends2(SkipWhileSubscriber2, _super);
        function SkipWhileSubscriber2(destination, predicate) {
          var _this = _super.call(this, destination) || this;
          _this.predicate = predicate;
          _this.skipping = true;
          _this.index = 0;
          return _this;
        }
        SkipWhileSubscriber2.prototype._next = function (value) {
          var destination = this.destination;
          if (this.skipping) {
            this.tryCallPredicate(value);
          }
          if (!this.skipping) {
            destination.next(value);
          }
        };
        SkipWhileSubscriber2.prototype.tryCallPredicate = function (value) {
          try {
            var result = this.predicate(value, this.index++);
            this.skipping = Boolean(result);
          } catch (err) {
            this.destination.error(err);
          }
        };
        return SkipWhileSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/startWith.js
  var require_startWith = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/startWith.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var concat_1 = require_concat();
      var isScheduler_1 = require_isScheduler();
      function startWith() {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          array[_i] = arguments[_i];
        }
        var scheduler = array[array.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
          array.pop();
          return function (source) {
            return concat_1.concat(array, source, scheduler);
          };
        } else {
          return function (source) {
            return concat_1.concat(array, source);
          };
        }
      }
      exports.startWith = startWith;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/observable/SubscribeOnObservable.js
  var require_SubscribeOnObservable = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/observable/SubscribeOnObservable.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Observable_1 = require_Observable();
      var asap_1 = require_asap();
      var isNumeric_1 = require_isNumeric();
      var SubscribeOnObservable = (function (_super) {
        __extends2(SubscribeOnObservable2, _super);
        function SubscribeOnObservable2(source, delayTime, scheduler) {
          if (delayTime === void 0) {
            delayTime = 0;
          }
          if (scheduler === void 0) {
            scheduler = asap_1.asap;
          }
          var _this = _super.call(this) || this;
          _this.source = source;
          _this.delayTime = delayTime;
          _this.scheduler = scheduler;
          if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {
            _this.delayTime = 0;
          }
          if (!scheduler || typeof scheduler.schedule !== 'function') {
            _this.scheduler = asap_1.asap;
          }
          return _this;
        }
        SubscribeOnObservable2.create = function (source, delay, scheduler) {
          if (delay === void 0) {
            delay = 0;
          }
          if (scheduler === void 0) {
            scheduler = asap_1.asap;
          }
          return new SubscribeOnObservable2(source, delay, scheduler);
        };
        SubscribeOnObservable2.dispatch = function (arg) {
          var source = arg.source,
            subscriber = arg.subscriber;
          return this.add(source.subscribe(subscriber));
        };
        SubscribeOnObservable2.prototype._subscribe = function (subscriber) {
          var delay = this.delayTime;
          var source = this.source;
          var scheduler = this.scheduler;
          return scheduler.schedule(SubscribeOnObservable2.dispatch, delay, {
            source,
            subscriber,
          });
        };
        return SubscribeOnObservable2;
      })(Observable_1.Observable);
      exports.SubscribeOnObservable = SubscribeOnObservable;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/subscribeOn.js
  var require_subscribeOn = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/subscribeOn.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var SubscribeOnObservable_1 = require_SubscribeOnObservable();
      function subscribeOn(scheduler, delay) {
        if (delay === void 0) {
          delay = 0;
        }
        return function subscribeOnOperatorFunction(source) {
          return source.lift(new SubscribeOnOperator(scheduler, delay));
        };
      }
      exports.subscribeOn = subscribeOn;
      var SubscribeOnOperator = (function () {
        function SubscribeOnOperator2(scheduler, delay) {
          this.scheduler = scheduler;
          this.delay = delay;
        }
        SubscribeOnOperator2.prototype.call = function (subscriber, source) {
          return new SubscribeOnObservable_1.SubscribeOnObservable(
            source,
            this.delay,
            this.scheduler,
          ).subscribe(subscriber);
        };
        return SubscribeOnOperator2;
      })();
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/switchMap.js
  var require_switchMap = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/switchMap.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var map_1 = require_map();
      var from_1 = require_from();
      var innerSubscribe_1 = require_innerSubscribe();
      function switchMap(project, resultSelector) {
        if (typeof resultSelector === 'function') {
          return function (source) {
            return source.pipe(
              switchMap(function (a, i) {
                return from_1.from(project(a, i)).pipe(
                  map_1.map(function (b, ii) {
                    return resultSelector(a, b, i, ii);
                  }),
                );
              }),
            );
          };
        }
        return function (source) {
          return source.lift(new SwitchMapOperator(project));
        };
      }
      exports.switchMap = switchMap;
      var SwitchMapOperator = (function () {
        function SwitchMapOperator2(project) {
          this.project = project;
        }
        SwitchMapOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new SwitchMapSubscriber(subscriber, this.project),
          );
        };
        return SwitchMapOperator2;
      })();
      var SwitchMapSubscriber = (function (_super) {
        __extends2(SwitchMapSubscriber2, _super);
        function SwitchMapSubscriber2(destination, project) {
          var _this = _super.call(this, destination) || this;
          _this.project = project;
          _this.index = 0;
          return _this;
        }
        SwitchMapSubscriber2.prototype._next = function (value) {
          var result;
          var index = this.index++;
          try {
            result = this.project(value, index);
          } catch (error) {
            this.destination.error(error);
            return;
          }
          this._innerSub(result);
        };
        SwitchMapSubscriber2.prototype._innerSub = function (result) {
          var innerSubscription = this.innerSubscription;
          if (innerSubscription) {
            innerSubscription.unsubscribe();
          }
          var innerSubscriber = new innerSubscribe_1.SimpleInnerSubscriber(
            this,
          );
          var destination = this.destination;
          destination.add(innerSubscriber);
          this.innerSubscription = innerSubscribe_1.innerSubscribe(
            result,
            innerSubscriber,
          );
          if (this.innerSubscription !== innerSubscriber) {
            destination.add(this.innerSubscription);
          }
        };
        SwitchMapSubscriber2.prototype._complete = function () {
          var innerSubscription = this.innerSubscription;
          if (!innerSubscription || innerSubscription.closed) {
            _super.prototype._complete.call(this);
          }
          this.unsubscribe();
        };
        SwitchMapSubscriber2.prototype._unsubscribe = function () {
          this.innerSubscription = void 0;
        };
        SwitchMapSubscriber2.prototype.notifyComplete = function () {
          this.innerSubscription = void 0;
          if (this.isStopped) {
            _super.prototype._complete.call(this);
          }
        };
        SwitchMapSubscriber2.prototype.notifyNext = function (innerValue) {
          this.destination.next(innerValue);
        };
        return SwitchMapSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/switchAll.js
  var require_switchAll = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/switchAll.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var switchMap_1 = require_switchMap();
      var identity_1 = require_identity();
      function switchAll() {
        return switchMap_1.switchMap(identity_1.identity);
      }
      exports.switchAll = switchAll;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/switchMapTo.js
  var require_switchMapTo = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/switchMapTo.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var switchMap_1 = require_switchMap();
      function switchMapTo(innerObservable, resultSelector) {
        return resultSelector
          ? switchMap_1.switchMap(function () {
              return innerObservable;
            }, resultSelector)
          : switchMap_1.switchMap(function () {
              return innerObservable;
            });
      }
      exports.switchMapTo = switchMapTo;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/takeUntil.js
  var require_takeUntil = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/takeUntil.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var innerSubscribe_1 = require_innerSubscribe();
      function takeUntil(notifier) {
        return function (source) {
          return source.lift(new TakeUntilOperator(notifier));
        };
      }
      exports.takeUntil = takeUntil;
      var TakeUntilOperator = (function () {
        function TakeUntilOperator2(notifier) {
          this.notifier = notifier;
        }
        TakeUntilOperator2.prototype.call = function (subscriber, source) {
          var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
          var notifierSubscription = innerSubscribe_1.innerSubscribe(
            this.notifier,
            new innerSubscribe_1.SimpleInnerSubscriber(takeUntilSubscriber),
          );
          if (notifierSubscription && !takeUntilSubscriber.seenValue) {
            takeUntilSubscriber.add(notifierSubscription);
            return source.subscribe(takeUntilSubscriber);
          }
          return takeUntilSubscriber;
        };
        return TakeUntilOperator2;
      })();
      var TakeUntilSubscriber = (function (_super) {
        __extends2(TakeUntilSubscriber2, _super);
        function TakeUntilSubscriber2(destination) {
          var _this = _super.call(this, destination) || this;
          _this.seenValue = false;
          return _this;
        }
        TakeUntilSubscriber2.prototype.notifyNext = function () {
          this.seenValue = true;
          this.complete();
        };
        TakeUntilSubscriber2.prototype.notifyComplete = function () {};
        return TakeUntilSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/takeWhile.js
  var require_takeWhile = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/takeWhile.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      function takeWhile(predicate, inclusive) {
        if (inclusive === void 0) {
          inclusive = false;
        }
        return function (source) {
          return source.lift(new TakeWhileOperator(predicate, inclusive));
        };
      }
      exports.takeWhile = takeWhile;
      var TakeWhileOperator = (function () {
        function TakeWhileOperator2(predicate, inclusive) {
          this.predicate = predicate;
          this.inclusive = inclusive;
        }
        TakeWhileOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive),
          );
        };
        return TakeWhileOperator2;
      })();
      var TakeWhileSubscriber = (function (_super) {
        __extends2(TakeWhileSubscriber2, _super);
        function TakeWhileSubscriber2(destination, predicate, inclusive) {
          var _this = _super.call(this, destination) || this;
          _this.predicate = predicate;
          _this.inclusive = inclusive;
          _this.index = 0;
          return _this;
        }
        TakeWhileSubscriber2.prototype._next = function (value) {
          var destination = this.destination;
          var result;
          try {
            result = this.predicate(value, this.index++);
          } catch (err) {
            destination.error(err);
            return;
          }
          this.nextOrComplete(value, result);
        };
        TakeWhileSubscriber2.prototype.nextOrComplete = function (
          value,
          predicateResult,
        ) {
          var destination = this.destination;
          if (Boolean(predicateResult)) {
            destination.next(value);
          } else {
            if (this.inclusive) {
              destination.next(value);
            }
            destination.complete();
          }
        };
        return TakeWhileSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/tap.js
  var require_tap = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/tap.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var noop_1 = require_noop();
      var isFunction_1 = require_isFunction();
      function tap(nextOrObserver, error, complete) {
        return function tapOperatorFunction(source) {
          return source.lift(new DoOperator(nextOrObserver, error, complete));
        };
      }
      exports.tap = tap;
      var DoOperator = (function () {
        function DoOperator2(nextOrObserver, error, complete) {
          this.nextOrObserver = nextOrObserver;
          this.error = error;
          this.complete = complete;
        }
        DoOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new TapSubscriber(
              subscriber,
              this.nextOrObserver,
              this.error,
              this.complete,
            ),
          );
        };
        return DoOperator2;
      })();
      var TapSubscriber = (function (_super) {
        __extends2(TapSubscriber2, _super);
        function TapSubscriber2(destination, observerOrNext, error, complete) {
          var _this = _super.call(this, destination) || this;
          _this._tapNext = noop_1.noop;
          _this._tapError = noop_1.noop;
          _this._tapComplete = noop_1.noop;
          _this._tapError = error || noop_1.noop;
          _this._tapComplete = complete || noop_1.noop;
          if (isFunction_1.isFunction(observerOrNext)) {
            _this._context = _this;
            _this._tapNext = observerOrNext;
          } else if (observerOrNext) {
            _this._context = observerOrNext;
            _this._tapNext = observerOrNext.next || noop_1.noop;
            _this._tapError = observerOrNext.error || noop_1.noop;
            _this._tapComplete = observerOrNext.complete || noop_1.noop;
          }
          return _this;
        }
        TapSubscriber2.prototype._next = function (value) {
          try {
            this._tapNext.call(this._context, value);
          } catch (err) {
            this.destination.error(err);
            return;
          }
          this.destination.next(value);
        };
        TapSubscriber2.prototype._error = function (err) {
          try {
            this._tapError.call(this._context, err);
          } catch (err2) {
            this.destination.error(err2);
            return;
          }
          this.destination.error(err);
        };
        TapSubscriber2.prototype._complete = function () {
          try {
            this._tapComplete.call(this._context);
          } catch (err) {
            this.destination.error(err);
            return;
          }
          return this.destination.complete();
        };
        return TapSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/throttle.js
  var require_throttle = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/throttle.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var innerSubscribe_1 = require_innerSubscribe();
      exports.defaultThrottleConfig = {
        leading: true,
        trailing: false,
      };
      function throttle(durationSelector, config2) {
        if (config2 === void 0) {
          config2 = exports.defaultThrottleConfig;
        }
        return function (source) {
          return source.lift(
            new ThrottleOperator(
              durationSelector,
              !!config2.leading,
              !!config2.trailing,
            ),
          );
        };
      }
      exports.throttle = throttle;
      var ThrottleOperator = (function () {
        function ThrottleOperator2(durationSelector, leading, trailing) {
          this.durationSelector = durationSelector;
          this.leading = leading;
          this.trailing = trailing;
        }
        ThrottleOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new ThrottleSubscriber(
              subscriber,
              this.durationSelector,
              this.leading,
              this.trailing,
            ),
          );
        };
        return ThrottleOperator2;
      })();
      var ThrottleSubscriber = (function (_super) {
        __extends2(ThrottleSubscriber2, _super);
        function ThrottleSubscriber2(
          destination,
          durationSelector,
          _leading,
          _trailing,
        ) {
          var _this = _super.call(this, destination) || this;
          _this.destination = destination;
          _this.durationSelector = durationSelector;
          _this._leading = _leading;
          _this._trailing = _trailing;
          _this._hasValue = false;
          return _this;
        }
        ThrottleSubscriber2.prototype._next = function (value) {
          this._hasValue = true;
          this._sendValue = value;
          if (!this._throttled) {
            if (this._leading) {
              this.send();
            } else {
              this.throttle(value);
            }
          }
        };
        ThrottleSubscriber2.prototype.send = function () {
          var _a = this,
            _hasValue = _a._hasValue,
            _sendValue = _a._sendValue;
          if (_hasValue) {
            this.destination.next(_sendValue);
            this.throttle(_sendValue);
          }
          this._hasValue = false;
          this._sendValue = void 0;
        };
        ThrottleSubscriber2.prototype.throttle = function (value) {
          var duration = this.tryDurationSelector(value);
          if (!!duration) {
            this.add(
              (this._throttled = innerSubscribe_1.innerSubscribe(
                duration,
                new innerSubscribe_1.SimpleInnerSubscriber(this),
              )),
            );
          }
        };
        ThrottleSubscriber2.prototype.tryDurationSelector = function (value) {
          try {
            return this.durationSelector(value);
          } catch (err) {
            this.destination.error(err);
            return null;
          }
        };
        ThrottleSubscriber2.prototype.throttlingDone = function () {
          var _a = this,
            _throttled = _a._throttled,
            _trailing = _a._trailing;
          if (_throttled) {
            _throttled.unsubscribe();
          }
          this._throttled = void 0;
          if (_trailing) {
            this.send();
          }
        };
        ThrottleSubscriber2.prototype.notifyNext = function () {
          this.throttlingDone();
        };
        ThrottleSubscriber2.prototype.notifyComplete = function () {
          this.throttlingDone();
        };
        return ThrottleSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/throttleTime.js
  var require_throttleTime = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/throttleTime.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var async_1 = require_async();
      var throttle_1 = require_throttle();
      function throttleTime(duration, scheduler, config2) {
        if (scheduler === void 0) {
          scheduler = async_1.async;
        }
        if (config2 === void 0) {
          config2 = throttle_1.defaultThrottleConfig;
        }
        return function (source) {
          return source.lift(
            new ThrottleTimeOperator(
              duration,
              scheduler,
              config2.leading,
              config2.trailing,
            ),
          );
        };
      }
      exports.throttleTime = throttleTime;
      var ThrottleTimeOperator = (function () {
        function ThrottleTimeOperator2(duration, scheduler, leading, trailing) {
          this.duration = duration;
          this.scheduler = scheduler;
          this.leading = leading;
          this.trailing = trailing;
        }
        ThrottleTimeOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new ThrottleTimeSubscriber(
              subscriber,
              this.duration,
              this.scheduler,
              this.leading,
              this.trailing,
            ),
          );
        };
        return ThrottleTimeOperator2;
      })();
      var ThrottleTimeSubscriber = (function (_super) {
        __extends2(ThrottleTimeSubscriber2, _super);
        function ThrottleTimeSubscriber2(
          destination,
          duration,
          scheduler,
          leading,
          trailing,
        ) {
          var _this = _super.call(this, destination) || this;
          _this.duration = duration;
          _this.scheduler = scheduler;
          _this.leading = leading;
          _this.trailing = trailing;
          _this._hasTrailingValue = false;
          _this._trailingValue = null;
          return _this;
        }
        ThrottleTimeSubscriber2.prototype._next = function (value) {
          if (this.throttled) {
            if (this.trailing) {
              this._trailingValue = value;
              this._hasTrailingValue = true;
            }
          } else {
            this.add(
              (this.throttled = this.scheduler.schedule(
                dispatchNext,
                this.duration,
                { subscriber: this },
              )),
            );
            if (this.leading) {
              this.destination.next(value);
            } else if (this.trailing) {
              this._trailingValue = value;
              this._hasTrailingValue = true;
            }
          }
        };
        ThrottleTimeSubscriber2.prototype._complete = function () {
          if (this._hasTrailingValue) {
            this.destination.next(this._trailingValue);
            this.destination.complete();
          } else {
            this.destination.complete();
          }
        };
        ThrottleTimeSubscriber2.prototype.clearThrottle = function () {
          var throttled = this.throttled;
          if (throttled) {
            if (this.trailing && this._hasTrailingValue) {
              this.destination.next(this._trailingValue);
              this._trailingValue = null;
              this._hasTrailingValue = false;
            }
            throttled.unsubscribe();
            this.remove(throttled);
            this.throttled = null;
          }
        };
        return ThrottleTimeSubscriber2;
      })(Subscriber_1.Subscriber);
      function dispatchNext(arg) {
        var subscriber = arg.subscriber;
        subscriber.clearThrottle();
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/timeInterval.js
  var require_timeInterval = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/timeInterval.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var async_1 = require_async();
      var scan_1 = require_scan();
      var defer_1 = require_defer();
      var map_1 = require_map();
      function timeInterval(scheduler) {
        if (scheduler === void 0) {
          scheduler = async_1.async;
        }
        return function (source) {
          return defer_1.defer(function () {
            return source.pipe(
              scan_1.scan(
                function (_a, value) {
                  var current = _a.current;
                  return { value, current: scheduler.now(), last: current };
                },
                { current: scheduler.now(), value: void 0, last: void 0 },
              ),
              map_1.map(function (_a) {
                var current = _a.current,
                  last = _a.last,
                  value = _a.value;
                return new TimeInterval(value, current - last);
              }),
            );
          });
        };
      }
      exports.timeInterval = timeInterval;
      var TimeInterval = (function () {
        function TimeInterval2(value, interval) {
          this.value = value;
          this.interval = interval;
        }
        return TimeInterval2;
      })();
      exports.TimeInterval = TimeInterval;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/timeoutWith.js
  var require_timeoutWith = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/timeoutWith.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var async_1 = require_async();
      var isDate_1 = require_isDate();
      var innerSubscribe_1 = require_innerSubscribe();
      function timeoutWith(due, withObservable, scheduler) {
        if (scheduler === void 0) {
          scheduler = async_1.async;
        }
        return function (source) {
          var absoluteTimeout = isDate_1.isDate(due);
          var waitFor = absoluteTimeout
            ? +due - scheduler.now()
            : Math.abs(due);
          return source.lift(
            new TimeoutWithOperator(
              waitFor,
              absoluteTimeout,
              withObservable,
              scheduler,
            ),
          );
        };
      }
      exports.timeoutWith = timeoutWith;
      var TimeoutWithOperator = (function () {
        function TimeoutWithOperator2(
          waitFor,
          absoluteTimeout,
          withObservable,
          scheduler,
        ) {
          this.waitFor = waitFor;
          this.absoluteTimeout = absoluteTimeout;
          this.withObservable = withObservable;
          this.scheduler = scheduler;
        }
        TimeoutWithOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new TimeoutWithSubscriber(
              subscriber,
              this.absoluteTimeout,
              this.waitFor,
              this.withObservable,
              this.scheduler,
            ),
          );
        };
        return TimeoutWithOperator2;
      })();
      var TimeoutWithSubscriber = (function (_super) {
        __extends2(TimeoutWithSubscriber2, _super);
        function TimeoutWithSubscriber2(
          destination,
          absoluteTimeout,
          waitFor,
          withObservable,
          scheduler,
        ) {
          var _this = _super.call(this, destination) || this;
          _this.absoluteTimeout = absoluteTimeout;
          _this.waitFor = waitFor;
          _this.withObservable = withObservable;
          _this.scheduler = scheduler;
          _this.scheduleTimeout();
          return _this;
        }
        TimeoutWithSubscriber2.dispatchTimeout = function (subscriber) {
          var withObservable = subscriber.withObservable;
          subscriber._unsubscribeAndRecycle();
          subscriber.add(
            innerSubscribe_1.innerSubscribe(
              withObservable,
              new innerSubscribe_1.SimpleInnerSubscriber(subscriber),
            ),
          );
        };
        TimeoutWithSubscriber2.prototype.scheduleTimeout = function () {
          var action = this.action;
          if (action) {
            this.action = action.schedule(this, this.waitFor);
          } else {
            this.add(
              (this.action = this.scheduler.schedule(
                TimeoutWithSubscriber2.dispatchTimeout,
                this.waitFor,
                this,
              )),
            );
          }
        };
        TimeoutWithSubscriber2.prototype._next = function (value) {
          if (!this.absoluteTimeout) {
            this.scheduleTimeout();
          }
          _super.prototype._next.call(this, value);
        };
        TimeoutWithSubscriber2.prototype._unsubscribe = function () {
          this.action = void 0;
          this.scheduler = null;
          this.withObservable = null;
        };
        return TimeoutWithSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/timeout.js
  var require_timeout = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/timeout.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var async_1 = require_async();
      var TimeoutError_1 = require_TimeoutError();
      var timeoutWith_1 = require_timeoutWith();
      var throwError_1 = require_throwError();
      function timeout(due, scheduler) {
        if (scheduler === void 0) {
          scheduler = async_1.async;
        }
        return timeoutWith_1.timeoutWith(
          due,
          throwError_1.throwError(new TimeoutError_1.TimeoutError()),
          scheduler,
        );
      }
      exports.timeout = timeout;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/timestamp.js
  var require_timestamp = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/timestamp.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var async_1 = require_async();
      var map_1 = require_map();
      function timestamp(scheduler) {
        if (scheduler === void 0) {
          scheduler = async_1.async;
        }
        return map_1.map(function (value) {
          return new Timestamp(value, scheduler.now());
        });
      }
      exports.timestamp = timestamp;
      var Timestamp = (function () {
        function Timestamp2(value, timestamp2) {
          this.value = value;
          this.timestamp = timestamp2;
        }
        return Timestamp2;
      })();
      exports.Timestamp = Timestamp;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/toArray.js
  var require_toArray = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/toArray.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var reduce_1 = require_reduce();
      function toArrayReducer(arr, item, index) {
        if (index === 0) {
          return [item];
        }
        arr.push(item);
        return arr;
      }
      function toArray() {
        return reduce_1.reduce(toArrayReducer, []);
      }
      exports.toArray = toArray;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/window.js
  var require_window = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/window.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subject_1 = require_Subject();
      var innerSubscribe_1 = require_innerSubscribe();
      function window2(windowBoundaries) {
        return function windowOperatorFunction(source) {
          return source.lift(new WindowOperator(windowBoundaries));
        };
      }
      exports.window = window2;
      var WindowOperator = (function () {
        function WindowOperator2(windowBoundaries) {
          this.windowBoundaries = windowBoundaries;
        }
        WindowOperator2.prototype.call = function (subscriber, source) {
          var windowSubscriber = new WindowSubscriber(subscriber);
          var sourceSubscription = source.subscribe(windowSubscriber);
          if (!sourceSubscription.closed) {
            windowSubscriber.add(
              innerSubscribe_1.innerSubscribe(
                this.windowBoundaries,
                new innerSubscribe_1.SimpleInnerSubscriber(windowSubscriber),
              ),
            );
          }
          return sourceSubscription;
        };
        return WindowOperator2;
      })();
      var WindowSubscriber = (function (_super) {
        __extends2(WindowSubscriber2, _super);
        function WindowSubscriber2(destination) {
          var _this = _super.call(this, destination) || this;
          _this.window = new Subject_1.Subject();
          destination.next(_this.window);
          return _this;
        }
        WindowSubscriber2.prototype.notifyNext = function () {
          this.openWindow();
        };
        WindowSubscriber2.prototype.notifyError = function (error) {
          this._error(error);
        };
        WindowSubscriber2.prototype.notifyComplete = function () {
          this._complete();
        };
        WindowSubscriber2.prototype._next = function (value) {
          this.window.next(value);
        };
        WindowSubscriber2.prototype._error = function (err) {
          this.window.error(err);
          this.destination.error(err);
        };
        WindowSubscriber2.prototype._complete = function () {
          this.window.complete();
          this.destination.complete();
        };
        WindowSubscriber2.prototype._unsubscribe = function () {
          this.window = null;
        };
        WindowSubscriber2.prototype.openWindow = function () {
          var prevWindow = this.window;
          if (prevWindow) {
            prevWindow.complete();
          }
          var destination = this.destination;
          var newWindow = (this.window = new Subject_1.Subject());
          destination.next(newWindow);
        };
        return WindowSubscriber2;
      })(innerSubscribe_1.SimpleOuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/windowCount.js
  var require_windowCount = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/windowCount.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subscriber_1 = require_Subscriber();
      var Subject_1 = require_Subject();
      function windowCount(windowSize, startWindowEvery) {
        if (startWindowEvery === void 0) {
          startWindowEvery = 0;
        }
        return function windowCountOperatorFunction(source) {
          return source.lift(
            new WindowCountOperator(windowSize, startWindowEvery),
          );
        };
      }
      exports.windowCount = windowCount;
      var WindowCountOperator = (function () {
        function WindowCountOperator2(windowSize, startWindowEvery) {
          this.windowSize = windowSize;
          this.startWindowEvery = startWindowEvery;
        }
        WindowCountOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new WindowCountSubscriber(
              subscriber,
              this.windowSize,
              this.startWindowEvery,
            ),
          );
        };
        return WindowCountOperator2;
      })();
      var WindowCountSubscriber = (function (_super) {
        __extends2(WindowCountSubscriber2, _super);
        function WindowCountSubscriber2(
          destination,
          windowSize,
          startWindowEvery,
        ) {
          var _this = _super.call(this, destination) || this;
          _this.destination = destination;
          _this.windowSize = windowSize;
          _this.startWindowEvery = startWindowEvery;
          _this.windows = [new Subject_1.Subject()];
          _this.count = 0;
          destination.next(_this.windows[0]);
          return _this;
        }
        WindowCountSubscriber2.prototype._next = function (value) {
          var startWindowEvery =
            this.startWindowEvery > 0 ? this.startWindowEvery : this.windowSize;
          var destination = this.destination;
          var windowSize = this.windowSize;
          var windows = this.windows;
          var len = windows.length;
          for (var i = 0; i < len && !this.closed; i++) {
            windows[i].next(value);
          }
          var c = this.count - windowSize + 1;
          if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
            windows.shift().complete();
          }
          if (++this.count % startWindowEvery === 0 && !this.closed) {
            var window_1 = new Subject_1.Subject();
            windows.push(window_1);
            destination.next(window_1);
          }
        };
        WindowCountSubscriber2.prototype._error = function (err) {
          var windows = this.windows;
          if (windows) {
            while (windows.length > 0 && !this.closed) {
              windows.shift().error(err);
            }
          }
          this.destination.error(err);
        };
        WindowCountSubscriber2.prototype._complete = function () {
          var windows = this.windows;
          if (windows) {
            while (windows.length > 0 && !this.closed) {
              windows.shift().complete();
            }
          }
          this.destination.complete();
        };
        WindowCountSubscriber2.prototype._unsubscribe = function () {
          this.count = 0;
          this.windows = null;
        };
        return WindowCountSubscriber2;
      })(Subscriber_1.Subscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/windowTime.js
  var require_windowTime = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/windowTime.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subject_1 = require_Subject();
      var async_1 = require_async();
      var Subscriber_1 = require_Subscriber();
      var isNumeric_1 = require_isNumeric();
      var isScheduler_1 = require_isScheduler();
      function windowTime(windowTimeSpan) {
        var scheduler = async_1.async;
        var windowCreationInterval = null;
        var maxWindowSize = Number.POSITIVE_INFINITY;
        if (isScheduler_1.isScheduler(arguments[3])) {
          scheduler = arguments[3];
        }
        if (isScheduler_1.isScheduler(arguments[2])) {
          scheduler = arguments[2];
        } else if (isNumeric_1.isNumeric(arguments[2])) {
          maxWindowSize = Number(arguments[2]);
        }
        if (isScheduler_1.isScheduler(arguments[1])) {
          scheduler = arguments[1];
        } else if (isNumeric_1.isNumeric(arguments[1])) {
          windowCreationInterval = Number(arguments[1]);
        }
        return function windowTimeOperatorFunction(source) {
          return source.lift(
            new WindowTimeOperator(
              windowTimeSpan,
              windowCreationInterval,
              maxWindowSize,
              scheduler,
            ),
          );
        };
      }
      exports.windowTime = windowTime;
      var WindowTimeOperator = (function () {
        function WindowTimeOperator2(
          windowTimeSpan,
          windowCreationInterval,
          maxWindowSize,
          scheduler,
        ) {
          this.windowTimeSpan = windowTimeSpan;
          this.windowCreationInterval = windowCreationInterval;
          this.maxWindowSize = maxWindowSize;
          this.scheduler = scheduler;
        }
        WindowTimeOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new WindowTimeSubscriber(
              subscriber,
              this.windowTimeSpan,
              this.windowCreationInterval,
              this.maxWindowSize,
              this.scheduler,
            ),
          );
        };
        return WindowTimeOperator2;
      })();
      var CountedSubject = (function (_super) {
        __extends2(CountedSubject2, _super);
        function CountedSubject2() {
          var _this =
            (_super !== null && _super.apply(this, arguments)) || this;
          _this._numberOfNextedValues = 0;
          return _this;
        }
        CountedSubject2.prototype.next = function (value) {
          this._numberOfNextedValues++;
          _super.prototype.next.call(this, value);
        };
        Object.defineProperty(
          CountedSubject2.prototype,
          'numberOfNextedValues',
          {
            get: function () {
              return this._numberOfNextedValues;
            },
            enumerable: true,
            configurable: true,
          },
        );
        return CountedSubject2;
      })(Subject_1.Subject);
      var WindowTimeSubscriber = (function (_super) {
        __extends2(WindowTimeSubscriber2, _super);
        function WindowTimeSubscriber2(
          destination,
          windowTimeSpan,
          windowCreationInterval,
          maxWindowSize,
          scheduler,
        ) {
          var _this = _super.call(this, destination) || this;
          _this.destination = destination;
          _this.windowTimeSpan = windowTimeSpan;
          _this.windowCreationInterval = windowCreationInterval;
          _this.maxWindowSize = maxWindowSize;
          _this.scheduler = scheduler;
          _this.windows = [];
          var window2 = _this.openWindow();
          if (windowCreationInterval !== null && windowCreationInterval >= 0) {
            var closeState = {
              subscriber: _this,
              window: window2,
              context: null,
            };
            var creationState = {
              windowTimeSpan,
              windowCreationInterval,
              subscriber: _this,
              scheduler,
            };
            _this.add(
              scheduler.schedule(
                dispatchWindowClose,
                windowTimeSpan,
                closeState,
              ),
            );
            _this.add(
              scheduler.schedule(
                dispatchWindowCreation,
                windowCreationInterval,
                creationState,
              ),
            );
          } else {
            var timeSpanOnlyState = {
              subscriber: _this,
              window: window2,
              windowTimeSpan,
            };
            _this.add(
              scheduler.schedule(
                dispatchWindowTimeSpanOnly,
                windowTimeSpan,
                timeSpanOnlyState,
              ),
            );
          }
          return _this;
        }
        WindowTimeSubscriber2.prototype._next = function (value) {
          var windows = this.windows;
          var len = windows.length;
          for (var i = 0; i < len; i++) {
            var window_1 = windows[i];
            if (!window_1.closed) {
              window_1.next(value);
              if (window_1.numberOfNextedValues >= this.maxWindowSize) {
                this.closeWindow(window_1);
              }
            }
          }
        };
        WindowTimeSubscriber2.prototype._error = function (err) {
          var windows = this.windows;
          while (windows.length > 0) {
            windows.shift().error(err);
          }
          this.destination.error(err);
        };
        WindowTimeSubscriber2.prototype._complete = function () {
          var windows = this.windows;
          while (windows.length > 0) {
            var window_2 = windows.shift();
            if (!window_2.closed) {
              window_2.complete();
            }
          }
          this.destination.complete();
        };
        WindowTimeSubscriber2.prototype.openWindow = function () {
          var window2 = new CountedSubject();
          this.windows.push(window2);
          var destination = this.destination;
          destination.next(window2);
          return window2;
        };
        WindowTimeSubscriber2.prototype.closeWindow = function (window2) {
          window2.complete();
          var windows = this.windows;
          windows.splice(windows.indexOf(window2), 1);
        };
        return WindowTimeSubscriber2;
      })(Subscriber_1.Subscriber);
      function dispatchWindowTimeSpanOnly(state) {
        var subscriber = state.subscriber,
          windowTimeSpan = state.windowTimeSpan,
          window2 = state.window;
        if (window2) {
          subscriber.closeWindow(window2);
        }
        state.window = subscriber.openWindow();
        this.schedule(state, windowTimeSpan);
      }
      function dispatchWindowCreation(state) {
        var windowTimeSpan = state.windowTimeSpan,
          subscriber = state.subscriber,
          scheduler = state.scheduler,
          windowCreationInterval = state.windowCreationInterval;
        var window2 = subscriber.openWindow();
        var action = this;
        var context2 = { action, subscription: null };
        var timeSpanState = { subscriber, window: window2, context: context2 };
        context2.subscription = scheduler.schedule(
          dispatchWindowClose,
          windowTimeSpan,
          timeSpanState,
        );
        action.add(context2.subscription);
        action.schedule(state, windowCreationInterval);
      }
      function dispatchWindowClose(state) {
        var subscriber = state.subscriber,
          window2 = state.window,
          context2 = state.context;
        if (context2 && context2.action && context2.subscription) {
          context2.action.remove(context2.subscription);
        }
        subscriber.closeWindow(window2);
      }
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/windowToggle.js
  var require_windowToggle = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/windowToggle.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subject_1 = require_Subject();
      var Subscription_1 = require_Subscription();
      var OuterSubscriber_1 = require_OuterSubscriber();
      var subscribeToResult_1 = require_subscribeToResult();
      function windowToggle(openings, closingSelector) {
        return function (source) {
          return source.lift(
            new WindowToggleOperator(openings, closingSelector),
          );
        };
      }
      exports.windowToggle = windowToggle;
      var WindowToggleOperator = (function () {
        function WindowToggleOperator2(openings, closingSelector) {
          this.openings = openings;
          this.closingSelector = closingSelector;
        }
        WindowToggleOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new WindowToggleSubscriber(
              subscriber,
              this.openings,
              this.closingSelector,
            ),
          );
        };
        return WindowToggleOperator2;
      })();
      var WindowToggleSubscriber = (function (_super) {
        __extends2(WindowToggleSubscriber2, _super);
        function WindowToggleSubscriber2(
          destination,
          openings,
          closingSelector,
        ) {
          var _this = _super.call(this, destination) || this;
          _this.openings = openings;
          _this.closingSelector = closingSelector;
          _this.contexts = [];
          _this.add(
            (_this.openSubscription = subscribeToResult_1.subscribeToResult(
              _this,
              openings,
              openings,
            )),
          );
          return _this;
        }
        WindowToggleSubscriber2.prototype._next = function (value) {
          var contexts = this.contexts;
          if (contexts) {
            var len = contexts.length;
            for (var i = 0; i < len; i++) {
              contexts[i].window.next(value);
            }
          }
        };
        WindowToggleSubscriber2.prototype._error = function (err) {
          var contexts = this.contexts;
          this.contexts = null;
          if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
              var context_1 = contexts[index];
              context_1.window.error(err);
              context_1.subscription.unsubscribe();
            }
          }
          _super.prototype._error.call(this, err);
        };
        WindowToggleSubscriber2.prototype._complete = function () {
          var contexts = this.contexts;
          this.contexts = null;
          if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
              var context_2 = contexts[index];
              context_2.window.complete();
              context_2.subscription.unsubscribe();
            }
          }
          _super.prototype._complete.call(this);
        };
        WindowToggleSubscriber2.prototype._unsubscribe = function () {
          var contexts = this.contexts;
          this.contexts = null;
          if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
              var context_3 = contexts[index];
              context_3.window.unsubscribe();
              context_3.subscription.unsubscribe();
            }
          }
        };
        WindowToggleSubscriber2.prototype.notifyNext = function (
          outerValue,
          innerValue,
          outerIndex,
          innerIndex,
          innerSub,
        ) {
          if (outerValue === this.openings) {
            var closingNotifier = void 0;
            try {
              var closingSelector = this.closingSelector;
              closingNotifier = closingSelector(innerValue);
            } catch (e) {
              return this.error(e);
            }
            var window_1 = new Subject_1.Subject();
            var subscription = new Subscription_1.Subscription();
            var context_4 = { window: window_1, subscription };
            this.contexts.push(context_4);
            var innerSubscription = subscribeToResult_1.subscribeToResult(
              this,
              closingNotifier,
              context_4,
            );
            if (innerSubscription.closed) {
              this.closeWindow(this.contexts.length - 1);
            } else {
              innerSubscription.context = context_4;
              subscription.add(innerSubscription);
            }
            this.destination.next(window_1);
          } else {
            this.closeWindow(this.contexts.indexOf(outerValue));
          }
        };
        WindowToggleSubscriber2.prototype.notifyError = function (err) {
          this.error(err);
        };
        WindowToggleSubscriber2.prototype.notifyComplete = function (inner) {
          if (inner !== this.openSubscription) {
            this.closeWindow(this.contexts.indexOf(inner.context));
          }
        };
        WindowToggleSubscriber2.prototype.closeWindow = function (index) {
          if (index === -1) {
            return;
          }
          var contexts = this.contexts;
          var context2 = contexts[index];
          var window2 = context2.window,
            subscription = context2.subscription;
          contexts.splice(index, 1);
          window2.complete();
          subscription.unsubscribe();
        };
        return WindowToggleSubscriber2;
      })(OuterSubscriber_1.OuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/windowWhen.js
  var require_windowWhen = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/windowWhen.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var Subject_1 = require_Subject();
      var OuterSubscriber_1 = require_OuterSubscriber();
      var subscribeToResult_1 = require_subscribeToResult();
      function windowWhen(closingSelector) {
        return function windowWhenOperatorFunction(source) {
          return source.lift(new WindowOperator(closingSelector));
        };
      }
      exports.windowWhen = windowWhen;
      var WindowOperator = (function () {
        function WindowOperator2(closingSelector) {
          this.closingSelector = closingSelector;
        }
        WindowOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new WindowSubscriber(subscriber, this.closingSelector),
          );
        };
        return WindowOperator2;
      })();
      var WindowSubscriber = (function (_super) {
        __extends2(WindowSubscriber2, _super);
        function WindowSubscriber2(destination, closingSelector) {
          var _this = _super.call(this, destination) || this;
          _this.destination = destination;
          _this.closingSelector = closingSelector;
          _this.openWindow();
          return _this;
        }
        WindowSubscriber2.prototype.notifyNext = function (
          _outerValue,
          _innerValue,
          _outerIndex,
          _innerIndex,
          innerSub,
        ) {
          this.openWindow(innerSub);
        };
        WindowSubscriber2.prototype.notifyError = function (error) {
          this._error(error);
        };
        WindowSubscriber2.prototype.notifyComplete = function (innerSub) {
          this.openWindow(innerSub);
        };
        WindowSubscriber2.prototype._next = function (value) {
          this.window.next(value);
        };
        WindowSubscriber2.prototype._error = function (err) {
          this.window.error(err);
          this.destination.error(err);
          this.unsubscribeClosingNotification();
        };
        WindowSubscriber2.prototype._complete = function () {
          this.window.complete();
          this.destination.complete();
          this.unsubscribeClosingNotification();
        };
        WindowSubscriber2.prototype.unsubscribeClosingNotification =
          function () {
            if (this.closingNotification) {
              this.closingNotification.unsubscribe();
            }
          };
        WindowSubscriber2.prototype.openWindow = function (innerSub) {
          if (innerSub === void 0) {
            innerSub = null;
          }
          if (innerSub) {
            this.remove(innerSub);
            innerSub.unsubscribe();
          }
          var prevWindow = this.window;
          if (prevWindow) {
            prevWindow.complete();
          }
          var window2 = (this.window = new Subject_1.Subject());
          this.destination.next(window2);
          var closingNotifier;
          try {
            var closingSelector = this.closingSelector;
            closingNotifier = closingSelector();
          } catch (e) {
            this.destination.error(e);
            this.window.error(e);
            return;
          }
          this.add(
            (this.closingNotification = subscribeToResult_1.subscribeToResult(
              this,
              closingNotifier,
            )),
          );
        };
        return WindowSubscriber2;
      })(OuterSubscriber_1.OuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/withLatestFrom.js
  var require_withLatestFrom = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/withLatestFrom.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var OuterSubscriber_1 = require_OuterSubscriber();
      var subscribeToResult_1 = require_subscribeToResult();
      function withLatestFrom() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return function (source) {
          var project;
          if (typeof args[args.length - 1] === 'function') {
            project = args.pop();
          }
          var observables = args;
          return source.lift(new WithLatestFromOperator(observables, project));
        };
      }
      exports.withLatestFrom = withLatestFrom;
      var WithLatestFromOperator = (function () {
        function WithLatestFromOperator2(observables, project) {
          this.observables = observables;
          this.project = project;
        }
        WithLatestFromOperator2.prototype.call = function (subscriber, source) {
          return source.subscribe(
            new WithLatestFromSubscriber(
              subscriber,
              this.observables,
              this.project,
            ),
          );
        };
        return WithLatestFromOperator2;
      })();
      var WithLatestFromSubscriber = (function (_super) {
        __extends2(WithLatestFromSubscriber2, _super);
        function WithLatestFromSubscriber2(destination, observables, project) {
          var _this = _super.call(this, destination) || this;
          _this.observables = observables;
          _this.project = project;
          _this.toRespond = [];
          var len = observables.length;
          _this.values = new Array(len);
          for (var i = 0; i < len; i++) {
            _this.toRespond.push(i);
          }
          for (var i = 0; i < len; i++) {
            var observable2 = observables[i];
            _this.add(
              subscribeToResult_1.subscribeToResult(
                _this,
                observable2,
                void 0,
                i,
              ),
            );
          }
          return _this;
        }
        WithLatestFromSubscriber2.prototype.notifyNext = function (
          _outerValue,
          innerValue,
          outerIndex,
        ) {
          this.values[outerIndex] = innerValue;
          var toRespond = this.toRespond;
          if (toRespond.length > 0) {
            var found = toRespond.indexOf(outerIndex);
            if (found !== -1) {
              toRespond.splice(found, 1);
            }
          }
        };
        WithLatestFromSubscriber2.prototype.notifyComplete = function () {};
        WithLatestFromSubscriber2.prototype._next = function (value) {
          if (this.toRespond.length === 0) {
            var args = [value].concat(this.values);
            if (this.project) {
              this._tryProject(args);
            } else {
              this.destination.next(args);
            }
          }
        };
        WithLatestFromSubscriber2.prototype._tryProject = function (args) {
          var result;
          try {
            result = this.project.apply(this, args);
          } catch (err) {
            this.destination.error(err);
            return;
          }
          this.destination.next(result);
        };
        return WithLatestFromSubscriber2;
      })(OuterSubscriber_1.OuterSubscriber);
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/zip.js
  var require_zip2 = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/zip.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var zip_1 = require_zip();
      function zip() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          observables[_i] = arguments[_i];
        }
        return function zipOperatorFunction(source) {
          return source.lift.call(
            zip_1.zip.apply(void 0, [source].concat(observables)),
          );
        };
      }
      exports.zip = zip;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/internal/operators/zipAll.js
  var require_zipAll = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/internal/operators/zipAll.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var zip_1 = require_zip();
      function zipAll(project) {
        return function (source) {
          return source.lift(new zip_1.ZipOperator(project));
        };
      }
      exports.zipAll = zipAll;
    },
  });

  // node_modules/neo4j-driver/node_modules/rxjs/operators/index.js
  var require_operators = __commonJS({
    'node_modules/neo4j-driver/node_modules/rxjs/operators/index.js'(exports) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var audit_1 = require_audit();
      exports.audit = audit_1.audit;
      var auditTime_1 = require_auditTime();
      exports.auditTime = auditTime_1.auditTime;
      var buffer_1 = require_buffer();
      exports.buffer = buffer_1.buffer;
      var bufferCount_1 = require_bufferCount();
      exports.bufferCount = bufferCount_1.bufferCount;
      var bufferTime_1 = require_bufferTime();
      exports.bufferTime = bufferTime_1.bufferTime;
      var bufferToggle_1 = require_bufferToggle();
      exports.bufferToggle = bufferToggle_1.bufferToggle;
      var bufferWhen_1 = require_bufferWhen();
      exports.bufferWhen = bufferWhen_1.bufferWhen;
      var catchError_1 = require_catchError();
      exports.catchError = catchError_1.catchError;
      var combineAll_1 = require_combineAll();
      exports.combineAll = combineAll_1.combineAll;
      var combineLatest_1 = require_combineLatest2();
      exports.combineLatest = combineLatest_1.combineLatest;
      var concat_1 = require_concat2();
      exports.concat = concat_1.concat;
      var concatAll_1 = require_concatAll();
      exports.concatAll = concatAll_1.concatAll;
      var concatMap_1 = require_concatMap();
      exports.concatMap = concatMap_1.concatMap;
      var concatMapTo_1 = require_concatMapTo();
      exports.concatMapTo = concatMapTo_1.concatMapTo;
      var count_1 = require_count();
      exports.count = count_1.count;
      var debounce_1 = require_debounce();
      exports.debounce = debounce_1.debounce;
      var debounceTime_1 = require_debounceTime();
      exports.debounceTime = debounceTime_1.debounceTime;
      var defaultIfEmpty_1 = require_defaultIfEmpty();
      exports.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;
      var delay_1 = require_delay();
      exports.delay = delay_1.delay;
      var delayWhen_1 = require_delayWhen();
      exports.delayWhen = delayWhen_1.delayWhen;
      var dematerialize_1 = require_dematerialize();
      exports.dematerialize = dematerialize_1.dematerialize;
      var distinct_1 = require_distinct();
      exports.distinct = distinct_1.distinct;
      var distinctUntilChanged_1 = require_distinctUntilChanged();
      exports.distinctUntilChanged =
        distinctUntilChanged_1.distinctUntilChanged;
      var distinctUntilKeyChanged_1 = require_distinctUntilKeyChanged();
      exports.distinctUntilKeyChanged =
        distinctUntilKeyChanged_1.distinctUntilKeyChanged;
      var elementAt_1 = require_elementAt();
      exports.elementAt = elementAt_1.elementAt;
      var endWith_1 = require_endWith();
      exports.endWith = endWith_1.endWith;
      var every_1 = require_every();
      exports.every = every_1.every;
      var exhaust_1 = require_exhaust();
      exports.exhaust = exhaust_1.exhaust;
      var exhaustMap_1 = require_exhaustMap();
      exports.exhaustMap = exhaustMap_1.exhaustMap;
      var expand_1 = require_expand();
      exports.expand = expand_1.expand;
      var filter_1 = require_filter();
      exports.filter = filter_1.filter;
      var finalize_1 = require_finalize();
      exports.finalize = finalize_1.finalize;
      var find_1 = require_find();
      exports.find = find_1.find;
      var findIndex_1 = require_findIndex();
      exports.findIndex = findIndex_1.findIndex;
      var first_1 = require_first();
      exports.first = first_1.first;
      var groupBy_1 = require_groupBy();
      exports.groupBy = groupBy_1.groupBy;
      var ignoreElements_1 = require_ignoreElements();
      exports.ignoreElements = ignoreElements_1.ignoreElements;
      var isEmpty_1 = require_isEmpty();
      exports.isEmpty = isEmpty_1.isEmpty;
      var last_1 = require_last();
      exports.last = last_1.last;
      var map_1 = require_map();
      exports.map = map_1.map;
      var mapTo_1 = require_mapTo();
      exports.mapTo = mapTo_1.mapTo;
      var materialize_1 = require_materialize();
      exports.materialize = materialize_1.materialize;
      var max_1 = require_max();
      exports.max = max_1.max;
      var merge_1 = require_merge2();
      exports.merge = merge_1.merge;
      var mergeAll_1 = require_mergeAll();
      exports.mergeAll = mergeAll_1.mergeAll;
      var mergeMap_1 = require_mergeMap();
      exports.mergeMap = mergeMap_1.mergeMap;
      exports.flatMap = mergeMap_1.flatMap;
      var mergeMapTo_1 = require_mergeMapTo();
      exports.mergeMapTo = mergeMapTo_1.mergeMapTo;
      var mergeScan_1 = require_mergeScan();
      exports.mergeScan = mergeScan_1.mergeScan;
      var min_1 = require_min();
      exports.min = min_1.min;
      var multicast_1 = require_multicast();
      exports.multicast = multicast_1.multicast;
      var observeOn_1 = require_observeOn();
      exports.observeOn = observeOn_1.observeOn;
      var onErrorResumeNext_1 = require_onErrorResumeNext2();
      exports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;
      var pairwise_1 = require_pairwise();
      exports.pairwise = pairwise_1.pairwise;
      var partition_1 = require_partition2();
      exports.partition = partition_1.partition;
      var pluck_1 = require_pluck();
      exports.pluck = pluck_1.pluck;
      var publish_1 = require_publish();
      exports.publish = publish_1.publish;
      var publishBehavior_1 = require_publishBehavior();
      exports.publishBehavior = publishBehavior_1.publishBehavior;
      var publishLast_1 = require_publishLast();
      exports.publishLast = publishLast_1.publishLast;
      var publishReplay_1 = require_publishReplay();
      exports.publishReplay = publishReplay_1.publishReplay;
      var race_1 = require_race2();
      exports.race = race_1.race;
      var reduce_1 = require_reduce();
      exports.reduce = reduce_1.reduce;
      var repeat_1 = require_repeat();
      exports.repeat = repeat_1.repeat;
      var repeatWhen_1 = require_repeatWhen();
      exports.repeatWhen = repeatWhen_1.repeatWhen;
      var retry_1 = require_retry();
      exports.retry = retry_1.retry;
      var retryWhen_1 = require_retryWhen();
      exports.retryWhen = retryWhen_1.retryWhen;
      var refCount_1 = require_refCount();
      exports.refCount = refCount_1.refCount;
      var sample_1 = require_sample();
      exports.sample = sample_1.sample;
      var sampleTime_1 = require_sampleTime();
      exports.sampleTime = sampleTime_1.sampleTime;
      var scan_1 = require_scan();
      exports.scan = scan_1.scan;
      var sequenceEqual_1 = require_sequenceEqual();
      exports.sequenceEqual = sequenceEqual_1.sequenceEqual;
      var share_1 = require_share();
      exports.share = share_1.share;
      var shareReplay_1 = require_shareReplay();
      exports.shareReplay = shareReplay_1.shareReplay;
      var single_1 = require_single();
      exports.single = single_1.single;
      var skip_1 = require_skip();
      exports.skip = skip_1.skip;
      var skipLast_1 = require_skipLast();
      exports.skipLast = skipLast_1.skipLast;
      var skipUntil_1 = require_skipUntil();
      exports.skipUntil = skipUntil_1.skipUntil;
      var skipWhile_1 = require_skipWhile();
      exports.skipWhile = skipWhile_1.skipWhile;
      var startWith_1 = require_startWith();
      exports.startWith = startWith_1.startWith;
      var subscribeOn_1 = require_subscribeOn();
      exports.subscribeOn = subscribeOn_1.subscribeOn;
      var switchAll_1 = require_switchAll();
      exports.switchAll = switchAll_1.switchAll;
      var switchMap_1 = require_switchMap();
      exports.switchMap = switchMap_1.switchMap;
      var switchMapTo_1 = require_switchMapTo();
      exports.switchMapTo = switchMapTo_1.switchMapTo;
      var take_1 = require_take();
      exports.take = take_1.take;
      var takeLast_1 = require_takeLast();
      exports.takeLast = takeLast_1.takeLast;
      var takeUntil_1 = require_takeUntil();
      exports.takeUntil = takeUntil_1.takeUntil;
      var takeWhile_1 = require_takeWhile();
      exports.takeWhile = takeWhile_1.takeWhile;
      var tap_1 = require_tap();
      exports.tap = tap_1.tap;
      var throttle_1 = require_throttle();
      exports.throttle = throttle_1.throttle;
      var throttleTime_1 = require_throttleTime();
      exports.throttleTime = throttleTime_1.throttleTime;
      var throwIfEmpty_1 = require_throwIfEmpty();
      exports.throwIfEmpty = throwIfEmpty_1.throwIfEmpty;
      var timeInterval_1 = require_timeInterval();
      exports.timeInterval = timeInterval_1.timeInterval;
      var timeout_1 = require_timeout();
      exports.timeout = timeout_1.timeout;
      var timeoutWith_1 = require_timeoutWith();
      exports.timeoutWith = timeoutWith_1.timeoutWith;
      var timestamp_1 = require_timestamp();
      exports.timestamp = timestamp_1.timestamp;
      var toArray_1 = require_toArray();
      exports.toArray = toArray_1.toArray;
      var window_1 = require_window();
      exports.window = window_1.window;
      var windowCount_1 = require_windowCount();
      exports.windowCount = windowCount_1.windowCount;
      var windowTime_1 = require_windowTime();
      exports.windowTime = windowTime_1.windowTime;
      var windowToggle_1 = require_windowToggle();
      exports.windowToggle = windowToggle_1.windowToggle;
      var windowWhen_1 = require_windowWhen();
      exports.windowWhen = windowWhen_1.windowWhen;
      var withLatestFrom_1 = require_withLatestFrom();
      exports.withLatestFrom = withLatestFrom_1.withLatestFrom;
      var zip_1 = require_zip2();
      exports.zip = zip_1.zip;
      var zipAll_1 = require_zipAll();
      exports.zipAll = zipAll_1.zipAll;
    },
  });

  // node_modules/neo4j-driver/lib/result-rx.js
  var require_result_rx = __commonJS({
    'node_modules/neo4j-driver/lib/result-rx.js'(exports) {
      'use strict';
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, '__esModule', {
        value: true,
      });
      exports['default'] = void 0;
      var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
      var _createClass2 = _interopRequireDefault(require_createClass());
      var _neo4jDriverCore = require_lib();
      var _rxjs = require_rxjs();
      var _operators = require_operators();
      var States = {
        READY: 0,
        STREAMING: 1,
        COMPLETED: 2,
      };
      var RxResult = /* @__PURE__ */ (function () {
        function RxResult2(result) {
          (0, _classCallCheck2['default'])(this, RxResult2);
          var replayedResult = result.pipe(
            (0, _operators.publishReplay)(1),
            (0, _operators.refCount)(),
          );
          this._result = replayedResult;
          this._keys = replayedResult.pipe(
            (0, _operators.flatMap)(function (r) {
              return (0, _rxjs.from)(r.keys());
            }),
            (0, _operators.publishReplay)(1),
            (0, _operators.refCount)(),
          );
          this._records = new _rxjs.Subject();
          this._summary = new _rxjs.ReplaySubject();
          this._state = States.READY;
        }
        (0, _createClass2['default'])(RxResult2, [
          {
            key: 'keys',
            value: function keys() {
              return this._keys;
            },
          },
          {
            key: 'records',
            value: function records() {
              var _this = this;
              return this._result.pipe(
                (0, _operators.flatMap)(function (result) {
                  return new _rxjs.Observable(function (recordsObserver) {
                    return _this._startStreaming({
                      result,
                      recordsObserver,
                    });
                  });
                }),
              );
            },
          },
          {
            key: 'consume',
            value: function consume() {
              var _this2 = this;
              return this._result.pipe(
                (0, _operators.flatMap)(function (result) {
                  return new _rxjs.Observable(function (summaryObserver) {
                    return _this2._startStreaming({
                      result,
                      summaryObserver,
                    });
                  });
                }),
              );
            },
          },
          {
            key: '_startStreaming',
            value: function _startStreaming() {
              var _this3 = this;
              var _ref =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : {},
                result = _ref.result,
                _ref$recordsObserver = _ref.recordsObserver,
                recordsObserver =
                  _ref$recordsObserver === void 0 ? null : _ref$recordsObserver,
                _ref$summaryObserver = _ref.summaryObserver,
                summaryObserver =
                  _ref$summaryObserver === void 0 ? null : _ref$summaryObserver;
              var subscriptions = [];
              if (summaryObserver) {
                subscriptions.push(this._summary.subscribe(summaryObserver));
              }
              if (this._state < States.STREAMING) {
                this._state = States.STREAMING;
                if (recordsObserver) {
                  subscriptions.push(this._records.subscribe(recordsObserver));
                }
                subscriptions.push({
                  unsubscribe: function unsubscribe() {
                    if (result._cancel) {
                      result._cancel();
                    }
                  },
                });
                if (this._records.observers.length === 0) {
                  result._cancel();
                }
                result.subscribe({
                  onNext: function onNext(record) {
                    _this3._records.next(record);
                  },
                  onCompleted: function onCompleted(summary) {
                    _this3._records.complete();
                    _this3._summary.next(summary);
                    _this3._summary.complete();
                    _this3._state = States.COMPLETED;
                  },
                  onError: function onError(err) {
                    _this3._records.error(err);
                    _this3._summary.error(err);
                    _this3._state = States.COMPLETED;
                  },
                });
              } else if (recordsObserver) {
                recordsObserver.error(
                  (0, _neo4jDriverCore.newError)(
                    'Streaming has already started/consumed with a previous records or summary subscription.',
                  ),
                );
              }
              return function () {
                subscriptions.forEach(function (s) {
                  return s.unsubscribe();
                });
              };
            },
          },
        ]);
        return RxResult2;
      })();
      exports['default'] = RxResult;
    },
  });

  // node_modules/neo4j-driver/lib/transaction-rx.js
  var require_transaction_rx = __commonJS({
    'node_modules/neo4j-driver/lib/transaction-rx.js'(exports) {
      'use strict';
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, '__esModule', {
        value: true,
      });
      exports['default'] = void 0;
      var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
      var _createClass2 = _interopRequireDefault(require_createClass());
      var _rxjs = require_rxjs();
      var _resultRx = _interopRequireDefault(require_result_rx());
      var _neo4jDriverCore = _interopRequireDefault(require_lib());
      var RxTransaction = /* @__PURE__ */ (function () {
        function RxTransaction2(txc) {
          (0, _classCallCheck2['default'])(this, RxTransaction2);
          this._txc = txc;
        }
        (0, _createClass2['default'])(RxTransaction2, [
          {
            key: 'run',
            value: function run(query, parameters) {
              var _this = this;
              return new _resultRx['default'](
                new _rxjs.Observable(function (observer) {
                  try {
                    observer.next(_this._txc.run(query, parameters));
                    observer.complete();
                  } catch (err) {
                    observer.error(err);
                  }
                  return function () {};
                }),
              );
            },
          },
          {
            key: 'commit',
            value: function commit() {
              var _this2 = this;
              return new _rxjs.Observable(function (observer) {
                _this2._txc
                  .commit()
                  .then(function () {
                    observer.complete();
                  })
                  ['catch'](function (err) {
                    return observer.error(err);
                  });
              });
            },
          },
          {
            key: 'rollback',
            value: function rollback() {
              var _this3 = this;
              return new _rxjs.Observable(function (observer) {
                _this3._txc
                  .rollback()
                  .then(function () {
                    observer.complete();
                  })
                  ['catch'](function (err) {
                    return observer.error(err);
                  });
              });
            },
          },
          {
            key: 'close',
            value: function close() {
              var _this4 = this;
              return new _rxjs.Observable(function (observer) {
                _this4._txc
                  .close()
                  .then(function () {
                    observer.complete();
                  })
                  ['catch'](function (err) {
                    return observer.error(err);
                  });
              });
            },
          },
        ]);
        return RxTransaction2;
      })();
      exports['default'] = RxTransaction;
    },
  });

  // node_modules/neo4j-driver/lib/internal/retry-logic-rx.js
  var require_retry_logic_rx = __commonJS({
    'node_modules/neo4j-driver/lib/internal/retry-logic-rx.js'(exports) {
      'use strict';
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, '__esModule', {
        value: true,
      });
      exports['default'] = void 0;
      var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
      var _createClass2 = _interopRequireDefault(require_createClass());
      var _neo4jDriverCore = require_lib();
      var _rxjs = require_rxjs();
      var _operators = require_operators();
      var Logger = _neo4jDriverCore.internal.logger.Logger;
      var canRetryOn = _neo4jDriverCore.internal.retryStrategy.canRetryOn;
      var SERVICE_UNAVAILABLE = _neo4jDriverCore.error.SERVICE_UNAVAILABLE;
      var SESSION_EXPIRED = _neo4jDriverCore.error.SESSION_EXPIRED;
      var DEFAULT_MAX_RETRY_TIME_MS = 30 * 1e3;
      var DEFAULT_INITIAL_RETRY_DELAY_MS = 1e3;
      var DEFAULT_RETRY_DELAY_MULTIPLIER = 2;
      var DEFAULT_RETRY_DELAY_JITTER_FACTOR = 0.2;
      var RxRetryLogic = /* @__PURE__ */ (function () {
        function RxRetryLogic2() {
          var _ref =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : {},
            _ref$maxRetryTimeout = _ref.maxRetryTimeout,
            maxRetryTimeout =
              _ref$maxRetryTimeout === void 0
                ? DEFAULT_MAX_RETRY_TIME_MS
                : _ref$maxRetryTimeout,
            _ref$initialDelay = _ref.initialDelay,
            initialDelay =
              _ref$initialDelay === void 0
                ? DEFAULT_INITIAL_RETRY_DELAY_MS
                : _ref$initialDelay,
            _ref$delayMultiplier = _ref.delayMultiplier,
            delayMultiplier =
              _ref$delayMultiplier === void 0
                ? DEFAULT_RETRY_DELAY_MULTIPLIER
                : _ref$delayMultiplier,
            _ref$delayJitter = _ref.delayJitter,
            delayJitter =
              _ref$delayJitter === void 0
                ? DEFAULT_RETRY_DELAY_JITTER_FACTOR
                : _ref$delayJitter,
            _ref$logger = _ref.logger,
            logger = _ref$logger === void 0 ? null : _ref$logger;
          (0, _classCallCheck2['default'])(this, RxRetryLogic2);
          this._maxRetryTimeout = valueOrDefault(
            maxRetryTimeout,
            DEFAULT_MAX_RETRY_TIME_MS,
          );
          this._initialDelay = valueOrDefault(
            initialDelay,
            DEFAULT_INITIAL_RETRY_DELAY_MS,
          );
          this._delayMultiplier = valueOrDefault(
            delayMultiplier,
            DEFAULT_RETRY_DELAY_MULTIPLIER,
          );
          this._delayJitter = valueOrDefault(
            delayJitter,
            DEFAULT_RETRY_DELAY_JITTER_FACTOR,
          );
          this._logger = logger;
        }
        (0, _createClass2['default'])(RxRetryLogic2, [
          {
            key: 'retry',
            value: function retry(work) {
              var _this = this;
              return work.pipe(
                (0, _operators.retryWhen)(function (failedWork) {
                  var handledExceptions = [];
                  var startTime = Date.now();
                  var retryCount = 1;
                  var delayDuration = _this._initialDelay;
                  return failedWork.pipe(
                    (0, _operators.flatMap)(function (err) {
                      if (!canRetryOn(err)) {
                        return (0, _rxjs.throwError)(err);
                      }
                      handledExceptions.push(err);
                      if (
                        retryCount >= 2 &&
                        Date.now() - startTime >= _this._maxRetryTimeout
                      ) {
                        var _error = (0, _neo4jDriverCore.newError)(
                          'Failed after retried for '
                            .concat(retryCount, ' times in ')
                            .concat(
                              _this._maxRetryTimeout,
                              ' ms. Make sure that your database is online and retry again.',
                            ),
                          SERVICE_UNAVAILABLE,
                        );
                        _error.seenErrors = handledExceptions;
                        return (0, _rxjs.throwError)(_error);
                      }
                      var nextDelayDuration =
                        _this._computeNextDelay(delayDuration);
                      delayDuration = delayDuration * _this._delayMultiplier;
                      retryCount++;
                      if (_this._logger) {
                        _this._logger.warn(
                          'Transaction failed and will be retried in '.concat(
                            nextDelayDuration,
                          ),
                        );
                      }
                      return (0, _rxjs.of)(1).pipe(
                        (0, _operators.delay)(nextDelayDuration),
                      );
                    }),
                  );
                }),
              );
            },
          },
          {
            key: '_computeNextDelay',
            value: function _computeNextDelay(delay) {
              var jitter = delay * this._delayJitter;
              return delay - jitter + 2 * jitter * Math.random();
            },
          },
        ]);
        return RxRetryLogic2;
      })();
      exports['default'] = RxRetryLogic;
      function valueOrDefault(value, defaultValue) {
        if (value || value === 0) {
          return value;
        }
        return defaultValue;
      }
    },
  });

  // node_modules/neo4j-driver/lib/session-rx.js
  var require_session_rx = __commonJS({
    'node_modules/neo4j-driver/lib/session-rx.js'(exports) {
      'use strict';
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, '__esModule', {
        value: true,
      });
      exports['default'] = void 0;
      var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
      var _createClass2 = _interopRequireDefault(require_createClass());
      var _rxjs = require_rxjs();
      var _operators = require_operators();
      var _resultRx = _interopRequireDefault(require_result_rx());
      var _neo4jDriverCore = require_lib();
      var _transactionRx = _interopRequireDefault(require_transaction_rx());
      var _retryLogicRx = _interopRequireDefault(require_retry_logic_rx());
      var _internal$constants = _neo4jDriverCore.internal.constants;
      var ACCESS_MODE_READ = _internal$constants.ACCESS_MODE_READ;
      var ACCESS_MODE_WRITE = _internal$constants.ACCESS_MODE_WRITE;
      var TxConfig = _neo4jDriverCore.internal.txConfig.TxConfig;
      var RxSession = /* @__PURE__ */ (function () {
        function RxSession2() {
          var _ref =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : {},
            session = _ref.session,
            config2 = _ref.config;
          (0, _classCallCheck2['default'])(this, RxSession2);
          this._session = session;
          this._retryLogic = _createRetryLogic(config2);
        }
        (0, _createClass2['default'])(RxSession2, [
          {
            key: 'run',
            value: function run(query, parameters, transactionConfig) {
              var _this = this;
              return new _resultRx['default'](
                new _rxjs.Observable(function (observer) {
                  try {
                    observer.next(
                      _this._session.run(query, parameters, transactionConfig),
                    );
                    observer.complete();
                  } catch (err) {
                    observer.error(err);
                  }
                  return function () {};
                }),
              );
            },
          },
          {
            key: 'beginTransaction',
            value: function beginTransaction(transactionConfig) {
              return this._beginTransaction(
                this._session._mode,
                transactionConfig,
              );
            },
          },
          {
            key: 'readTransaction',
            value: function readTransaction(work, transactionConfig) {
              return this._runTransaction(
                ACCESS_MODE_READ,
                work,
                transactionConfig,
              );
            },
          },
          {
            key: 'writeTransaction',
            value: function writeTransaction(work, transactionConfig) {
              return this._runTransaction(
                ACCESS_MODE_WRITE,
                work,
                transactionConfig,
              );
            },
          },
          {
            key: 'close',
            value: function close() {
              var _this2 = this;
              return new _rxjs.Observable(function (observer) {
                _this2._session
                  .close()
                  .then(function () {
                    observer.complete();
                  })
                  ['catch'](function (err) {
                    return observer.error(err);
                  });
              });
            },
          },
          {
            key: 'lastBookmark',
            value: function lastBookmark() {
              return this._session.lastBookmark();
            },
          },
          {
            key: '_beginTransaction',
            value: function _beginTransaction(accessMode, transactionConfig) {
              var _this3 = this;
              var txConfig = TxConfig.empty();
              if (transactionConfig) {
                txConfig = new TxConfig(transactionConfig);
              }
              return new _rxjs.Observable(function (observer) {
                try {
                  observer.next(
                    new _transactionRx['default'](
                      _this3._session._beginTransaction(accessMode, txConfig),
                    ),
                  );
                  observer.complete();
                } catch (err) {
                  observer.error(err);
                }
                return function () {};
              });
            },
          },
          {
            key: '_runTransaction',
            value: function _runTransaction(
              accessMode,
              work,
              transactionConfig,
            ) {
              var txConfig = TxConfig.empty();
              if (transactionConfig) {
                txConfig = new TxConfig(transactionConfig);
              }
              return this._retryLogic.retry(
                this._beginTransaction(accessMode, transactionConfig).pipe(
                  (0, _operators.flatMap)(function (txc) {
                    return (0, _rxjs.defer)(function () {
                      try {
                        return work(txc);
                      } catch (err) {
                        return (0, _rxjs.throwError)(err);
                      }
                    }).pipe(
                      (0, _operators.catchError)(function (err) {
                        return txc
                          .rollback()
                          .pipe(
                            (0, _operators.concat)((0, _rxjs.throwError)(err)),
                          );
                      }),
                      (0, _operators.concat)(txc.commit()),
                    );
                  }),
                ),
              );
            },
          },
        ]);
        return RxSession2;
      })();
      exports['default'] = RxSession;
      function _createRetryLogic(config2) {
        var maxRetryTimeout =
          config2 && config2.maxTransactionRetryTime
            ? config2.maxTransactionRetryTime
            : null;
        return new _retryLogicRx['default']({
          maxRetryTimeout,
        });
      }
    },
  });

  // node_modules/neo4j-driver/lib/driver.js
  var require_driver2 = __commonJS({
    'node_modules/neo4j-driver/lib/driver.js'(exports) {
      'use strict';
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, '__esModule', {
        value: true,
      });
      exports['default'] =
        exports.WRITE =
        exports.READ =
        exports.Driver =
          void 0;
      var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
      var _createClass2 = _interopRequireDefault(require_createClass());
      var _inherits2 = _interopRequireDefault(require_inherits());
      var _possibleConstructorReturn2 = _interopRequireDefault(
        require_possibleConstructorReturn(),
      );
      var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
      var _neo4jDriverCore = require_lib();
      var _sessionRx = _interopRequireDefault(require_session_rx());
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = (0, _getPrototypeOf2['default'])(Derived),
            result;
          if (hasNativeReflectConstruct) {
            var NewTarget = (0, _getPrototypeOf2['default'])(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return (0, _possibleConstructorReturn2['default'])(this, result);
        };
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === 'function') return true;
        try {
          Boolean.prototype.valueOf.call(
            Reflect.construct(Boolean, [], function () {}),
          );
          return true;
        } catch (e) {
          return false;
        }
      }
      var FETCH_ALL = _neo4jDriverCore.internal.constants.FETCH_ALL;
      var READ = _neo4jDriverCore.driver.READ;
      var WRITE = _neo4jDriverCore.driver.WRITE;
      exports.WRITE = WRITE;
      exports.READ = READ;
      var Driver = /* @__PURE__ */ (function (_CoreDriver) {
        (0, _inherits2['default'])(Driver2, _CoreDriver);
        var _super = _createSuper(Driver2);
        function Driver2() {
          (0, _classCallCheck2['default'])(this, Driver2);
          return _super.apply(this, arguments);
        }
        (0, _createClass2['default'])(Driver2, [
          {
            key: 'rxSession',
            value: function rxSession() {
              var _ref =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : {},
                _ref$defaultAccessMod = _ref.defaultAccessMode,
                defaultAccessMode =
                  _ref$defaultAccessMod === void 0
                    ? WRITE
                    : _ref$defaultAccessMod,
                bookmarks = _ref.bookmarks,
                _ref$database = _ref.database,
                database = _ref$database === void 0 ? '' : _ref$database,
                fetchSize = _ref.fetchSize,
                impersonatedUser = _ref.impersonatedUser;
              return new _sessionRx['default']({
                session: this._newSession({
                  defaultAccessMode,
                  bookmarkOrBookmarks: bookmarks,
                  database,
                  impersonatedUser,
                  reactive: true,
                  fetchSize: validateFetchSizeValue(
                    fetchSize,
                    this._config.fetchSize,
                  ),
                }),
                config: this._config,
              });
            },
          },
        ]);
        return Driver2;
      })(_neo4jDriverCore.Driver);
      exports.Driver = Driver;
      function validateFetchSizeValue(rawValue, defaultWhenAbsent) {
        var fetchSize = parseInt(rawValue, 10);
        if (fetchSize > 0 || fetchSize === FETCH_ALL) {
          return fetchSize;
        } else if (fetchSize === 0 || fetchSize < 0) {
          throw new Error(
            'The fetch size can only be a positive value or '
              .concat(FETCH_ALL, ' for ALL. However fetchSize = ')
              .concat(fetchSize),
          );
        } else {
          return defaultWhenAbsent;
        }
      }
      var _default = Driver;
      exports['default'] = _default;
    },
  });

  // node_modules/neo4j-driver/lib/version.js
  var require_version = __commonJS({
    'node_modules/neo4j-driver/lib/version.js'(exports) {
      'use strict';
      Object.defineProperty(exports, '__esModule', {
        value: true,
      });
      exports['default'] = void 0;
      var _default = '4.4.7';
      exports['default'] = _default;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/load-balancing/load-balancing-strategy.js
  var require_load_balancing_strategy = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/load-balancing/load-balancing-strategy.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var LoadBalancingStrategy = (function () {
        function LoadBalancingStrategy2() {}
        LoadBalancingStrategy2.prototype.selectReader = function (
          knownReaders,
        ) {
          throw new Error('Abstract function');
        };
        LoadBalancingStrategy2.prototype.selectWriter = function (
          knownWriters,
        ) {
          throw new Error('Abstract function');
        };
        return LoadBalancingStrategy2;
      })();
      exports.default = LoadBalancingStrategy;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/load-balancing/round-robin-array-index.js
  var require_round_robin_array_index = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/load-balancing/round-robin-array-index.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var RoundRobinArrayIndex = (function () {
        function RoundRobinArrayIndex2(initialOffset) {
          this._offset = initialOffset || 0;
        }
        RoundRobinArrayIndex2.prototype.next = function (arrayLength) {
          if (arrayLength === 0) {
            return -1;
          }
          var nextOffset = this._offset;
          this._offset += 1;
          if (this._offset === Number.MAX_SAFE_INTEGER) {
            this._offset = 0;
          }
          return nextOffset % arrayLength;
        };
        return RoundRobinArrayIndex2;
      })();
      exports.default = RoundRobinArrayIndex;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/load-balancing/least-connected-load-balancing-strategy.js
  var require_least_connected_load_balancing_strategy = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/load-balancing/least-connected-load-balancing-strategy.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var round_robin_array_index_1 = __importDefault2(
        require_round_robin_array_index(),
      );
      var load_balancing_strategy_1 = __importDefault2(
        require_load_balancing_strategy(),
      );
      var LeastConnectedLoadBalancingStrategy = (function (_super) {
        __extends2(LeastConnectedLoadBalancingStrategy2, _super);
        function LeastConnectedLoadBalancingStrategy2(connectionPool) {
          var _this = _super.call(this) || this;
          _this._readersIndex = new round_robin_array_index_1.default();
          _this._writersIndex = new round_robin_array_index_1.default();
          _this._connectionPool = connectionPool;
          return _this;
        }
        LeastConnectedLoadBalancingStrategy2.prototype.selectReader = function (
          knownReaders,
        ) {
          return this._select(knownReaders, this._readersIndex);
        };
        LeastConnectedLoadBalancingStrategy2.prototype.selectWriter = function (
          knownWriters,
        ) {
          return this._select(knownWriters, this._writersIndex);
        };
        LeastConnectedLoadBalancingStrategy2.prototype._select = function (
          addresses,
          roundRobinIndex,
        ) {
          var length = addresses.length;
          if (length === 0) {
            return null;
          }
          var startIndex = roundRobinIndex.next(length);
          var index = startIndex;
          var leastConnectedAddress = null;
          var leastActiveConnections = Number.MAX_SAFE_INTEGER;
          do {
            var address = addresses[index];
            var activeConnections =
              this._connectionPool.activeResourceCount(address);
            if (activeConnections < leastActiveConnections) {
              leastConnectedAddress = address;
              leastActiveConnections = activeConnections;
            }
            if (index === length - 1) {
              index = 0;
            } else {
              index++;
            }
          } while (index !== startIndex);
          return leastConnectedAddress;
        };
        return LeastConnectedLoadBalancingStrategy2;
      })(load_balancing_strategy_1.default);
      exports.default = LeastConnectedLoadBalancingStrategy;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/load-balancing/index.js
  var require_load_balancing = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/load-balancing/index.js'(
      exports,
    ) {
      'use strict';
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.LeastConnectedLoadBalancingStrategy =
        exports.LoadBalancingStrategy = void 0;
      var load_balancing_strategy_1 = __importDefault2(
        require_load_balancing_strategy(),
      );
      exports.LoadBalancingStrategy = load_balancing_strategy_1.default;
      var least_connected_load_balancing_strategy_1 = __importDefault2(
        require_least_connected_load_balancing_strategy(),
      );
      exports.LeastConnectedLoadBalancingStrategy =
        least_connected_load_balancing_strategy_1.default;
      exports.default = least_connected_load_balancing_strategy_1.default;
    },
  });

  // node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    'node_modules/base64-js/index.js'(exports) {
      'use strict';
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
      var code =
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error('Invalid string. Length must be a multiple of 4');
        }
        var validLen = b64.indexOf('=');
        if (validLen === -1) validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - (validLen % 4);
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp =
            (revLookup[b64.charCodeAt(i2)] << 18) |
            (revLookup[b64.charCodeAt(i2 + 1)] << 12) |
            (revLookup[b64.charCodeAt(i2 + 2)] << 6) |
            revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = (tmp >> 16) & 255;
          arr[curByte++] = (tmp >> 8) & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp =
            (revLookup[b64.charCodeAt(i2)] << 2) |
            (revLookup[b64.charCodeAt(i2 + 1)] >> 4);
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp =
            (revLookup[b64.charCodeAt(i2)] << 10) |
            (revLookup[b64.charCodeAt(i2 + 1)] << 4) |
            (revLookup[b64.charCodeAt(i2 + 2)] >> 2);
          arr[curByte++] = (tmp >> 8) & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return (
          lookup[(num >> 18) & 63] +
          lookup[(num >> 12) & 63] +
          lookup[(num >> 6) & 63] +
          lookup[num & 63]
        );
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp =
            ((uint8[i2] << 16) & 16711680) +
            ((uint8[i2 + 1] << 8) & 65280) +
            (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join('');
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (
          var i2 = 0, len22 = len2 - extraBytes;
          i2 < len22;
          i2 += maxChunkLength
        ) {
          parts.push(
            encodeChunk(
              uint8,
              i2,
              i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength,
            ),
          );
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 63] + '==');
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] +
              lookup[(tmp >> 4) & 63] +
              lookup[(tmp << 2) & 63] +
              '=',
          );
        }
        return parts.join('');
      }
    },
  });

  // node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    'node_modules/ieee754/index.js'(exports) {
      exports.read = function (buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];
        i += d;
        e = s & ((1 << -nBits) - 1);
        s >>= -nBits;
        nBits += eLen;
        for (
          ;
          nBits > 0;
          e = e * 256 + buffer[offset + i], i += d, nBits -= 8
        ) {}
        m = e & ((1 << -nBits) - 1);
        e >>= -nBits;
        nBits += mLen;
        for (
          ;
          nBits > 0;
          m = m * 256 + buffer[offset + i], i += d, nBits -= 8
        ) {}
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (
          ;
          mLen >= 8;
          buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8
        ) {}
        e = (e << mLen) | m;
        eLen += mLen;
        for (
          ;
          eLen > 0;
          buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8
        ) {}
        buffer[offset + i - d] |= s * 128;
      };
    },
  });

  // node_modules/neo4j-driver-bolt-connection/node_modules/buffer/index.js
  var require_buffer2 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/node_modules/buffer/index.js'(
      exports,
    ) {
      'use strict';
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol =
        typeof Symbol === 'function' && typeof Symbol['for'] === 'function'
          ? Symbol['for']('nodejs.util.inspect.custom')
          : null;
      exports.Buffer = Buffer2;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (
        !Buffer2.TYPED_ARRAY_SUPPORT &&
        typeof console !== 'undefined' &&
        typeof console.error === 'function'
      ) {
        console.error(
          'This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.',
        );
      }
      function typedArraySupport() {
        try {
          const arr = new Uint8Array(1);
          const proto = {
            foo: function () {
              return 42;
            },
          };
          Object.setPrototypeOf(proto, Uint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer2.prototype, 'parent', {
        enumerable: true,
        get: function () {
          if (!Buffer2.isBuffer(this)) return void 0;
          return this.buffer;
        },
      });
      Object.defineProperty(Buffer2.prototype, 'offset', {
        enumerable: true,
        get: function () {
          if (!Buffer2.isBuffer(this)) return void 0;
          return this.byteOffset;
        },
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError(
            'The value "' + length + '" is invalid for option "size"',
          );
        }
        const buf = new Uint8Array(length);
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function Buffer2(arg, encodingOrOffset, length) {
        if (typeof arg === 'number') {
          if (typeof encodingOrOffset === 'string') {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number',
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer2.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === 'string') {
          return fromString(value, encodingOrOffset);
        }
        if (ArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            'The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' +
              typeof value,
          );
        }
        if (
          isInstance(value, ArrayBuffer) ||
          (value && isInstance(value.buffer, ArrayBuffer))
        ) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (
          typeof SharedArrayBuffer !== 'undefined' &&
          (isInstance(value, SharedArrayBuffer) ||
            (value && isInstance(value.buffer, SharedArrayBuffer)))
        ) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === 'number') {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number',
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer2.from(valueOf, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b) return b;
        if (
          typeof Symbol !== 'undefined' &&
          Symbol.toPrimitive != null &&
          typeof value[Symbol.toPrimitive] === 'function'
        ) {
          return Buffer2.from(
            value[Symbol.toPrimitive]('string'),
            encodingOrOffset,
            length,
          );
        }
        throw new TypeError(
          'The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' +
            typeof value,
        );
      }
      Buffer2.from = function (value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
      Object.setPrototypeOf(Buffer2, Uint8Array);
      function assertSize(size) {
        if (typeof size !== 'number') {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError(
            'The value "' + size + '" is invalid for option "size"',
          );
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === 'string'
            ? createBuffer(size).fill(fill, encoding)
            : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer2.alloc = function (size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer2.allocUnsafe = function (size) {
        return allocUnsafe(size);
      };
      Buffer2.allocUnsafeSlow = function (size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== 'string' || encoding === '') {
          encoding = 'utf8';
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding);
        }
        const length = byteLength(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike2(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, Uint8Array)) {
          const copy = new Uint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike2(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new Uint8Array(array);
        } else if (length === void 0) {
          buf = new Uint8Array(array, byteOffset);
        } else {
          buf = new Uint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer2.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike2(obj);
        }
        if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
          return fromArrayLike2(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError(
            'Attempt to allocate Buffer larger than maximum size: 0x' +
              K_MAX_LENGTH.toString(16) +
              ' bytes',
          );
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer2.alloc(+length);
      }
      Buffer2.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer2.prototype;
      };
      Buffer2.compare = function compare(a, b) {
        if (isInstance(a, Uint8Array))
          a = Buffer2.from(a, a.offset, a.byteLength);
        if (isInstance(b, Uint8Array))
          b = Buffer2.from(b, b.offset, b.byteLength);
        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array',
          );
        }
        if (a === b) return 0;
        let x = a.length;
        let y = b.length;
        for (let i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case 'hex':
          case 'utf8':
          case 'utf-8':
          case 'ascii':
          case 'latin1':
          case 'binary':
          case 'base64':
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer = Buffer2.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer2.isBuffer(buf)) buf = Buffer2.from(buf);
              buf.copy(buffer, pos);
            } else {
              Uint8Array.prototype.set.call(buffer, buf, pos);
            }
          } else if (!Buffer2.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer2.isBuffer(string)) {
          return string.length;
        }
        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== 'string') {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' +
              typeof string,
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0) return 0;
        let loweredCase = false;
        for (;;) {
          switch (encoding) {
            case 'ascii':
            case 'latin1':
            case 'binary':
              return len;
            case 'utf8':
            case 'utf-8':
              return utf8ToBytes(string).length;
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return len * 2;
            case 'hex':
              return len >>> 1;
            case 'base64':
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ('' + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return '';
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return '';
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return '';
        }
        if (!encoding) encoding = 'utf8';
        while (true) {
          switch (encoding) {
            case 'hex':
              return hexSlice(this, start, end);
            case 'utf8':
            case 'utf-8':
              return utf8Slice(this, start, end);
            case 'ascii':
              return asciiSlice(this, start, end);
            case 'latin1':
            case 'binary':
              return latin1Slice(this, start, end);
            case 'base64':
              return base64Slice(this, start, end);
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError('Unknown encoding: ' + encoding);
              encoding = (encoding + '').toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer2.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 16-bits');
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 32-bits');
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 64-bits');
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0) return '';
        if (arguments.length === 0) return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
      Buffer2.prototype.equals = function equals(b) {
        if (!Buffer2.isBuffer(b))
          throw new TypeError('Argument must be a Buffer');
        if (this === b) return true;
        return Buffer2.compare(this, b) === 0;
      };
      Buffer2.prototype.inspect = function inspect() {
        let str = '';
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString('hex', 0, max)
          .replace(/(.{2})/g, '$1 ')
          .trim();
        if (this.length > max) str += ' ... ';
        return '<Buffer ' + str + '>';
      };
      if (customInspectSymbol) {
        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
      }
      Buffer2.prototype.compare = function compare(
        target,
        start,
        end,
        thisStart,
        thisEnd,
      ) {
        if (isInstance(target, Uint8Array)) {
          target = Buffer2.from(target, target.offset, target.byteLength);
        }
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' +
              typeof target,
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (
          start < 0 ||
          end > target.length ||
          thisStart < 0 ||
          thisEnd > this.length
        ) {
          throw new RangeError('out of range index');
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target) return 0;
        let x = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0) return -1;
        if (typeof byteOffset === 'string') {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir) return -1;
          else byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir) byteOffset = 0;
          else return -1;
        }
        if (typeof val === 'string') {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === 'number') {
          val = val & 255;
          if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(
                buffer,
                val,
                byteOffset,
              );
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError('val must be string, number or Buffer');
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (
            encoding === 'ucs2' ||
            encoding === 'ucs-2' ||
            encoding === 'utf16le' ||
            encoding === 'utf-16le'
          ) {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (
              read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)
            ) {
              if (foundIndex === -1) foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1) i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found) return i;
          }
        }
        return -1;
      }
      Buffer2.prototype.includes = function includes(
        val,
        byteOffset,
        encoding,
      ) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(
        val,
        byteOffset,
        encoding,
      ) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed)) return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(
          utf8ToBytes(string, buf.length - offset),
          buf,
          offset,
          length,
        );
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(
          utf16leToBytes(string, buf.length - offset),
          buf,
          offset,
          length,
        );
      }
      Buffer2.prototype.write = function write(
        string,
        offset,
        length,
        encoding,
      ) {
        if (offset === void 0) {
          encoding = 'utf8';
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === 'string') {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0) encoding = 'utf8';
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            'Buffer.write(string, encoding, offset[, length]) is no longer supported',
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining) length = remaining;
        if (
          (string.length > 0 && (length < 0 || offset < 0)) ||
          offset > this.length
        ) {
          throw new RangeError('Attempt to write outside buffer bounds');
        }
        if (!encoding) encoding = 'utf8';
        let loweredCase = false;
        for (;;) {
          switch (encoding) {
            case 'hex':
              return hexWrite(this, string, offset, length);
            case 'utf8':
            case 'utf-8':
              return utf8Write(this, string, offset, length);
            case 'ascii':
            case 'latin1':
            case 'binary':
              return asciiWrite(this, string, offset, length);
            case 'base64':
              return base64Write(this, string, offset, length);
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError('Unknown encoding: ' + encoding);
              encoding = ('' + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON() {
        return {
          type: 'Buffer',
          data: Array.prototype.slice.call(this._arr || this, 0),
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence =
            firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = ((firstByte & 31) << 6) | (secondByte & 63);
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint =
                    ((firstByte & 15) << 12) |
                    ((secondByte & 63) << 6) |
                    (thirdByte & 63);
                  if (
                    tempCodePoint > 2047 &&
                    (tempCodePoint < 55296 || tempCodePoint > 57343)
                  ) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if (
                  (secondByte & 192) === 128 &&
                  (thirdByte & 192) === 128 &&
                  (fourthByte & 192) === 128
                ) {
                  tempCodePoint =
                    ((firstByte & 15) << 18) |
                    ((secondByte & 63) << 12) |
                    ((thirdByte & 63) << 6) |
                    (fourthByte & 63);
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(((codePoint >>> 10) & 1023) | 55296);
            codePoint = 56320 | (codePoint & 1023);
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = '';
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH)),
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = '';
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = '';
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0) start = 0;
        if (!end || end < 0 || end > len) end = len;
        let out = '';
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = '';
        for (let i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer2.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0) start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0) end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start) end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer2.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError('offset is not uint');
        if (offset + ext > length)
          throw new RangeError('Trying to access beyond buffer length');
      }
      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE =
        function readUIntLE(offset, byteLength2, noAssert) {
          offset = offset >>> 0;
          byteLength2 = byteLength2 >>> 0;
          if (!noAssert) checkOffset(offset, byteLength2, this.length);
          let val = this[offset];
          let mul = 1;
          let i = 0;
          while (++i < byteLength2 && (mul *= 256)) {
            val += this[offset + i] * mul;
          }
          return val;
        };
      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE =
        function readUIntBE(offset, byteLength2, noAssert) {
          offset = offset >>> 0;
          byteLength2 = byteLength2 >>> 0;
          if (!noAssert) {
            checkOffset(offset, byteLength2, this.length);
          }
          let val = this[offset + --byteLength2];
          let mul = 1;
          while (byteLength2 > 0 && (mul *= 256)) {
            val += this[offset + --byteLength2] * mul;
          }
          return val;
        };
      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 =
        function readUInt8(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 1, this.length);
          return this[offset];
        };
      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE =
        function readUInt16LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          return this[offset] | (this[offset + 1] << 8);
        };
      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE =
        function readUInt16BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          return (this[offset] << 8) | this[offset + 1];
        };
      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE =
        function readUInt32LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return (
            (this[offset] |
              (this[offset + 1] << 8) |
              (this[offset + 2] << 16)) +
            this[offset + 3] * 16777216
          );
        };
      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE =
        function readUInt32BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return (
            this[offset] * 16777216 +
            ((this[offset + 1] << 16) |
              (this[offset + 2] << 8) |
              this[offset + 3])
          );
        };
      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(
        function readBigUInt64LE(offset) {
          offset = offset >>> 0;
          validateNumber(offset, 'offset');
          const first = this[offset];
          const last = this[offset + 7];
          if (first === void 0 || last === void 0) {
            boundsError(offset, this.length - 8);
          }
          const lo =
            first +
            this[++offset] * 2 ** 8 +
            this[++offset] * 2 ** 16 +
            this[++offset] * 2 ** 24;
          const hi =
            this[++offset] +
            this[++offset] * 2 ** 8 +
            this[++offset] * 2 ** 16 +
            last * 2 ** 24;
          return BigInt(lo) + (BigInt(hi) << BigInt(32));
        },
      );
      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(
        function readBigUInt64BE(offset) {
          offset = offset >>> 0;
          validateNumber(offset, 'offset');
          const first = this[offset];
          const last = this[offset + 7];
          if (first === void 0 || last === void 0) {
            boundsError(offset, this.length - 8);
          }
          const hi =
            first * 2 ** 24 +
            this[++offset] * 2 ** 16 +
            this[++offset] * 2 ** 8 +
            this[++offset];
          const lo =
            this[++offset] * 2 ** 24 +
            this[++offset] * 2 ** 16 +
            this[++offset] * 2 ** 8 +
            last;
          return (BigInt(hi) << BigInt(32)) + BigInt(lo);
        },
      );
      Buffer2.prototype.readIntLE = function readIntLE(
        offset,
        byteLength2,
        noAssert,
      ) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(
        offset,
        byteLength2,
        noAssert,
      ) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) checkOffset(offset, byteLength2, this.length);
        let i = byteLength2;
        let mul = 1;
        let val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128)) return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        const val = this[offset] | (this[offset + 1] << 8);
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | (this[offset] << 8);
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return (
          this[offset] |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16) |
          (this[offset + 3] << 24)
        );
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return (
          (this[offset] << 24) |
          (this[offset + 1] << 16) |
          (this[offset + 2] << 8) |
          this[offset + 3]
        );
      };
      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(
        function readBigInt64LE(offset) {
          offset = offset >>> 0;
          validateNumber(offset, 'offset');
          const first = this[offset];
          const last = this[offset + 7];
          if (first === void 0 || last === void 0) {
            boundsError(offset, this.length - 8);
          }
          const val =
            this[offset + 4] +
            this[offset + 5] * 2 ** 8 +
            this[offset + 6] * 2 ** 16 +
            (last << 24);
          return (
            (BigInt(val) << BigInt(32)) +
            BigInt(
              first +
                this[++offset] * 2 ** 8 +
                this[++offset] * 2 ** 16 +
                this[++offset] * 2 ** 24,
            )
          );
        },
      );
      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(
        function readBigInt64BE(offset) {
          offset = offset >>> 0;
          validateNumber(offset, 'offset');
          const first = this[offset];
          const last = this[offset + 7];
          if (first === void 0 || last === void 0) {
            boundsError(offset, this.length - 8);
          }
          const val =
            (first << 24) +
            this[++offset] * 2 ** 16 +
            this[++offset] * 2 ** 8 +
            this[++offset];
          return (
            (BigInt(val) << BigInt(32)) +
            BigInt(
              this[++offset] * 2 ** 24 +
                this[++offset] * 2 ** 16 +
                this[++offset] * 2 ** 8 +
                last,
            )
          );
        },
      );
      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer2.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError('Index out of range');
      }
      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE =
        function writeUIntLE(value, offset, byteLength2, noAssert) {
          value = +value;
          offset = offset >>> 0;
          byteLength2 = byteLength2 >>> 0;
          if (!noAssert) {
            const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
            checkInt(this, value, offset, byteLength2, maxBytes, 0);
          }
          let mul = 1;
          let i = 0;
          this[offset] = value & 255;
          while (++i < byteLength2 && (mul *= 256)) {
            this[offset + i] = (value / mul) & 255;
          }
          return offset + byteLength2;
        };
      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE =
        function writeUIntBE(value, offset, byteLength2, noAssert) {
          value = +value;
          offset = offset >>> 0;
          byteLength2 = byteLength2 >>> 0;
          if (!noAssert) {
            const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
            checkInt(this, value, offset, byteLength2, maxBytes, 0);
          }
          let i = byteLength2 - 1;
          let mul = 1;
          this[offset + i] = value & 255;
          while (--i >= 0 && (mul *= 256)) {
            this[offset + i] = (value / mul) & 255;
          }
          return offset + byteLength2;
        };
      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 =
        function writeUInt8(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
          this[offset] = value & 255;
          return offset + 1;
        };
      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE =
        function writeUInt16LE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
          this[offset] = value & 255;
          this[offset + 1] = value >>> 8;
          return offset + 2;
        };
      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE =
        function writeUInt16BE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
          this[offset] = value >>> 8;
          this[offset + 1] = value & 255;
          return offset + 2;
        };
      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE =
        function writeUInt32LE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
          this[offset + 3] = value >>> 24;
          this[offset + 2] = value >>> 16;
          this[offset + 1] = value >>> 8;
          this[offset] = value & 255;
          return offset + 4;
        };
      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE =
        function writeUInt32BE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 255;
          return offset + 4;
        };
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number((value >> BigInt(32)) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number((value >> BigInt(32)) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(
        function writeBigUInt64LE(value, offset = 0) {
          return wrtBigUInt64LE(
            this,
            value,
            offset,
            BigInt(0),
            BigInt('0xffffffffffffffff'),
          );
        },
      );
      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(
        function writeBigUInt64BE(value, offset = 0) {
          return wrtBigUInt64BE(
            this,
            value,
            offset,
            BigInt(0),
            BigInt('0xffffffffffffffff'),
          );
        },
      );
      Buffer2.prototype.writeIntLE = function writeIntLE(
        value,
        offset,
        byteLength2,
        noAssert,
      ) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (((value / mul) >> 0) - sub) & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(
        value,
        offset,
        byteLength2,
        noAssert,
      ) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (((value / mul) >> 0) - sub) & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(
        value,
        offset,
        noAssert,
      ) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
        if (value < 0) value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(
        value,
        offset,
        noAssert,
      ) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(
        value,
        offset,
        noAssert,
      ) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(
        value,
        offset,
        noAssert,
      ) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(
        value,
        offset,
        noAssert,
      ) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0) value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(
        function writeBigInt64LE(value, offset = 0) {
          return wrtBigUInt64LE(
            this,
            value,
            offset,
            -BigInt('0x8000000000000000'),
            BigInt('0x7fffffffffffffff'),
          );
        },
      );
      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(
        function writeBigInt64BE(value, offset = 0) {
          return wrtBigUInt64BE(
            this,
            value,
            offset,
            -BigInt('0x8000000000000000'),
            BigInt('0x7fffffffffffffff'),
          );
        },
      );
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError('Index out of range');
        if (offset < 0) throw new RangeError('Index out of range');
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(
            buf,
            value,
            offset,
            4,
            34028234663852886e22,
            -34028234663852886e22,
          );
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer2.prototype.writeFloatLE = function writeFloatLE(
        value,
        offset,
        noAssert,
      ) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(
        value,
        offset,
        noAssert,
      ) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(
            buf,
            value,
            offset,
            8,
            17976931348623157e292,
            -17976931348623157e292,
          );
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(
        value,
        offset,
        noAssert,
      ) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(
        value,
        offset,
        noAssert,
      ) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer2.isBuffer(target))
          throw new TypeError('argument should be a Buffer');
        if (!start) start = 0;
        if (!end && end !== 0) end = this.length;
        if (targetStart >= target.length) targetStart = target.length;
        if (!targetStart) targetStart = 0;
        if (end > 0 && end < start) end = start;
        if (end === start) return 0;
        if (target.length === 0 || this.length === 0) return 0;
        if (targetStart < 0) {
          throw new RangeError('targetStart out of bounds');
        }
        if (start < 0 || start >= this.length)
          throw new RangeError('Index out of range');
        if (end < 0) throw new RangeError('sourceEnd out of bounds');
        if (end > this.length) end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (
          this === target &&
          typeof Uint8Array.prototype.copyWithin === 'function'
        ) {
          this.copyWithin(targetStart, start, end);
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart,
          );
        }
        return len;
      };
      Buffer2.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === 'string') {
          if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== 'string') {
            throw new TypeError('encoding must be a string');
          }
          if (typeof encoding === 'string' && !Buffer2.isEncoding(encoding)) {
            throw new TypeError('Unknown encoding: ' + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if ((encoding === 'utf8' && code < 128) || encoding === 'latin1') {
              val = code;
            }
          }
        } else if (typeof val === 'number') {
          val = val & 255;
        } else if (typeof val === 'boolean') {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError('Out of range index');
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val) val = 0;
        let i;
        if (typeof val === 'number') {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes = Buffer2.isBuffer(val)
            ? val
            : Buffer2.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError(
              'The value "' + val + '" is invalid for argument "value"',
            );
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      var errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, 'message', {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true,
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, 'code', {
              configurable: true,
              enumerable: true,
              value,
              writable: true,
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        'ERR_BUFFER_OUT_OF_BOUNDS',
        function (name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return 'Attempt to access memory outside buffer bounds';
        },
        RangeError,
      );
      E(
        'ERR_INVALID_ARG_TYPE',
        function (name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError,
      );
      E(
        'ERR_OUT_OF_RANGE',
        function (str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === 'bigint') {
            received = String(input);
            if (
              input > BigInt(2) ** BigInt(32) ||
              input < -(BigInt(2) ** BigInt(32))
            ) {
              received = addNumericalSeparator(received);
            }
            received += 'n';
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError,
      );
      function addNumericalSeparator(val) {
        let res = '';
        let i = val.length;
        const start = val[0] === '-' ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, 'offset');
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset, byteLength2) {
        if (value > max || value < min) {
          const n = typeof min === 'bigint' ? 'n' : '';
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${
                (byteLength2 + 1) * 8 - 1
              }${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE('value', range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== 'number') {
          throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(
            type || 'offset',
            'an integer',
            value,
          );
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || 'offset',
          `>= ${type ? 1 : 0} and <= ${length}`,
          value,
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split('=')[0];
        str = str.trim().replace(INVALID_BASE64_RE, '');
        if (str.length < 2) return '';
        while (str.length % 4 !== 0) {
          str = str + '=';
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint =
              (((leadSurrogate - 55296) << 10) | (codePoint - 56320)) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push((codePoint >> 6) | 192, (codePoint & 63) | 128);
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(
              (codePoint >> 12) | 224,
              ((codePoint >> 6) & 63) | 128,
              (codePoint & 63) | 128,
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(
              (codePoint >> 18) | 240,
              ((codePoint >> 12) & 63) | 128,
              ((codePoint >> 6) & 63) | 128,
              (codePoint & 63) | 128,
            );
          } else {
            throw new Error('Invalid code point');
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0) break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length) break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isInstance(obj, type) {
        return (
          obj instanceof type ||
          (obj != null &&
            obj.constructor != null &&
            obj.constructor.name != null &&
            obj.constructor.name === type.name)
        );
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = (function () {
        const alphabet = '0123456789abcdef';
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      })();
      function defineBigIntMethod(fn) {
        return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error('BigInt not supported');
      }
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/buf/base-buf.js
  var require_base_buf = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/buf/base-buf.js'(exports) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var BaseBuffer = (function () {
        function BaseBuffer2(size) {
          this.position = 0;
          this.length = size;
        }
        BaseBuffer2.prototype.getUInt8 = function (position) {
          throw new Error('Not implemented');
        };
        BaseBuffer2.prototype.getInt8 = function (position) {
          throw new Error('Not implemented');
        };
        BaseBuffer2.prototype.getFloat64 = function (position) {
          throw new Error('Not implemented');
        };
        BaseBuffer2.prototype.putUInt8 = function (position, val) {
          throw new Error('Not implemented');
        };
        BaseBuffer2.prototype.putInt8 = function (position, val) {
          throw new Error('Not implemented');
        };
        BaseBuffer2.prototype.putFloat64 = function (position, val) {
          throw new Error('Not implemented');
        };
        BaseBuffer2.prototype.getInt16 = function (p) {
          return (this.getInt8(p) << 8) | this.getUInt8(p + 1);
        };
        BaseBuffer2.prototype.getUInt16 = function (p) {
          return (this.getUInt8(p) << 8) | this.getUInt8(p + 1);
        };
        BaseBuffer2.prototype.getInt32 = function (p) {
          return (
            (this.getInt8(p) << 24) |
            (this.getUInt8(p + 1) << 16) |
            (this.getUInt8(p + 2) << 8) |
            this.getUInt8(p + 3)
          );
        };
        BaseBuffer2.prototype.getUInt32 = function (p) {
          return (
            (this.getUInt8(p) << 24) |
            (this.getUInt8(p + 1) << 16) |
            (this.getUInt8(p + 2) << 8) |
            this.getUInt8(p + 3)
          );
        };
        BaseBuffer2.prototype.getInt64 = function (p) {
          return (
            (this.getInt8(p) << 56) |
            (this.getUInt8(p + 1) << 48) |
            (this.getUInt8(p + 2) << 40) |
            (this.getUInt8(p + 3) << 32) |
            (this.getUInt8(p + 4) << 24) |
            (this.getUInt8(p + 5) << 16) |
            (this.getUInt8(p + 6) << 8) |
            this.getUInt8(p + 7)
          );
        };
        BaseBuffer2.prototype.getSlice = function (start, length) {
          return new SliceBuffer(start, length, this);
        };
        BaseBuffer2.prototype.putInt16 = function (p, val) {
          this.putInt8(p, val >> 8);
          this.putUInt8(p + 1, val & 255);
        };
        BaseBuffer2.prototype.putUInt16 = function (p, val) {
          this.putUInt8(p, (val >> 8) & 255);
          this.putUInt8(p + 1, val & 255);
        };
        BaseBuffer2.prototype.putInt32 = function (p, val) {
          this.putInt8(p, val >> 24);
          this.putUInt8(p + 1, (val >> 16) & 255);
          this.putUInt8(p + 2, (val >> 8) & 255);
          this.putUInt8(p + 3, val & 255);
        };
        BaseBuffer2.prototype.putUInt32 = function (p, val) {
          this.putUInt8(p, (val >> 24) & 255);
          this.putUInt8(p + 1, (val >> 16) & 255);
          this.putUInt8(p + 2, (val >> 8) & 255);
          this.putUInt8(p + 3, val & 255);
        };
        BaseBuffer2.prototype.putInt64 = function (p, val) {
          this.putInt8(p, val >> 48);
          this.putUInt8(p + 1, (val >> 42) & 255);
          this.putUInt8(p + 2, (val >> 36) & 255);
          this.putUInt8(p + 3, (val >> 30) & 255);
          this.putUInt8(p + 4, (val >> 24) & 255);
          this.putUInt8(p + 5, (val >> 16) & 255);
          this.putUInt8(p + 6, (val >> 8) & 255);
          this.putUInt8(p + 7, val & 255);
        };
        BaseBuffer2.prototype.putBytes = function (position, other) {
          for (var i = 0, end = other.remaining(); i < end; i++) {
            this.putUInt8(position + i, other.readUInt8());
          }
        };
        BaseBuffer2.prototype.readUInt8 = function () {
          return this.getUInt8(this._updatePos(1));
        };
        BaseBuffer2.prototype.readInt8 = function () {
          return this.getInt8(this._updatePos(1));
        };
        BaseBuffer2.prototype.readUInt16 = function () {
          return this.getUInt16(this._updatePos(2));
        };
        BaseBuffer2.prototype.readUInt32 = function () {
          return this.getUInt32(this._updatePos(4));
        };
        BaseBuffer2.prototype.readInt16 = function () {
          return this.getInt16(this._updatePos(2));
        };
        BaseBuffer2.prototype.readInt32 = function () {
          return this.getInt32(this._updatePos(4));
        };
        BaseBuffer2.prototype.readInt64 = function () {
          return this.getInt32(this._updatePos(8));
        };
        BaseBuffer2.prototype.readFloat64 = function () {
          return this.getFloat64(this._updatePos(8));
        };
        BaseBuffer2.prototype.writeUInt8 = function (val) {
          this.putUInt8(this._updatePos(1), val);
        };
        BaseBuffer2.prototype.writeInt8 = function (val) {
          this.putInt8(this._updatePos(1), val);
        };
        BaseBuffer2.prototype.writeInt16 = function (val) {
          this.putInt16(this._updatePos(2), val);
        };
        BaseBuffer2.prototype.writeInt32 = function (val) {
          this.putInt32(this._updatePos(4), val);
        };
        BaseBuffer2.prototype.writeUInt32 = function (val) {
          this.putUInt32(this._updatePos(4), val);
        };
        BaseBuffer2.prototype.writeInt64 = function (val) {
          this.putInt64(this._updatePos(8), val);
        };
        BaseBuffer2.prototype.writeFloat64 = function (val) {
          this.putFloat64(this._updatePos(8), val);
        };
        BaseBuffer2.prototype.writeBytes = function (val) {
          this.putBytes(this._updatePos(val.remaining()), val);
        };
        BaseBuffer2.prototype.readSlice = function (length) {
          return this.getSlice(this._updatePos(length), length);
        };
        BaseBuffer2.prototype._updatePos = function (length) {
          var p = this.position;
          this.position += length;
          return p;
        };
        BaseBuffer2.prototype.remaining = function () {
          return this.length - this.position;
        };
        BaseBuffer2.prototype.hasRemaining = function () {
          return this.remaining() > 0;
        };
        BaseBuffer2.prototype.reset = function () {
          this.position = 0;
        };
        BaseBuffer2.prototype.toString = function () {
          return (
            this.constructor.name +
            '( position=' +
            this.position +
            ' )\n  ' +
            this.toHex()
          );
        };
        BaseBuffer2.prototype.toHex = function () {
          var out = '';
          for (var i = 0; i < this.length; i++) {
            var hexByte = this.getUInt8(i).toString(16);
            if (hexByte.length === 1) {
              hexByte = '0' + hexByte;
            }
            out += hexByte;
            if (i !== this.length - 1) {
              out += ' ';
            }
          }
          return out;
        };
        return BaseBuffer2;
      })();
      exports.default = BaseBuffer;
      var SliceBuffer = (function (_super) {
        __extends2(SliceBuffer2, _super);
        function SliceBuffer2(start, length, inner) {
          var _this = _super.call(this, length) || this;
          _this._start = start;
          _this._inner = inner;
          return _this;
        }
        SliceBuffer2.prototype.putUInt8 = function (position, val) {
          this._inner.putUInt8(this._start + position, val);
        };
        SliceBuffer2.prototype.getUInt8 = function (position) {
          return this._inner.getUInt8(this._start + position);
        };
        SliceBuffer2.prototype.putInt8 = function (position, val) {
          this._inner.putInt8(this._start + position, val);
        };
        SliceBuffer2.prototype.putFloat64 = function (position, val) {
          this._inner.putFloat64(this._start + position, val);
        };
        SliceBuffer2.prototype.getInt8 = function (position) {
          return this._inner.getInt8(this._start + position);
        };
        SliceBuffer2.prototype.getFloat64 = function (position) {
          return this._inner.getFloat64(this._start + position);
        };
        return SliceBuffer2;
      })(BaseBuffer);
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/buf/index.js
  var require_buf = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/buf/index.js'(exports) {
      'use strict';
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.BaseBuffer = void 0;
      var base_buf_1 = __importDefault2(require_base_buf());
      exports.BaseBuffer = base_buf_1.default;
      exports.default = base_buf_1.default;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/channel/channel-buf.js
  var require_channel_buf = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/channel/channel-buf.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.alloc = void 0;
      var buffer_1 = __importDefault2(require_buffer2());
      var buf_1 = __importDefault2(require_buf());
      var ChannelBuffer = (function (_super) {
        __extends2(ChannelBuffer2, _super);
        function ChannelBuffer2(arg) {
          var _this = this;
          var buffer = newChannelJSBuffer(arg);
          _this = _super.call(this, buffer.length) || this;
          _this._buffer = buffer;
          return _this;
        }
        ChannelBuffer2.prototype.getUInt8 = function (position) {
          return this._buffer.readUInt8(position);
        };
        ChannelBuffer2.prototype.getInt8 = function (position) {
          return this._buffer.readInt8(position);
        };
        ChannelBuffer2.prototype.getFloat64 = function (position) {
          return this._buffer.readDoubleBE(position);
        };
        ChannelBuffer2.prototype.putUInt8 = function (position, val) {
          this._buffer.writeUInt8(val, position);
        };
        ChannelBuffer2.prototype.putInt8 = function (position, val) {
          this._buffer.writeInt8(val, position);
        };
        ChannelBuffer2.prototype.putFloat64 = function (position, val) {
          this._buffer.writeDoubleBE(val, position);
        };
        ChannelBuffer2.prototype.putBytes = function (position, val) {
          if (val instanceof ChannelBuffer2) {
            var bytesToCopy = Math.min(
              val.length - val.position,
              this.length - position,
            );
            val._buffer.copy(
              this._buffer,
              position,
              val.position,
              val.position + bytesToCopy,
            );
            val.position += bytesToCopy;
          } else {
            _super.prototype.putBytes.call(this, position, val);
          }
        };
        ChannelBuffer2.prototype.getSlice = function (start, length) {
          return new ChannelBuffer2(this._buffer.slice(start, start + length));
        };
        return ChannelBuffer2;
      })(buf_1.default);
      exports.default = ChannelBuffer;
      function alloc(size) {
        return new ChannelBuffer(size);
      }
      exports.alloc = alloc;
      function newChannelJSBuffer(arg) {
        if (arg instanceof buffer_1.default.Buffer) {
          return arg;
        } else if (
          typeof arg === 'number' &&
          typeof buffer_1.default.Buffer.alloc === 'function'
        ) {
          return buffer_1.default.Buffer.alloc(arg);
        } else {
          return new buffer_1.default.Buffer(arg);
        }
      }
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/channel/browser/browser-channel.js
  var require_browser_channel = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/channel/browser/browser-channel.js'(
      exports,
    ) {
      'use strict';
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var channel_buf_1 = __importDefault2(require_channel_buf());
      var neo4j_driver_core_1 = require_lib();
      var _a = neo4j_driver_core_1.internal.util;
      var ENCRYPTION_OFF = _a.ENCRYPTION_OFF;
      var ENCRYPTION_ON = _a.ENCRYPTION_ON;
      var WS_OPEN = 1;
      var WS_CLOSED = 3;
      var WebSocketChannel = (function () {
        function WebSocketChannel2(config2, protocolSupplier, socketFactory) {
          if (protocolSupplier === void 0) {
            protocolSupplier = detectWebPageProtocol;
          }
          if (socketFactory === void 0) {
            socketFactory = function (url) {
              return new WebSocket(url);
            };
          }
          this._open = true;
          this._pending = [];
          this._error = null;
          this._handleConnectionError = this._handleConnectionError.bind(this);
          this._config = config2;
          var _a2 = determineWebSocketScheme(config2, protocolSupplier),
            scheme = _a2.scheme,
            error = _a2.error;
          if (error) {
            this._error = error;
            return;
          }
          this._ws = createWebSocket(scheme, config2.address, socketFactory);
          this._ws.binaryType = 'arraybuffer';
          var self2 = this;
          this._ws.onclose = function (e) {
            if (e && !e.wasClean) {
              self2._handleConnectionError();
            }
            self2._open = false;
          };
          this._ws.onopen = function () {
            self2._clearConnectionTimeout();
            var pending = self2._pending;
            self2._pending = null;
            for (var i = 0; i < pending.length; i++) {
              self2.write(pending[i]);
            }
          };
          this._ws.onmessage = function (event) {
            if (self2.onmessage) {
              var b = new channel_buf_1.default(event.data);
              self2.onmessage(b);
            }
          };
          this._ws.onerror = this._handleConnectionError;
          this._connectionTimeoutFired = false;
          this._connectionTimeoutId = this._setupConnectionTimeout();
        }
        WebSocketChannel2.prototype._handleConnectionError = function () {
          if (this._connectionTimeoutFired) {
            this._error = (0, neo4j_driver_core_1.newError)(
              'Failed to establish connection in ' +
                this._config.connectionTimeout +
                'ms',
              this._config.connectionErrorCode,
            );
            if (this.onerror) {
              this.onerror(this._error);
            }
            return;
          }
          if (this._open) {
            this._error = (0, neo4j_driver_core_1.newError)(
              'WebSocket connection failure. Due to security constraints in your web browser, the reason for the failure is not available to this Neo4j Driver. Please use your browsers development console to determine the root cause of the failure. Common reasons include the database being unavailable, using the wrong connection URL or temporary network problems. If you have enabled encryption, ensure your browser is configured to trust the certificate Neo4j is configured to use. WebSocket `readyState` is: ' +
                this._ws.readyState,
              this._config.connectionErrorCode,
            );
            if (this.onerror) {
              this.onerror(this._error);
            }
          }
        };
        WebSocketChannel2.prototype.write = function (buffer) {
          if (this._pending !== null) {
            this._pending.push(buffer);
          } else if (buffer instanceof channel_buf_1.default) {
            try {
              this._ws.send(buffer._buffer);
            } catch (error) {
              if (this._ws.readyState !== WS_OPEN) {
                this._handleConnectionError();
              } else {
                throw error;
              }
            }
          } else {
            throw (0, neo4j_driver_core_1.newError)(
              "Don't know how to send buffer: " + buffer,
            );
          }
        };
        WebSocketChannel2.prototype.close = function () {
          var _this = this;
          return new Promise(function (resolve, reject) {
            if (_this._ws && _this._ws.readyState !== WS_CLOSED) {
              _this._open = false;
              _this._clearConnectionTimeout();
              _this._ws.onclose = function () {
                return resolve();
              };
              _this._ws.close();
            } else {
              resolve();
            }
          });
        };
        WebSocketChannel2.prototype.setupReceiveTimeout = function (
          receiveTimeout,
        ) {};
        WebSocketChannel2.prototype.stopReceiveTimeout = function () {};
        WebSocketChannel2.prototype.startReceiveTimeout = function () {};
        WebSocketChannel2.prototype._setupConnectionTimeout = function () {
          var _this = this;
          var timeout = this._config.connectionTimeout;
          if (timeout) {
            var webSocket_1 = this._ws;
            return setTimeout(function () {
              if (webSocket_1.readyState !== WS_OPEN) {
                _this._connectionTimeoutFired = true;
                webSocket_1.close();
              }
            }, timeout);
          }
          return null;
        };
        WebSocketChannel2.prototype._clearConnectionTimeout = function () {
          var timeoutId = this._connectionTimeoutId;
          if (timeoutId || timeoutId === 0) {
            this._connectionTimeoutFired = false;
            this._connectionTimeoutId = null;
            clearTimeout(timeoutId);
          }
        };
        return WebSocketChannel2;
      })();
      exports.default = WebSocketChannel;
      function createWebSocket(scheme, address, socketFactory) {
        var url = scheme + '://' + address.asHostPort();
        try {
          return socketFactory(url);
        } catch (error) {
          if (isIPv6AddressIssueOnWindows(error, address)) {
            var windowsFriendlyUrl = asWindowsFriendlyIPv6Address(
              scheme,
              address,
            );
            return socketFactory(windowsFriendlyUrl);
          } else {
            throw error;
          }
        }
      }
      function isIPv6AddressIssueOnWindows(error, address) {
        return (
          error.name === 'SyntaxError' && isIPv6Address(address.asHostPort())
        );
      }
      function isIPv6Address(hostAndPort) {
        return hostAndPort.charAt(0) === '[' && hostAndPort.indexOf(']') !== -1;
      }
      function asWindowsFriendlyIPv6Address(scheme, address) {
        var hostWithoutColons = address
          .host()
          .replace(new RegExp(':', 'g'), '-');
        var hostWithoutPercent = hostWithoutColons.replace('%', 's');
        var ipv6Host = hostWithoutPercent + '.ipv6-literal.net';
        return scheme + '://' + ipv6Host + ':' + address.port();
      }
      function determineWebSocketScheme(config2, protocolSupplier) {
        var encryptionOn = isEncryptionExplicitlyTurnedOn(config2);
        var encryptionOff = isEncryptionExplicitlyTurnedOff(config2);
        var trust = config2.trust;
        var secureProtocol = isProtocolSecure(protocolSupplier);
        verifyEncryptionSettings(encryptionOn, encryptionOff, secureProtocol);
        if (encryptionOff) {
          return { scheme: 'ws', error: null };
        }
        if (secureProtocol) {
          return { scheme: 'wss', error: null };
        }
        if (encryptionOn) {
          if (!trust || trust === 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES') {
            return { scheme: 'wss', error: null };
          } else {
            var error = (0, neo4j_driver_core_1.newError)(
              "The browser version of this driver only supports one trust strategy, 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'. " +
                trust +
                ' is not supported. Please either use TRUST_SYSTEM_CA_SIGNED_CERTIFICATES or disable encryption by setting `encrypted:"' +
                ENCRYPTION_OFF +
                '"` in the driver configuration.',
            );
            return { scheme: null, error };
          }
        }
        return { scheme: 'ws', error: null };
      }
      function isEncryptionExplicitlyTurnedOn(config2) {
        return (
          config2.encrypted === true || config2.encrypted === ENCRYPTION_ON
        );
      }
      function isEncryptionExplicitlyTurnedOff(config2) {
        return (
          config2.encrypted === false || config2.encrypted === ENCRYPTION_OFF
        );
      }
      function isProtocolSecure(protocolSupplier) {
        var protocol =
          typeof protocolSupplier === 'function' ? protocolSupplier() : '';
        return protocol && protocol.toLowerCase().indexOf('https') >= 0;
      }
      function verifyEncryptionSettings(
        encryptionOn,
        encryptionOff,
        secureProtocol,
      ) {
        if (secureProtocol === null) {
        } else if (encryptionOn && !secureProtocol) {
          console.warn(
            'Neo4j driver is configured to use secure WebSocket on a HTTP web page. WebSockets might not work in a mixed content environment. Please consider configuring driver to not use encryption.',
          );
        } else if (encryptionOff && secureProtocol) {
          console.warn(
            'Neo4j driver is configured to use insecure WebSocket on a HTTPS web page. WebSockets might not work in a mixed content environment. Please consider configuring driver to use encryption.',
          );
        }
      }
      function detectWebPageProtocol() {
        return typeof window !== 'undefined' && window.location
          ? window.location.protocol
          : null;
      }
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/channel/browser/browser-host-name-resolver.js
  var require_browser_host_name_resolver = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/channel/browser/browser-host-name-resolver.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var neo4j_driver_core_1 = require_lib();
      var BaseHostNameResolver =
        neo4j_driver_core_1.internal.resolver.BaseHostNameResolver;
      var BrowserHostNameResolver = (function (_super) {
        __extends2(BrowserHostNameResolver2, _super);
        function BrowserHostNameResolver2() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        BrowserHostNameResolver2.prototype.resolve = function (address) {
          return this._resolveToItself(address);
        };
        return BrowserHostNameResolver2;
      })(BaseHostNameResolver);
      exports.default = BrowserHostNameResolver;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/channel/browser/index.js
  var require_browser = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/channel/browser/index.js'(
      exports,
    ) {
      'use strict';
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.HostNameResolver = exports.Channel = void 0;
      var browser_channel_1 = __importDefault2(require_browser_channel());
      var browser_host_name_resolver_1 = __importDefault2(
        require_browser_host_name_resolver(),
      );
      exports.Channel = browser_channel_1.default;
      exports.HostNameResolver = browser_host_name_resolver_1.default;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/channel/combined-buf.js
  var require_combined_buf = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/channel/combined-buf.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var buf_1 = require_buf();
      var channel_buf_1 = require_channel_buf();
      var CombinedBuffer = (function (_super) {
        __extends2(CombinedBuffer2, _super);
        function CombinedBuffer2(buffers) {
          var _this = this;
          var length = 0;
          for (var i = 0; i < buffers.length; i++) {
            length += buffers[i].length;
          }
          _this = _super.call(this, length) || this;
          _this._buffers = buffers;
          return _this;
        }
        CombinedBuffer2.prototype.getUInt8 = function (position) {
          for (var i = 0; i < this._buffers.length; i++) {
            var buffer = this._buffers[i];
            if (position >= buffer.length) {
              position -= buffer.length;
            } else {
              return buffer.getUInt8(position);
            }
          }
        };
        CombinedBuffer2.prototype.getInt8 = function (position) {
          for (var i = 0; i < this._buffers.length; i++) {
            var buffer = this._buffers[i];
            if (position >= buffer.length) {
              position -= buffer.length;
            } else {
              return buffer.getInt8(position);
            }
          }
        };
        CombinedBuffer2.prototype.getFloat64 = function (position) {
          var b = (0, channel_buf_1.alloc)(8);
          for (var i = 0; i < 8; i++) {
            b.putUInt8(i, this.getUInt8(position + i));
          }
          return b.getFloat64(0);
        };
        return CombinedBuffer2;
      })(buf_1.BaseBuffer);
      exports.default = CombinedBuffer;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/channel/chunking.js
  var require_chunking = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/channel/chunking.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.Dechunker = exports.Chunker = void 0;
      var base_buf_1 = __importDefault2(require_base_buf());
      var channel_buf_1 = require_channel_buf();
      var combined_buf_1 = __importDefault2(require_combined_buf());
      var _CHUNK_HEADER_SIZE = 2;
      var _MESSAGE_BOUNDARY = 0;
      var _DEFAULT_BUFFER_SIZE = 1400;
      var Chunker = (function (_super) {
        __extends2(Chunker2, _super);
        function Chunker2(channel, bufferSize) {
          var _this = _super.call(this, 0) || this;
          _this._bufferSize = bufferSize || _DEFAULT_BUFFER_SIZE;
          _this._ch = channel;
          _this._buffer = (0, channel_buf_1.alloc)(_this._bufferSize);
          _this._currentChunkStart = 0;
          _this._chunkOpen = false;
          return _this;
        }
        Chunker2.prototype.putUInt8 = function (position, val) {
          this._ensure(1);
          this._buffer.writeUInt8(val);
        };
        Chunker2.prototype.putInt8 = function (position, val) {
          this._ensure(1);
          this._buffer.writeInt8(val);
        };
        Chunker2.prototype.putFloat64 = function (position, val) {
          this._ensure(8);
          this._buffer.writeFloat64(val);
        };
        Chunker2.prototype.putBytes = function (position, data) {
          while (data.remaining() > 0) {
            this._ensure(1);
            if (this._buffer.remaining() > data.remaining()) {
              this._buffer.writeBytes(data);
            } else {
              this._buffer.writeBytes(data.readSlice(this._buffer.remaining()));
            }
          }
          return this;
        };
        Chunker2.prototype.flush = function () {
          if (this._buffer.position > 0) {
            this._closeChunkIfOpen();
            var out = this._buffer;
            this._buffer = null;
            this._ch.write(out.getSlice(0, out.position));
            this._buffer = (0, channel_buf_1.alloc)(this._bufferSize);
            this._chunkOpen = false;
          }
          return this;
        };
        Chunker2.prototype.messageBoundary = function () {
          this._closeChunkIfOpen();
          if (this._buffer.remaining() < _CHUNK_HEADER_SIZE) {
            this.flush();
          }
          this._buffer.writeInt16(_MESSAGE_BOUNDARY);
        };
        Chunker2.prototype._ensure = function (size) {
          var toWriteSize = this._chunkOpen ? size : size + _CHUNK_HEADER_SIZE;
          if (this._buffer.remaining() < toWriteSize) {
            this.flush();
          }
          if (!this._chunkOpen) {
            this._currentChunkStart = this._buffer.position;
            this._buffer.position = this._buffer.position + _CHUNK_HEADER_SIZE;
            this._chunkOpen = true;
          }
        };
        Chunker2.prototype._closeChunkIfOpen = function () {
          if (this._chunkOpen) {
            var chunkSize =
              this._buffer.position -
              (this._currentChunkStart + _CHUNK_HEADER_SIZE);
            this._buffer.putUInt16(this._currentChunkStart, chunkSize);
            this._chunkOpen = false;
          }
        };
        return Chunker2;
      })(base_buf_1.default);
      exports.Chunker = Chunker;
      var Dechunker = (function () {
        function Dechunker2() {
          this._currentMessage = [];
          this._partialChunkHeader = 0;
          this._state = this.AWAITING_CHUNK;
        }
        Dechunker2.prototype.AWAITING_CHUNK = function (buf) {
          if (buf.remaining() >= 2) {
            return this._onHeader(buf.readUInt16());
          } else {
            this._partialChunkHeader = buf.readUInt8() << 8;
            return this.IN_HEADER;
          }
        };
        Dechunker2.prototype.IN_HEADER = function (buf) {
          return this._onHeader(
            (this._partialChunkHeader | buf.readUInt8()) & 65535,
          );
        };
        Dechunker2.prototype.IN_CHUNK = function (buf) {
          if (this._chunkSize <= buf.remaining()) {
            this._currentMessage.push(buf.readSlice(this._chunkSize));
            return this.AWAITING_CHUNK;
          } else {
            this._chunkSize -= buf.remaining();
            this._currentMessage.push(buf.readSlice(buf.remaining()));
            return this.IN_CHUNK;
          }
        };
        Dechunker2.prototype.CLOSED = function (buf) {};
        Dechunker2.prototype._onHeader = function (header) {
          if (header === 0) {
            var message = void 0;
            switch (this._currentMessage.length) {
              case 0:
                return this.AWAITING_CHUNK;
              case 1:
                message = this._currentMessage[0];
                break;
              default:
                message = new combined_buf_1.default(this._currentMessage);
                break;
            }
            this._currentMessage = [];
            this.onmessage(message);
            return this.AWAITING_CHUNK;
          } else {
            this._chunkSize = header;
            return this.IN_CHUNK;
          }
        };
        Dechunker2.prototype.write = function (buf) {
          while (buf.hasRemaining()) {
            this._state = this._state(buf);
          }
        };
        return Dechunker2;
      })();
      exports.Dechunker = Dechunker;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/channel/channel-config.js
  var require_channel_config = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/channel/channel-config.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var neo4j_driver_core_1 = require_lib();
      var _a = neo4j_driver_core_1.internal.util;
      var ENCRYPTION_OFF = _a.ENCRYPTION_OFF;
      var ENCRYPTION_ON = _a.ENCRYPTION_ON;
      var SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;
      var DEFAULT_CONNECTION_TIMEOUT_MILLIS = 3e4;
      var ALLOWED_VALUES_ENCRYPTED = [
        null,
        void 0,
        true,
        false,
        ENCRYPTION_ON,
        ENCRYPTION_OFF,
      ];
      var ALLOWED_VALUES_TRUST = [
        null,
        void 0,
        'TRUST_ALL_CERTIFICATES',
        'TRUST_CUSTOM_CA_SIGNED_CERTIFICATES',
        'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES',
      ];
      var ChannelConfig = (function () {
        function ChannelConfig2(address, driverConfig, connectionErrorCode) {
          this.address = address;
          this.encrypted = extractEncrypted(driverConfig);
          this.trust = extractTrust(driverConfig);
          this.trustedCertificates = extractTrustedCertificates(driverConfig);
          this.knownHostsPath = extractKnownHostsPath(driverConfig);
          this.connectionErrorCode = connectionErrorCode || SERVICE_UNAVAILABLE;
          this.connectionTimeout = extractConnectionTimeout(driverConfig);
        }
        return ChannelConfig2;
      })();
      exports.default = ChannelConfig;
      function extractEncrypted(driverConfig) {
        var value = driverConfig.encrypted;
        if (ALLOWED_VALUES_ENCRYPTED.indexOf(value) === -1) {
          throw (0, neo4j_driver_core_1.newError)(
            'Illegal value of the encrypted setting ' +
              value +
              '. Expected one of ' +
              ALLOWED_VALUES_ENCRYPTED,
          );
        }
        return value;
      }
      function extractTrust(driverConfig) {
        var value = driverConfig.trust;
        if (ALLOWED_VALUES_TRUST.indexOf(value) === -1) {
          throw (0, neo4j_driver_core_1.newError)(
            'Illegal value of the trust setting ' +
              value +
              '. Expected one of ' +
              ALLOWED_VALUES_TRUST,
          );
        }
        return value;
      }
      function extractTrustedCertificates(driverConfig) {
        return driverConfig.trustedCertificates || [];
      }
      function extractKnownHostsPath(driverConfig) {
        return driverConfig.knownHosts || null;
      }
      function extractConnectionTimeout(driverConfig) {
        var configuredTimeout = parseInt(driverConfig.connectionTimeout, 10);
        if (configuredTimeout === 0) {
          return null;
        } else if (configuredTimeout && configuredTimeout < 0) {
          return null;
        } else if (!configuredTimeout) {
          return DEFAULT_CONNECTION_TIMEOUT_MILLIS;
        } else {
          return configuredTimeout;
        }
      }
    },
  });

  // node_modules/isarray/index.js
  var require_isarray = __commonJS({
    'node_modules/isarray/index.js'(exports, module) {
      var toString = {}.toString;
      module.exports =
        Array.isArray ||
        function (arr) {
          return toString.call(arr) == '[object Array]';
        };
    },
  });

  // node_modules/buffer/index.js
  var require_buffer3 = __commonJS({
    'node_modules/buffer/index.js'(exports) {
      'use strict';
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var isArray = require_isarray();
      exports.Buffer = Buffer2;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      Buffer2.TYPED_ARRAY_SUPPORT =
        global.TYPED_ARRAY_SUPPORT !== void 0
          ? global.TYPED_ARRAY_SUPPORT
          : typedArraySupport();
      exports.kMaxLength = kMaxLength();
      function typedArraySupport() {
        try {
          var arr = new Uint8Array(1);
          arr.__proto__ = {
            __proto__: Uint8Array.prototype,
            foo: function () {
              return 42;
            },
          };
          return (
            arr.foo() === 42 &&
            typeof arr.subarray === 'function' &&
            arr.subarray(1, 1).byteLength === 0
          );
        } catch (e) {
          return false;
        }
      }
      function kMaxLength() {
        return Buffer2.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
      }
      function createBuffer(that, length) {
        if (kMaxLength() < length) {
          throw new RangeError('Invalid typed array length');
        }
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          that = new Uint8Array(length);
          that.__proto__ = Buffer2.prototype;
        } else {
          if (that === null) {
            that = new Buffer2(length);
          }
          that.length = length;
        }
        return that;
      }
      function Buffer2(arg, encodingOrOffset, length) {
        if (!Buffer2.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer2)) {
          return new Buffer2(arg, encodingOrOffset, length);
        }
        if (typeof arg === 'number') {
          if (typeof encodingOrOffset === 'string') {
            throw new Error(
              'If encoding is specified then the first argument must be a string',
            );
          }
          return allocUnsafe(this, arg);
        }
        return from(this, arg, encodingOrOffset, length);
      }
      Buffer2.poolSize = 8192;
      Buffer2._augment = function (arr) {
        arr.__proto__ = Buffer2.prototype;
        return arr;
      };
      function from(that, value, encodingOrOffset, length) {
        if (typeof value === 'number') {
          throw new TypeError('"value" argument must not be a number');
        }
        if (
          typeof ArrayBuffer !== 'undefined' &&
          value instanceof ArrayBuffer
        ) {
          return fromArrayBuffer(that, value, encodingOrOffset, length);
        }
        if (typeof value === 'string') {
          return fromString(that, value, encodingOrOffset);
        }
        return fromObject(that, value);
      }
      Buffer2.from = function (value, encodingOrOffset, length) {
        return from(null, value, encodingOrOffset, length);
      };
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        Buffer2.prototype.__proto__ = Uint8Array.prototype;
        Buffer2.__proto__ = Uint8Array;
        if (
          typeof Symbol !== 'undefined' &&
          Symbol.species &&
          Buffer2[Symbol.species] === Buffer2
        ) {
          Object.defineProperty(Buffer2, Symbol.species, {
            value: null,
            configurable: true,
          });
        }
      }
      function assertSize(size) {
        if (typeof size !== 'number') {
          throw new TypeError('"size" argument must be a number');
        } else if (size < 0) {
          throw new RangeError('"size" argument must not be negative');
        }
      }
      function alloc(that, size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(that, size);
        }
        if (fill !== void 0) {
          return typeof encoding === 'string'
            ? createBuffer(that, size).fill(fill, encoding)
            : createBuffer(that, size).fill(fill);
        }
        return createBuffer(that, size);
      }
      Buffer2.alloc = function (size, fill, encoding) {
        return alloc(null, size, fill, encoding);
      };
      function allocUnsafe(that, size) {
        assertSize(size);
        that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
        if (!Buffer2.TYPED_ARRAY_SUPPORT) {
          for (var i = 0; i < size; ++i) {
            that[i] = 0;
          }
        }
        return that;
      }
      Buffer2.allocUnsafe = function (size) {
        return allocUnsafe(null, size);
      };
      Buffer2.allocUnsafeSlow = function (size) {
        return allocUnsafe(null, size);
      };
      function fromString(that, string, encoding) {
        if (typeof encoding !== 'string' || encoding === '') {
          encoding = 'utf8';
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError('"encoding" must be a valid string encoding');
        }
        var length = byteLength(string, encoding) | 0;
        that = createBuffer(that, length);
        var actual = that.write(string, encoding);
        if (actual !== length) {
          that = that.slice(0, actual);
        }
        return that;
      }
      function fromArrayLike2(that, array) {
        var length = array.length < 0 ? 0 : checked(array.length) | 0;
        that = createBuffer(that, length);
        for (var i = 0; i < length; i += 1) {
          that[i] = array[i] & 255;
        }
        return that;
      }
      function fromArrayBuffer(that, array, byteOffset, length) {
        array.byteLength;
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError("'offset' is out of bounds");
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError("'length' is out of bounds");
        }
        if (byteOffset === void 0 && length === void 0) {
          array = new Uint8Array(array);
        } else if (length === void 0) {
          array = new Uint8Array(array, byteOffset);
        } else {
          array = new Uint8Array(array, byteOffset, length);
        }
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          that = array;
          that.__proto__ = Buffer2.prototype;
        } else {
          that = fromArrayLike2(that, array);
        }
        return that;
      }
      function fromObject(that, obj) {
        if (Buffer2.isBuffer(obj)) {
          var len = checked(obj.length) | 0;
          that = createBuffer(that, len);
          if (that.length === 0) {
            return that;
          }
          obj.copy(that, 0, 0, len);
          return that;
        }
        if (obj) {
          if (
            (typeof ArrayBuffer !== 'undefined' &&
              obj.buffer instanceof ArrayBuffer) ||
            'length' in obj
          ) {
            if (typeof obj.length !== 'number' || isnan(obj.length)) {
              return createBuffer(that, 0);
            }
            return fromArrayLike2(that, obj);
          }
          if (obj.type === 'Buffer' && isArray(obj.data)) {
            return fromArrayLike2(that, obj.data);
          }
        }
        throw new TypeError(
          'First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.',
        );
      }
      function checked(length) {
        if (length >= kMaxLength()) {
          throw new RangeError(
            'Attempt to allocate Buffer larger than maximum size: 0x' +
              kMaxLength().toString(16) +
              ' bytes',
          );
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer2.alloc(+length);
      }
      Buffer2.isBuffer = function isBuffer(b) {
        return !!(b != null && b._isBuffer);
      };
      Buffer2.compare = function compare(a, b) {
        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
          throw new TypeError('Arguments must be Buffers');
        }
        if (a === b) return 0;
        var x = a.length;
        var y = b.length;
        for (var i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case 'hex':
          case 'utf8':
          case 'utf-8':
          case 'ascii':
          case 'latin1':
          case 'binary':
          case 'base64':
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat(list, length) {
        if (!isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        var i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        var buffer = Buffer2.allocUnsafe(length);
        var pos = 0;
        for (i = 0; i < list.length; ++i) {
          var buf = list[i];
          if (!Buffer2.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          }
          buf.copy(buffer, pos);
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer2.isBuffer(string)) {
          return string.length;
        }
        if (
          typeof ArrayBuffer !== 'undefined' &&
          typeof ArrayBuffer.isView === 'function' &&
          (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)
        ) {
          return string.byteLength;
        }
        if (typeof string !== 'string') {
          string = '' + string;
        }
        var len = string.length;
        if (len === 0) return 0;
        var loweredCase = false;
        for (;;) {
          switch (encoding) {
            case 'ascii':
            case 'latin1':
            case 'binary':
              return len;
            case 'utf8':
            case 'utf-8':
            case void 0:
              return utf8ToBytes(string).length;
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return len * 2;
            case 'hex':
              return len >>> 1;
            case 'base64':
              return base64ToBytes(string).length;
            default:
              if (loweredCase) return utf8ToBytes(string).length;
              encoding = ('' + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        var loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return '';
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return '';
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return '';
        }
        if (!encoding) encoding = 'utf8';
        while (true) {
          switch (encoding) {
            case 'hex':
              return hexSlice(this, start, end);
            case 'utf8':
            case 'utf-8':
              return utf8Slice(this, start, end);
            case 'ascii':
              return asciiSlice(this, start, end);
            case 'latin1':
            case 'binary':
              return latin1Slice(this, start, end);
            case 'base64':
              return base64Slice(this, start, end);
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError('Unknown encoding: ' + encoding);
              encoding = (encoding + '').toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.prototype._isBuffer = true;
      function swap(b, n, m) {
        var i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer2.prototype.swap16 = function swap16() {
        var len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 16-bits');
        }
        for (var i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        var len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 32-bits');
        }
        for (var i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        var len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 64-bits');
        }
        for (var i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString() {
        var length = this.length | 0;
        if (length === 0) return '';
        if (arguments.length === 0) return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.equals = function equals(b) {
        if (!Buffer2.isBuffer(b))
          throw new TypeError('Argument must be a Buffer');
        if (this === b) return true;
        return Buffer2.compare(this, b) === 0;
      };
      Buffer2.prototype.inspect = function inspect() {
        var str = '';
        var max = exports.INSPECT_MAX_BYTES;
        if (this.length > 0) {
          str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
          if (this.length > max) str += ' ... ';
        }
        return '<Buffer ' + str + '>';
      };
      Buffer2.prototype.compare = function compare(
        target,
        start,
        end,
        thisStart,
        thisEnd,
      ) {
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError('Argument must be a Buffer');
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (
          start < 0 ||
          end > target.length ||
          thisStart < 0 ||
          thisEnd > this.length
        ) {
          throw new RangeError('out of range index');
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target) return 0;
        var x = thisEnd - thisStart;
        var y = end - start;
        var len = Math.min(x, y);
        var thisCopy = this.slice(thisStart, thisEnd);
        var targetCopy = target.slice(start, end);
        for (var i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0) return -1;
        if (typeof byteOffset === 'string') {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (isNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir) return -1;
          else byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir) byteOffset = 0;
          else return -1;
        }
        if (typeof val === 'string') {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === 'number') {
          val = val & 255;
          if (
            Buffer2.TYPED_ARRAY_SUPPORT &&
            typeof Uint8Array.prototype.indexOf === 'function'
          ) {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(
                buffer,
                val,
                byteOffset,
              );
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError('val must be string, number or Buffer');
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        var indexSize = 1;
        var arrLength = arr.length;
        var valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (
            encoding === 'ucs2' ||
            encoding === 'ucs-2' ||
            encoding === 'utf16le' ||
            encoding === 'utf-16le'
          ) {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        var i;
        if (dir) {
          var foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (
              read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)
            ) {
              if (foundIndex === -1) foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1) i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            var found = true;
            for (var j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found) return i;
          }
        }
        return -1;
      }
      Buffer2.prototype.includes = function includes(
        val,
        byteOffset,
        encoding,
      ) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(
        val,
        byteOffset,
        encoding,
      ) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        var remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        var strLen = string.length;
        if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        for (var i = 0; i < length; ++i) {
          var parsed = parseInt(string.substr(i * 2, 2), 16);
          if (isNaN(parsed)) return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(
          utf8ToBytes(string, buf.length - offset),
          buf,
          offset,
          length,
        );
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function latin1Write(buf, string, offset, length) {
        return asciiWrite(buf, string, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(
          utf16leToBytes(string, buf.length - offset),
          buf,
          offset,
          length,
        );
      }
      Buffer2.prototype.write = function write(
        string,
        offset,
        length,
        encoding,
      ) {
        if (offset === void 0) {
          encoding = 'utf8';
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === 'string') {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset | 0;
          if (isFinite(length)) {
            length = length | 0;
            if (encoding === void 0) encoding = 'utf8';
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            'Buffer.write(string, encoding, offset[, length]) is no longer supported',
          );
        }
        var remaining = this.length - offset;
        if (length === void 0 || length > remaining) length = remaining;
        if (
          (string.length > 0 && (length < 0 || offset < 0)) ||
          offset > this.length
        ) {
          throw new RangeError('Attempt to write outside buffer bounds');
        }
        if (!encoding) encoding = 'utf8';
        var loweredCase = false;
        for (;;) {
          switch (encoding) {
            case 'hex':
              return hexWrite(this, string, offset, length);
            case 'utf8':
            case 'utf-8':
              return utf8Write(this, string, offset, length);
            case 'ascii':
              return asciiWrite(this, string, offset, length);
            case 'latin1':
            case 'binary':
              return latin1Write(this, string, offset, length);
            case 'base64':
              return base64Write(this, string, offset, length);
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError('Unknown encoding: ' + encoding);
              encoding = ('' + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON() {
        return {
          type: 'Buffer',
          data: Array.prototype.slice.call(this._arr || this, 0),
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        var res = [];
        var i = start;
        while (i < end) {
          var firstByte = buf[i];
          var codePoint = null;
          var bytesPerSequence =
            firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = ((firstByte & 31) << 6) | (secondByte & 63);
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint =
                    ((firstByte & 15) << 12) |
                    ((secondByte & 63) << 6) |
                    (thirdByte & 63);
                  if (
                    tempCodePoint > 2047 &&
                    (tempCodePoint < 55296 || tempCodePoint > 57343)
                  ) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if (
                  (secondByte & 192) === 128 &&
                  (thirdByte & 192) === 128 &&
                  (fourthByte & 192) === 128
                ) {
                  tempCodePoint =
                    ((firstByte & 15) << 18) |
                    ((secondByte & 63) << 12) |
                    ((thirdByte & 63) << 6) |
                    (fourthByte & 63);
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(((codePoint >>> 10) & 1023) | 55296);
            codePoint = 56320 | (codePoint & 1023);
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        var len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        var res = '';
        var i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH)),
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        var ret = '';
        end = Math.min(buf.length, end);
        for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        var ret = '';
        end = Math.min(buf.length, end);
        for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        var len = buf.length;
        if (!start || start < 0) start = 0;
        if (!end || end < 0 || end > len) end = len;
        var out = '';
        for (var i = start; i < end; ++i) {
          out += toHex(buf[i]);
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        var bytes = buf.slice(start, end);
        var res = '';
        for (var i = 0; i < bytes.length; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer2.prototype.slice = function slice(start, end) {
        var len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0) start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0) end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start) end = start;
        var newBuf;
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          newBuf = this.subarray(start, end);
          newBuf.__proto__ = Buffer2.prototype;
        } else {
          var sliceLen = end - start;
          newBuf = new Buffer2(sliceLen, void 0);
          for (var i = 0; i < sliceLen; ++i) {
            newBuf[i] = this[i + start];
          }
        }
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError('offset is not uint');
        if (offset + ext > length)
          throw new RangeError('Trying to access beyond buffer length');
      }
      Buffer2.prototype.readUIntLE = function readUIntLE(
        offset,
        byteLength2,
        noAssert,
      ) {
        offset = offset | 0;
        byteLength2 = byteLength2 | 0;
        if (!noAssert) checkOffset(offset, byteLength2, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUIntBE = function readUIntBE(
        offset,
        byteLength2,
        noAssert,
      ) {
        offset = offset | 0;
        byteLength2 = byteLength2 | 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        var val = this[offset + --byteLength2];
        var mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);
        return this[offset] | (this[offset + 1] << 8);
      };
      Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);
        return (this[offset] << 8) | this[offset + 1];
      };
      Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return (
          (this[offset] | (this[offset + 1] << 8) | (this[offset + 2] << 16)) +
          this[offset + 3] * 16777216
        );
      };
      Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return (
          this[offset] * 16777216 +
          ((this[offset + 1] << 16) |
            (this[offset + 2] << 8) |
            this[offset + 3])
        );
      };
      Buffer2.prototype.readIntLE = function readIntLE(
        offset,
        byteLength2,
        noAssert,
      ) {
        offset = offset | 0;
        byteLength2 = byteLength2 | 0;
        if (!noAssert) checkOffset(offset, byteLength2, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(
        offset,
        byteLength2,
        noAssert,
      ) {
        offset = offset | 0;
        byteLength2 = byteLength2 | 0;
        if (!noAssert) checkOffset(offset, byteLength2, this.length);
        var i = byteLength2;
        var mul = 1;
        var val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128)) return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);
        var val = this[offset] | (this[offset + 1] << 8);
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);
        var val = this[offset + 1] | (this[offset] << 8);
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return (
          this[offset] |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16) |
          (this[offset + 3] << 24)
        );
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return (
          (this[offset] << 24) |
          (this[offset + 1] << 16) |
          (this[offset + 2] << 8) |
          this[offset + 3]
        );
      };
      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer2.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError('Index out of range');
      }
      Buffer2.prototype.writeUIntLE = function writeUIntLE(
        value,
        offset,
        byteLength2,
        noAssert,
      ) {
        value = +value;
        offset = offset | 0;
        byteLength2 = byteLength2 | 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        var mul = 1;
        var i = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          this[offset + i] = (value / mul) & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUIntBE = function writeUIntBE(
        value,
        offset,
        byteLength2,
        noAssert,
      ) {
        value = +value;
        offset = offset | 0;
        byteLength2 = byteLength2 | 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        var i = byteLength2 - 1;
        var mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = (value / mul) & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUInt8 = function writeUInt8(
        value,
        offset,
        noAssert,
      ) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
        if (!Buffer2.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
        this[offset] = value & 255;
        return offset + 1;
      };
      function objectWriteUInt16(buf, value, offset, littleEndian) {
        if (value < 0) value = 65535 + value + 1;
        for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
          buf[offset + i] =
            (value & (255 << (8 * (littleEndian ? i : 1 - i)))) >>>
            ((littleEndian ? i : 1 - i) * 8);
        }
      }
      Buffer2.prototype.writeUInt16LE = function writeUInt16LE(
        value,
        offset,
        noAssert,
      ) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 255;
          this[offset + 1] = value >>> 8;
        } else {
          objectWriteUInt16(this, value, offset, true);
        }
        return offset + 2;
      };
      Buffer2.prototype.writeUInt16BE = function writeUInt16BE(
        value,
        offset,
        noAssert,
      ) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = value & 255;
        } else {
          objectWriteUInt16(this, value, offset, false);
        }
        return offset + 2;
      };
      function objectWriteUInt32(buf, value, offset, littleEndian) {
        if (value < 0) value = 4294967295 + value + 1;
        for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
          buf[offset + i] = (value >>> ((littleEndian ? i : 3 - i) * 8)) & 255;
        }
      }
      Buffer2.prototype.writeUInt32LE = function writeUInt32LE(
        value,
        offset,
        noAssert,
      ) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          this[offset + 3] = value >>> 24;
          this[offset + 2] = value >>> 16;
          this[offset + 1] = value >>> 8;
          this[offset] = value & 255;
        } else {
          objectWriteUInt32(this, value, offset, true);
        }
        return offset + 4;
      };
      Buffer2.prototype.writeUInt32BE = function writeUInt32BE(
        value,
        offset,
        noAssert,
      ) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 255;
        } else {
          objectWriteUInt32(this, value, offset, false);
        }
        return offset + 4;
      };
      Buffer2.prototype.writeIntLE = function writeIntLE(
        value,
        offset,
        byteLength2,
        noAssert,
      ) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        var i = 0;
        var mul = 1;
        var sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (((value / mul) >> 0) - sub) & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(
        value,
        offset,
        byteLength2,
        noAssert,
      ) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        var i = byteLength2 - 1;
        var mul = 1;
        var sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (((value / mul) >> 0) - sub) & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(
        value,
        offset,
        noAssert,
      ) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
        if (!Buffer2.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
        if (value < 0) value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(
        value,
        offset,
        noAssert,
      ) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 255;
          this[offset + 1] = value >>> 8;
        } else {
          objectWriteUInt16(this, value, offset, true);
        }
        return offset + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(
        value,
        offset,
        noAssert,
      ) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = value & 255;
        } else {
          objectWriteUInt16(this, value, offset, false);
        }
        return offset + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(
        value,
        offset,
        noAssert,
      ) {
        value = +value;
        offset = offset | 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 255;
          this[offset + 1] = value >>> 8;
          this[offset + 2] = value >>> 16;
          this[offset + 3] = value >>> 24;
        } else {
          objectWriteUInt32(this, value, offset, true);
        }
        return offset + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(
        value,
        offset,
        noAssert,
      ) {
        value = +value;
        offset = offset | 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0) value = 4294967295 + value + 1;
        if (Buffer2.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 255;
        } else {
          objectWriteUInt32(this, value, offset, false);
        }
        return offset + 4;
      };
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError('Index out of range');
        if (offset < 0) throw new RangeError('Index out of range');
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        if (!noAssert) {
          checkIEEE754(
            buf,
            value,
            offset,
            4,
            34028234663852886e22,
            -34028234663852886e22,
          );
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer2.prototype.writeFloatLE = function writeFloatLE(
        value,
        offset,
        noAssert,
      ) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(
        value,
        offset,
        noAssert,
      ) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        if (!noAssert) {
          checkIEEE754(
            buf,
            value,
            offset,
            8,
            17976931348623157e292,
            -17976931348623157e292,
          );
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(
        value,
        offset,
        noAssert,
      ) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(
        value,
        offset,
        noAssert,
      ) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
        if (!start) start = 0;
        if (!end && end !== 0) end = this.length;
        if (targetStart >= target.length) targetStart = target.length;
        if (!targetStart) targetStart = 0;
        if (end > 0 && end < start) end = start;
        if (end === start) return 0;
        if (target.length === 0 || this.length === 0) return 0;
        if (targetStart < 0) {
          throw new RangeError('targetStart out of bounds');
        }
        if (start < 0 || start >= this.length)
          throw new RangeError('sourceStart out of bounds');
        if (end < 0) throw new RangeError('sourceEnd out of bounds');
        if (end > this.length) end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        var len = end - start;
        var i;
        if (this === target && start < targetStart && targetStart < end) {
          for (i = len - 1; i >= 0; --i) {
            target[i + targetStart] = this[i + start];
          }
        } else if (len < 1e3 || !Buffer2.TYPED_ARRAY_SUPPORT) {
          for (i = 0; i < len; ++i) {
            target[i + targetStart] = this[i + start];
          }
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, start + len),
            targetStart,
          );
        }
        return len;
      };
      Buffer2.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === 'string') {
          if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
          }
          if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (code < 256) {
              val = code;
            }
          }
          if (encoding !== void 0 && typeof encoding !== 'string') {
            throw new TypeError('encoding must be a string');
          }
          if (typeof encoding === 'string' && !Buffer2.isEncoding(encoding)) {
            throw new TypeError('Unknown encoding: ' + encoding);
          }
        } else if (typeof val === 'number') {
          val = val & 255;
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError('Out of range index');
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val) val = 0;
        var i;
        if (typeof val === 'number') {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          var bytes = Buffer2.isBuffer(val)
            ? val
            : utf8ToBytes(new Buffer2(val, encoding).toString());
          var len = bytes.length;
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = stringtrim(str).replace(INVALID_BASE64_RE, '');
        if (str.length < 2) return '';
        while (str.length % 4 !== 0) {
          str = str + '=';
        }
        return str;
      }
      function stringtrim(str) {
        if (str.trim) return str.trim();
        return str.replace(/^\s+|\s+$/g, '');
      }
      function toHex(n) {
        if (n < 16) return '0' + n.toString(16);
        return n.toString(16);
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        var codePoint;
        var length = string.length;
        var leadSurrogate = null;
        var bytes = [];
        for (var i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint =
              (((leadSurrogate - 55296) << 10) | (codePoint - 56320)) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push((codePoint >> 6) | 192, (codePoint & 63) | 128);
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(
              (codePoint >> 12) | 224,
              ((codePoint >> 6) & 63) | 128,
              (codePoint & 63) | 128,
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(
              (codePoint >> 18) | 240,
              ((codePoint >> 12) & 63) | 128,
              ((codePoint >> 6) & 63) | 128,
              (codePoint & 63) | 128,
            );
          } else {
            throw new Error('Invalid code point');
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        var byteArray = [];
        for (var i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        var c, hi, lo;
        var byteArray = [];
        for (var i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0) break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        for (var i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length) break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isnan(val) {
        return val !== val;
      }
    },
  });

  // node_modules/safe-buffer/index.js
  var require_safe_buffer = __commonJS({
    'node_modules/safe-buffer/index.js'(exports, module) {
      var buffer = require_buffer3();
      var Buffer2 = buffer.Buffer;
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key];
        }
      }
      if (
        Buffer2.from &&
        Buffer2.alloc &&
        Buffer2.allocUnsafe &&
        Buffer2.allocUnsafeSlow
      ) {
        module.exports = buffer;
      } else {
        copyProps(buffer, exports);
        exports.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer2(arg, encodingOrOffset, length);
      }
      SafeBuffer.prototype = Object.create(Buffer2.prototype);
      copyProps(Buffer2, SafeBuffer);
      SafeBuffer.from = function (arg, encodingOrOffset, length) {
        if (typeof arg === 'number') {
          throw new TypeError('Argument must not be a number');
        }
        return Buffer2(arg, encodingOrOffset, length);
      };
      SafeBuffer.alloc = function (size, fill, encoding) {
        if (typeof size !== 'number') {
          throw new TypeError('Argument must be a number');
        }
        var buf = Buffer2(size);
        if (fill !== void 0) {
          if (typeof encoding === 'string') {
            buf.fill(fill, encoding);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function (size) {
        if (typeof size !== 'number') {
          throw new TypeError('Argument must be a number');
        }
        return Buffer2(size);
      };
      SafeBuffer.allocUnsafeSlow = function (size) {
        if (typeof size !== 'number') {
          throw new TypeError('Argument must be a number');
        }
        return buffer.SlowBuffer(size);
      };
    },
  });

  // node_modules/string_decoder/lib/string_decoder.js
  var require_string_decoder = __commonJS({
    'node_modules/string_decoder/lib/string_decoder.js'(exports) {
      'use strict';
      var Buffer2 = require_safe_buffer().Buffer;
      var isEncoding =
        Buffer2.isEncoding ||
        function (encoding) {
          encoding = '' + encoding;
          switch (encoding && encoding.toLowerCase()) {
            case 'hex':
            case 'utf8':
            case 'utf-8':
            case 'ascii':
            case 'binary':
            case 'base64':
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
            case 'raw':
              return true;
            default:
              return false;
          }
        };
      function _normalizeEncoding(enc) {
        if (!enc) return 'utf8';
        var retried;
        while (true) {
          switch (enc) {
            case 'utf8':
            case 'utf-8':
              return 'utf8';
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return 'utf16le';
            case 'latin1':
            case 'binary':
              return 'latin1';
            case 'base64':
            case 'ascii':
            case 'hex':
              return enc;
            default:
              if (retried) return;
              enc = ('' + enc).toLowerCase();
              retried = true;
          }
        }
      }
      function normalizeEncoding(enc) {
        var nenc = _normalizeEncoding(enc);
        if (
          typeof nenc !== 'string' &&
          (Buffer2.isEncoding === isEncoding || !isEncoding(enc))
        )
          throw new Error('Unknown encoding: ' + enc);
        return nenc || enc;
      }
      exports.StringDecoder = StringDecoder;
      function StringDecoder(encoding) {
        this.encoding = normalizeEncoding(encoding);
        var nb;
        switch (this.encoding) {
          case 'utf16le':
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
          case 'utf8':
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
          case 'base64':
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
          default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
        }
        this.lastNeed = 0;
        this.lastTotal = 0;
        this.lastChar = Buffer2.allocUnsafe(nb);
      }
      StringDecoder.prototype.write = function (buf) {
        if (buf.length === 0) return '';
        var r;
        var i;
        if (this.lastNeed) {
          r = this.fillLast(buf);
          if (r === void 0) return '';
          i = this.lastNeed;
          this.lastNeed = 0;
        } else {
          i = 0;
        }
        if (i < buf.length)
          return r ? r + this.text(buf, i) : this.text(buf, i);
        return r || '';
      };
      StringDecoder.prototype.end = utf8End;
      StringDecoder.prototype.text = utf8Text;
      StringDecoder.prototype.fillLast = function (buf) {
        if (this.lastNeed <= buf.length) {
          buf.copy(
            this.lastChar,
            this.lastTotal - this.lastNeed,
            0,
            this.lastNeed,
          );
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
        this.lastNeed -= buf.length;
      };
      function utf8CheckByte(byte) {
        if (byte <= 127) return 0;
        else if (byte >> 5 === 6) return 2;
        else if (byte >> 4 === 14) return 3;
        else if (byte >> 3 === 30) return 4;
        return byte >> 6 === 2 ? -1 : -2;
      }
      function utf8CheckIncomplete(self2, buf, i) {
        var j = buf.length - 1;
        if (j < i) return 0;
        var nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) self2.lastNeed = nb - 1;
          return nb;
        }
        if (--j < i || nb === -2) return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) self2.lastNeed = nb - 2;
          return nb;
        }
        if (--j < i || nb === -2) return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) {
            if (nb === 2) nb = 0;
            else self2.lastNeed = nb - 3;
          }
          return nb;
        }
        return 0;
      }
      function utf8CheckExtraBytes(self2, buf, p) {
        if ((buf[0] & 192) !== 128) {
          self2.lastNeed = 0;
          return '\uFFFD';
        }
        if (self2.lastNeed > 1 && buf.length > 1) {
          if ((buf[1] & 192) !== 128) {
            self2.lastNeed = 1;
            return '\uFFFD';
          }
          if (self2.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
              self2.lastNeed = 2;
              return '\uFFFD';
            }
          }
        }
      }
      function utf8FillLast(buf) {
        var p = this.lastTotal - this.lastNeed;
        var r = utf8CheckExtraBytes(this, buf, p);
        if (r !== void 0) return r;
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, p, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, p, 0, buf.length);
        this.lastNeed -= buf.length;
      }
      function utf8Text(buf, i) {
        var total = utf8CheckIncomplete(this, buf, i);
        if (!this.lastNeed) return buf.toString('utf8', i);
        this.lastTotal = total;
        var end = buf.length - (total - this.lastNeed);
        buf.copy(this.lastChar, 0, end);
        return buf.toString('utf8', i, end);
      }
      function utf8End(buf) {
        var r = buf && buf.length ? this.write(buf) : '';
        if (this.lastNeed) return r + '\uFFFD';
        return r;
      }
      function utf16Text(buf, i) {
        if ((buf.length - i) % 2 === 0) {
          var r = buf.toString('utf16le', i);
          if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 55296 && c <= 56319) {
              this.lastNeed = 2;
              this.lastTotal = 4;
              this.lastChar[0] = buf[buf.length - 2];
              this.lastChar[1] = buf[buf.length - 1];
              return r.slice(0, -1);
            }
          }
          return r;
        }
        this.lastNeed = 1;
        this.lastTotal = 2;
        this.lastChar[0] = buf[buf.length - 1];
        return buf.toString('utf16le', i, buf.length - 1);
      }
      function utf16End(buf) {
        var r = buf && buf.length ? this.write(buf) : '';
        if (this.lastNeed) {
          var end = this.lastTotal - this.lastNeed;
          return r + this.lastChar.toString('utf16le', 0, end);
        }
        return r;
      }
      function base64Text(buf, i) {
        var n = (buf.length - i) % 3;
        if (n === 0) return buf.toString('base64', i);
        this.lastNeed = 3 - n;
        this.lastTotal = 3;
        if (n === 1) {
          this.lastChar[0] = buf[buf.length - 1];
        } else {
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
        }
        return buf.toString('base64', i, buf.length - n);
      }
      function base64End(buf) {
        var r = buf && buf.length ? this.write(buf) : '';
        if (this.lastNeed)
          return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
        return r;
      }
      function simpleWrite(buf) {
        return buf.toString(this.encoding);
      }
      function simpleEnd(buf) {
        return buf && buf.length ? this.write(buf) : '';
      }
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/channel/utf8.js
  var require_utf8 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/channel/utf8.js'(exports) {
      'use strict';
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var channel_buf_1 = __importDefault2(require_channel_buf());
      var neo4j_driver_core_1 = require_lib();
      var buffer_1 = __importDefault2(require_buffer2());
      var string_decoder_1 = require_string_decoder();
      var decoder = new string_decoder_1.StringDecoder('utf8');
      function encode(str) {
        return new channel_buf_1.default(newBuffer(str));
      }
      function decode(buffer, length) {
        if (Object.prototype.hasOwnProperty.call(buffer, '_buffer')) {
          return decodeChannelBuffer(buffer, length);
        } else if (Object.prototype.hasOwnProperty.call(buffer, '_buffers')) {
          return decodeCombinedBuffer(buffer, length);
        } else {
          throw (0, neo4j_driver_core_1.newError)(
            "Don't know how to decode strings from '" + buffer + "'",
          );
        }
      }
      function decodeChannelBuffer(buffer, length) {
        var start = buffer.position;
        var end = start + length;
        buffer.position = Math.min(end, buffer.length);
        return buffer._buffer.toString('utf8', start, end);
      }
      function decodeCombinedBuffer(buffer, length) {
        return streamDecodeCombinedBuffer(
          buffer,
          length,
          function (partBuffer) {
            return decoder.write(partBuffer._buffer);
          },
          function () {
            return decoder.end();
          },
        );
      }
      function streamDecodeCombinedBuffer(
        combinedBuffers,
        length,
        decodeFn,
        endFn,
      ) {
        var remainingBytesToRead = length;
        var position = combinedBuffers.position;
        combinedBuffers._updatePos(
          Math.min(length, combinedBuffers.length - position),
        );
        var out = combinedBuffers._buffers.reduce(function (last, partBuffer) {
          if (remainingBytesToRead <= 0) {
            return last;
          } else if (position >= partBuffer.length) {
            position -= partBuffer.length;
            return '';
          } else {
            partBuffer._updatePos(position - partBuffer.position);
            var bytesToRead = Math.min(
              partBuffer.length - position,
              remainingBytesToRead,
            );
            var lastSlice = partBuffer.readSlice(bytesToRead);
            partBuffer._updatePos(bytesToRead);
            remainingBytesToRead = Math.max(
              remainingBytesToRead - lastSlice.length,
              0,
            );
            position = 0;
            return last + decodeFn(lastSlice);
          }
        }, '');
        return out + endFn();
      }
      function newBuffer(str) {
        if (typeof buffer_1.default.Buffer.from === 'function') {
          return buffer_1.default.Buffer.from(str, 'utf8');
        } else {
          return new buffer_1.default.Buffer(str, 'utf8');
        }
      }
      exports.default = {
        encode,
        decode,
      };
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/channel/index.js
  var require_channel = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/channel/index.js'(exports) {
      'use strict';
      var __createBinding2 =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __exportStar2 =
        (exports && exports.__exportStar) ||
        function (m, exports2) {
          for (var p in m)
            if (
              p !== 'default' &&
              !Object.prototype.hasOwnProperty.call(exports2, p)
            )
              __createBinding2(exports2, m, p);
        };
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.utf8 = exports.alloc = exports.ChannelConfig = void 0;
      __exportStar2(require_browser(), exports);
      __exportStar2(require_chunking(), exports);
      var channel_config_1 = require_channel_config();
      Object.defineProperty(exports, 'ChannelConfig', {
        enumerable: true,
        get: function () {
          return __importDefault2(channel_config_1).default;
        },
      });
      var channel_buf_1 = require_channel_buf();
      Object.defineProperty(exports, 'alloc', {
        enumerable: true,
        get: function () {
          return channel_buf_1.alloc;
        },
      });
      var utf8_1 = require_utf8();
      Object.defineProperty(exports, 'utf8', {
        enumerable: true,
        get: function () {
          return __importDefault2(utf8_1).default;
        },
      });
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/bolt/handshake.js
  var require_handshake = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/bolt/handshake.js'(exports) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var channel_1 = require_channel();
      var neo4j_driver_core_1 = require_lib();
      var BOLT_MAGIC_PREAMBLE = 1616949271;
      function version(major, minor) {
        return {
          major,
          minor,
        };
      }
      function createHandshakeMessage(versions) {
        if (versions.length > 4) {
          throw (0, neo4j_driver_core_1.newError)(
            'It should not have more than 4 versions of the protocol',
          );
        }
        var handshakeBuffer = (0, channel_1.alloc)(5 * 4);
        handshakeBuffer.writeInt32(BOLT_MAGIC_PREAMBLE);
        versions.forEach(function (version2) {
          if (version2 instanceof Array) {
            var _a = version2[0],
              major = _a.major,
              minor = _a.minor;
            var minMinor = version2[1].minor;
            var range = minor - minMinor;
            handshakeBuffer.writeInt32((range << 16) | (minor << 8) | major);
          } else {
            var major = version2.major,
              minor = version2.minor;
            handshakeBuffer.writeInt32((minor << 8) | major);
          }
        });
        handshakeBuffer.reset();
        return handshakeBuffer;
      }
      function parseNegotiatedResponse(buffer) {
        var h = [
          buffer.readUInt8(),
          buffer.readUInt8(),
          buffer.readUInt8(),
          buffer.readUInt8(),
        ];
        if (h[0] === 72 && h[1] === 84 && h[2] === 84 && h[3] === 80) {
          throw (0, neo4j_driver_core_1.newError)(
            'Server responded HTTP. Make sure you are not trying to connect to the http endpoint (HTTP defaults to port 7474 whereas BOLT defaults to port 7687)',
          );
        }
        return Number(h[3] + '.' + h[2]);
      }
      function newHandshakeBuffer() {
        return createHandshakeMessage([
          [version(4, 4), version(4, 2)],
          version(4, 1),
          version(4, 0),
          version(3, 0),
        ]);
      }
      function handshake(channel) {
        var _this = this;
        return new Promise(function (resolve, reject) {
          var handshakeErrorHandler = function (error) {
            reject(error);
          };
          channel.onerror = handshakeErrorHandler.bind(_this);
          if (channel._error) {
            handshakeErrorHandler(channel._error);
          }
          channel.onmessage = function (buffer) {
            try {
              var protocolVersion = parseNegotiatedResponse(buffer);
              resolve({
                protocolVersion,
                consumeRemainingBuffer: function (consumer) {
                  if (buffer.hasRemaining()) {
                    consumer(buffer.readSlice(buffer.remaining()));
                  }
                },
              });
            } catch (e) {
              reject(e);
            }
          };
          channel.write(newHandshakeBuffer());
        });
      }
      exports.default = handshake;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-util.js
  var require_bolt_protocol_util = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-util.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.assertImpersonatedUserIsEmpty =
        exports.assertTxConfigIsEmpty =
        exports.assertDatabaseIsEmpty =
          void 0;
      var neo4j_driver_core_1 = require_lib();
      function assertTxConfigIsEmpty(txConfig, onProtocolError, observer) {
        if (onProtocolError === void 0) {
          onProtocolError = function () {};
        }
        if (txConfig && !txConfig.isEmpty()) {
          var error = (0, neo4j_driver_core_1.newError)(
            'Driver is connected to the database that does not support transaction configuration. Please upgrade to neo4j 3.5.0 or later in order to use this functionality',
          );
          onProtocolError(error.message);
          observer.onError(error);
          throw error;
        }
      }
      exports.assertTxConfigIsEmpty = assertTxConfigIsEmpty;
      function assertDatabaseIsEmpty(database, onProtocolError, observer) {
        if (onProtocolError === void 0) {
          onProtocolError = function () {};
        }
        if (database) {
          var error = (0, neo4j_driver_core_1.newError)(
            'Driver is connected to the database that does not support multiple databases. Please upgrade to neo4j 4.0.0 or later in order to use this functionality',
          );
          onProtocolError(error.message);
          observer.onError(error);
          throw error;
        }
      }
      exports.assertDatabaseIsEmpty = assertDatabaseIsEmpty;
      function assertImpersonatedUserIsEmpty(
        impersonatedUser,
        onProtocolError,
        observer,
      ) {
        if (onProtocolError === void 0) {
          onProtocolError = function () {};
        }
        if (impersonatedUser) {
          var error = (0, neo4j_driver_core_1.newError)(
            'Driver is connected to the database that does not support user impersonation. Please upgrade to neo4j 4.4.0 or later in order to use this functionality. ' +
              ('Trying to impersonate ' + impersonatedUser + '.'),
          );
          onProtocolError(error.message);
          observer.onError(error);
          throw error;
        }
      }
      exports.assertImpersonatedUserIsEmpty = assertImpersonatedUserIsEmpty;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/packstream/packstream-v1.js
  var require_packstream_v1 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/packstream/packstream-v1.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.Structure = exports.Unpacker = exports.Packer = void 0;
      var channel_1 = require_channel();
      var neo4j_driver_core_1 = require_lib();
      var util = neo4j_driver_core_1.internal.util;
      var PROTOCOL_ERROR = neo4j_driver_core_1.error.PROTOCOL_ERROR;
      var TINY_STRING = 128;
      var TINY_LIST = 144;
      var TINY_MAP = 160;
      var TINY_STRUCT = 176;
      var NULL = 192;
      var FLOAT_64 = 193;
      var FALSE = 194;
      var TRUE = 195;
      var INT_8 = 200;
      var INT_16 = 201;
      var INT_32 = 202;
      var INT_64 = 203;
      var STRING_8 = 208;
      var STRING_16 = 209;
      var STRING_32 = 210;
      var LIST_8 = 212;
      var LIST_16 = 213;
      var LIST_32 = 214;
      var BYTES_8 = 204;
      var BYTES_16 = 205;
      var BYTES_32 = 206;
      var MAP_8 = 216;
      var MAP_16 = 217;
      var MAP_32 = 218;
      var STRUCT_8 = 220;
      var STRUCT_16 = 221;
      var NODE = 78;
      var NODE_STRUCT_SIZE = 3;
      var RELATIONSHIP = 82;
      var RELATIONSHIP_STRUCT_SIZE = 5;
      var UNBOUND_RELATIONSHIP = 114;
      var UNBOUND_RELATIONSHIP_STRUCT_SIZE = 3;
      var PATH = 80;
      var PATH_STRUCT_SIZE = 3;
      var Structure = (function () {
        function Structure2(signature, fields) {
          this.signature = signature;
          this.fields = fields;
        }
        Structure2.prototype.toString = function () {
          var fieldStr = '';
          for (var i = 0; i < this.fields.length; i++) {
            if (i > 0) {
              fieldStr += ', ';
            }
            fieldStr += this.fields[i];
          }
          return 'Structure(' + this.signature + ', [' + fieldStr + '])';
        };
        return Structure2;
      })();
      exports.Structure = Structure;
      var Packer = (function () {
        function Packer2(channel) {
          this._ch = channel;
          this._byteArraysSupported = true;
        }
        Packer2.prototype.packable = function (x) {
          var _this = this;
          if (x === null) {
            return function () {
              return _this._ch.writeUInt8(NULL);
            };
          } else if (x === true) {
            return function () {
              return _this._ch.writeUInt8(TRUE);
            };
          } else if (x === false) {
            return function () {
              return _this._ch.writeUInt8(FALSE);
            };
          } else if (typeof x === 'number') {
            return function () {
              return _this.packFloat(x);
            };
          } else if (typeof x === 'string') {
            return function () {
              return _this.packString(x);
            };
          } else if (typeof x === 'bigint') {
            return function () {
              return _this.packInteger((0, neo4j_driver_core_1.int)(x));
            };
          } else if ((0, neo4j_driver_core_1.isInt)(x)) {
            return function () {
              return _this.packInteger(x);
            };
          } else if (x instanceof Int8Array) {
            return function () {
              return _this.packBytes(x);
            };
          } else if (x instanceof Array) {
            return function () {
              _this.packListHeader(x.length);
              for (var i_1 = 0; i_1 < x.length; i_1++) {
                _this.packable(x[i_1] === void 0 ? null : x[i_1])();
              }
            };
          } else if (isIterable2(x)) {
            return this.packableIterable(x);
          } else if (x instanceof neo4j_driver_core_1.Node) {
            return this._nonPackableValue(
              'It is not allowed to pass nodes in query parameters, given: ' +
                x,
            );
          } else if (x instanceof neo4j_driver_core_1.Relationship) {
            return this._nonPackableValue(
              'It is not allowed to pass relationships in query parameters, given: ' +
                x,
            );
          } else if (x instanceof neo4j_driver_core_1.Path) {
            return this._nonPackableValue(
              'It is not allowed to pass paths in query parameters, given: ' +
                x,
            );
          } else if (x instanceof Structure) {
            var packableFields = [];
            for (var i = 0; i < x.fields.length; i++) {
              packableFields[i] = this.packable(x.fields[i]);
            }
            return function () {
              return _this.packStruct(x.signature, packableFields);
            };
          } else if (typeof x === 'object') {
            return function () {
              var keys = Object.keys(x);
              var count = 0;
              for (var i_2 = 0; i_2 < keys.length; i_2++) {
                if (x[keys[i_2]] !== void 0) {
                  count++;
                }
              }
              _this.packMapHeader(count);
              for (var i_3 = 0; i_3 < keys.length; i_3++) {
                var key = keys[i_3];
                if (x[key] !== void 0) {
                  _this.packString(key);
                  _this.packable(x[key])();
                }
              }
            };
          } else {
            return this._nonPackableValue(
              'Unable to pack the given value: ' + x,
            );
          }
        };
        Packer2.prototype.packableIterable = function (iterable) {
          try {
            var array = Array.from(iterable);
            return this.packable(array);
          } catch (e) {
            throw (0, neo4j_driver_core_1.newError)(
              'Cannot pack given iterable, ' + e.message + ': ' + iterable,
            );
          }
        };
        Packer2.prototype.packStruct = function (signature, packableFields) {
          packableFields = packableFields || [];
          this.packStructHeader(packableFields.length, signature);
          for (var i = 0; i < packableFields.length; i++) {
            packableFields[i]();
          }
        };
        Packer2.prototype.packInteger = function (x) {
          var high = x.high;
          var low = x.low;
          if (x.greaterThanOrEqual(-16) && x.lessThan(128)) {
            this._ch.writeInt8(low);
          } else if (x.greaterThanOrEqual(-128) && x.lessThan(-16)) {
            this._ch.writeUInt8(INT_8);
            this._ch.writeInt8(low);
          } else if (x.greaterThanOrEqual(-32768) && x.lessThan(32768)) {
            this._ch.writeUInt8(INT_16);
            this._ch.writeInt16(low);
          } else if (
            x.greaterThanOrEqual(-2147483648) &&
            x.lessThan(2147483648)
          ) {
            this._ch.writeUInt8(INT_32);
            this._ch.writeInt32(low);
          } else {
            this._ch.writeUInt8(INT_64);
            this._ch.writeInt32(high);
            this._ch.writeInt32(low);
          }
        };
        Packer2.prototype.packFloat = function (x) {
          this._ch.writeUInt8(FLOAT_64);
          this._ch.writeFloat64(x);
        };
        Packer2.prototype.packString = function (x) {
          var bytes = channel_1.utf8.encode(x);
          var size = bytes.length;
          if (size < 16) {
            this._ch.writeUInt8(TINY_STRING | size);
            this._ch.writeBytes(bytes);
          } else if (size < 256) {
            this._ch.writeUInt8(STRING_8);
            this._ch.writeUInt8(size);
            this._ch.writeBytes(bytes);
          } else if (size < 65536) {
            this._ch.writeUInt8(STRING_16);
            this._ch.writeUInt8((size / 256) >> 0);
            this._ch.writeUInt8(size % 256);
            this._ch.writeBytes(bytes);
          } else if (size < 4294967296) {
            this._ch.writeUInt8(STRING_32);
            this._ch.writeUInt8(((size / 16777216) >> 0) % 256);
            this._ch.writeUInt8(((size / 65536) >> 0) % 256);
            this._ch.writeUInt8(((size / 256) >> 0) % 256);
            this._ch.writeUInt8(size % 256);
            this._ch.writeBytes(bytes);
          } else {
            throw (0, neo4j_driver_core_1.newError)(
              'UTF-8 strings of size ' + size + ' are not supported',
            );
          }
        };
        Packer2.prototype.packListHeader = function (size) {
          if (size < 16) {
            this._ch.writeUInt8(TINY_LIST | size);
          } else if (size < 256) {
            this._ch.writeUInt8(LIST_8);
            this._ch.writeUInt8(size);
          } else if (size < 65536) {
            this._ch.writeUInt8(LIST_16);
            this._ch.writeUInt8(((size / 256) >> 0) % 256);
            this._ch.writeUInt8(size % 256);
          } else if (size < 4294967296) {
            this._ch.writeUInt8(LIST_32);
            this._ch.writeUInt8(((size / 16777216) >> 0) % 256);
            this._ch.writeUInt8(((size / 65536) >> 0) % 256);
            this._ch.writeUInt8(((size / 256) >> 0) % 256);
            this._ch.writeUInt8(size % 256);
          } else {
            throw (0, neo4j_driver_core_1.newError)(
              'Lists of size ' + size + ' are not supported',
            );
          }
        };
        Packer2.prototype.packBytes = function (array) {
          if (this._byteArraysSupported) {
            this.packBytesHeader(array.length);
            for (var i = 0; i < array.length; i++) {
              this._ch.writeInt8(array[i]);
            }
          } else {
            throw (0, neo4j_driver_core_1.newError)(
              'Byte arrays are not supported by the database this driver is connected to',
            );
          }
        };
        Packer2.prototype.packBytesHeader = function (size) {
          if (size < 256) {
            this._ch.writeUInt8(BYTES_8);
            this._ch.writeUInt8(size);
          } else if (size < 65536) {
            this._ch.writeUInt8(BYTES_16);
            this._ch.writeUInt8(((size / 256) >> 0) % 256);
            this._ch.writeUInt8(size % 256);
          } else if (size < 4294967296) {
            this._ch.writeUInt8(BYTES_32);
            this._ch.writeUInt8(((size / 16777216) >> 0) % 256);
            this._ch.writeUInt8(((size / 65536) >> 0) % 256);
            this._ch.writeUInt8(((size / 256) >> 0) % 256);
            this._ch.writeUInt8(size % 256);
          } else {
            throw (0, neo4j_driver_core_1.newError)(
              'Byte arrays of size ' + size + ' are not supported',
            );
          }
        };
        Packer2.prototype.packMapHeader = function (size) {
          if (size < 16) {
            this._ch.writeUInt8(TINY_MAP | size);
          } else if (size < 256) {
            this._ch.writeUInt8(MAP_8);
            this._ch.writeUInt8(size);
          } else if (size < 65536) {
            this._ch.writeUInt8(MAP_16);
            this._ch.writeUInt8((size / 256) >> 0);
            this._ch.writeUInt8(size % 256);
          } else if (size < 4294967296) {
            this._ch.writeUInt8(MAP_32);
            this._ch.writeUInt8(((size / 16777216) >> 0) % 256);
            this._ch.writeUInt8(((size / 65536) >> 0) % 256);
            this._ch.writeUInt8(((size / 256) >> 0) % 256);
            this._ch.writeUInt8(size % 256);
          } else {
            throw (0, neo4j_driver_core_1.newError)(
              'Maps of size ' + size + ' are not supported',
            );
          }
        };
        Packer2.prototype.packStructHeader = function (size, signature) {
          if (size < 16) {
            this._ch.writeUInt8(TINY_STRUCT | size);
            this._ch.writeUInt8(signature);
          } else if (size < 256) {
            this._ch.writeUInt8(STRUCT_8);
            this._ch.writeUInt8(size);
            this._ch.writeUInt8(signature);
          } else if (size < 65536) {
            this._ch.writeUInt8(STRUCT_16);
            this._ch.writeUInt8((size / 256) >> 0);
            this._ch.writeUInt8(size % 256);
          } else {
            throw (0, neo4j_driver_core_1.newError)(
              'Structures of size ' + size + ' are not supported',
            );
          }
        };
        Packer2.prototype.disableByteArrays = function () {
          this._byteArraysSupported = false;
        };
        Packer2.prototype._nonPackableValue = function (message) {
          return function () {
            throw (0, neo4j_driver_core_1.newError)(message, PROTOCOL_ERROR);
          };
        };
        return Packer2;
      })();
      exports.Packer = Packer;
      var Unpacker = (function () {
        function Unpacker2(disableLosslessIntegers, useBigInt) {
          if (disableLosslessIntegers === void 0) {
            disableLosslessIntegers = false;
          }
          if (useBigInt === void 0) {
            useBigInt = false;
          }
          this._disableLosslessIntegers = disableLosslessIntegers;
          this._useBigInt = useBigInt;
        }
        Unpacker2.prototype.unpack = function (buffer) {
          var marker = buffer.readUInt8();
          var markerHigh = marker & 240;
          var markerLow = marker & 15;
          if (marker === NULL) {
            return null;
          }
          var boolean = this._unpackBoolean(marker);
          if (boolean !== null) {
            return boolean;
          }
          var numberOrInteger = this._unpackNumberOrInteger(marker, buffer);
          if (numberOrInteger !== null) {
            if ((0, neo4j_driver_core_1.isInt)(numberOrInteger)) {
              if (this._useBigInt) {
                return numberOrInteger.toBigInt();
              } else if (this._disableLosslessIntegers) {
                return numberOrInteger.toNumberOrInfinity();
              }
            }
            return numberOrInteger;
          }
          var string = this._unpackString(
            marker,
            markerHigh,
            markerLow,
            buffer,
          );
          if (string !== null) {
            return string;
          }
          var list = this._unpackList(marker, markerHigh, markerLow, buffer);
          if (list !== null) {
            return list;
          }
          var byteArray = this._unpackByteArray(marker, buffer);
          if (byteArray !== null) {
            return byteArray;
          }
          var map2 = this._unpackMap(marker, markerHigh, markerLow, buffer);
          if (map2 !== null) {
            return map2;
          }
          var struct = this._unpackStruct(
            marker,
            markerHigh,
            markerLow,
            buffer,
          );
          if (struct !== null) {
            return struct;
          }
          throw (0, neo4j_driver_core_1.newError)(
            'Unknown packed value with marker ' + marker.toString(16),
          );
        };
        Unpacker2.prototype.unpackInteger = function (buffer) {
          var marker = buffer.readUInt8();
          var result = this._unpackInteger(marker, buffer);
          if (result == null) {
            throw (0, neo4j_driver_core_1.newError)(
              'Unable to unpack integer value with marker ' +
                marker.toString(16),
            );
          }
          return result;
        };
        Unpacker2.prototype._unpackBoolean = function (marker) {
          if (marker === TRUE) {
            return true;
          } else if (marker === FALSE) {
            return false;
          } else {
            return null;
          }
        };
        Unpacker2.prototype._unpackNumberOrInteger = function (marker, buffer) {
          if (marker === FLOAT_64) {
            return buffer.readFloat64();
          } else {
            return this._unpackInteger(marker, buffer);
          }
        };
        Unpacker2.prototype._unpackInteger = function (marker, buffer) {
          if (marker >= 0 && marker < 128) {
            return (0, neo4j_driver_core_1.int)(marker);
          } else if (marker >= 240 && marker < 256) {
            return (0, neo4j_driver_core_1.int)(marker - 256);
          } else if (marker === INT_8) {
            return (0, neo4j_driver_core_1.int)(buffer.readInt8());
          } else if (marker === INT_16) {
            return (0, neo4j_driver_core_1.int)(buffer.readInt16());
          } else if (marker === INT_32) {
            var b = buffer.readInt32();
            return (0, neo4j_driver_core_1.int)(b);
          } else if (marker === INT_64) {
            var high = buffer.readInt32();
            var low = buffer.readInt32();
            return new neo4j_driver_core_1.Integer(low, high);
          } else {
            return null;
          }
        };
        Unpacker2.prototype._unpackString = function (
          marker,
          markerHigh,
          markerLow,
          buffer,
        ) {
          if (markerHigh === TINY_STRING) {
            return channel_1.utf8.decode(buffer, markerLow);
          } else if (marker === STRING_8) {
            return channel_1.utf8.decode(buffer, buffer.readUInt8());
          } else if (marker === STRING_16) {
            return channel_1.utf8.decode(buffer, buffer.readUInt16());
          } else if (marker === STRING_32) {
            return channel_1.utf8.decode(buffer, buffer.readUInt32());
          } else {
            return null;
          }
        };
        Unpacker2.prototype._unpackList = function (
          marker,
          markerHigh,
          markerLow,
          buffer,
        ) {
          if (markerHigh === TINY_LIST) {
            return this._unpackListWithSize(markerLow, buffer);
          } else if (marker === LIST_8) {
            return this._unpackListWithSize(buffer.readUInt8(), buffer);
          } else if (marker === LIST_16) {
            return this._unpackListWithSize(buffer.readUInt16(), buffer);
          } else if (marker === LIST_32) {
            return this._unpackListWithSize(buffer.readUInt32(), buffer);
          } else {
            return null;
          }
        };
        Unpacker2.prototype._unpackListWithSize = function (size, buffer) {
          var value = [];
          for (var i = 0; i < size; i++) {
            value.push(this.unpack(buffer));
          }
          return value;
        };
        Unpacker2.prototype._unpackByteArray = function (marker, buffer) {
          if (marker === BYTES_8) {
            return this._unpackByteArrayWithSize(buffer.readUInt8(), buffer);
          } else if (marker === BYTES_16) {
            return this._unpackByteArrayWithSize(buffer.readUInt16(), buffer);
          } else if (marker === BYTES_32) {
            return this._unpackByteArrayWithSize(buffer.readUInt32(), buffer);
          } else {
            return null;
          }
        };
        Unpacker2.prototype._unpackByteArrayWithSize = function (size, buffer) {
          var value = new Int8Array(size);
          for (var i = 0; i < size; i++) {
            value[i] = buffer.readInt8();
          }
          return value;
        };
        Unpacker2.prototype._unpackMap = function (
          marker,
          markerHigh,
          markerLow,
          buffer,
        ) {
          if (markerHigh === TINY_MAP) {
            return this._unpackMapWithSize(markerLow, buffer);
          } else if (marker === MAP_8) {
            return this._unpackMapWithSize(buffer.readUInt8(), buffer);
          } else if (marker === MAP_16) {
            return this._unpackMapWithSize(buffer.readUInt16(), buffer);
          } else if (marker === MAP_32) {
            return this._unpackMapWithSize(buffer.readUInt32(), buffer);
          } else {
            return null;
          }
        };
        Unpacker2.prototype._unpackMapWithSize = function (size, buffer) {
          var value = {};
          for (var i = 0; i < size; i++) {
            var key = this.unpack(buffer);
            value[key] = this.unpack(buffer);
          }
          return value;
        };
        Unpacker2.prototype._unpackStruct = function (
          marker,
          markerHigh,
          markerLow,
          buffer,
        ) {
          try {
            if (markerHigh === TINY_STRUCT) {
              return this._unpackStructWithSize(markerLow, buffer);
            } else if (marker === STRUCT_8) {
              return this._unpackStructWithSize(buffer.readUInt8(), buffer);
            } else if (marker === STRUCT_16) {
              return this._unpackStructWithSize(buffer.readUInt16(), buffer);
            } else {
              return null;
            }
          } catch (error) {
            return util.createBrokenObject(error);
          }
        };
        Unpacker2.prototype._unpackStructWithSize = function (
          structSize,
          buffer,
        ) {
          var signature = buffer.readUInt8();
          if (signature === NODE) {
            return this._unpackNode(structSize, buffer);
          } else if (signature === RELATIONSHIP) {
            return this._unpackRelationship(structSize, buffer);
          } else if (signature === UNBOUND_RELATIONSHIP) {
            return this._unpackUnboundRelationship(structSize, buffer);
          } else if (signature === PATH) {
            return this._unpackPath(structSize, buffer);
          } else {
            return this._unpackUnknownStruct(signature, structSize, buffer);
          }
        };
        Unpacker2.prototype._unpackNode = function (structSize, buffer) {
          this._verifyStructSize('Node', NODE_STRUCT_SIZE, structSize);
          return new neo4j_driver_core_1.Node(
            this.unpack(buffer),
            this.unpack(buffer),
            this.unpack(buffer),
          );
        };
        Unpacker2.prototype._unpackRelationship = function (
          structSize,
          buffer,
        ) {
          this._verifyStructSize(
            'Relationship',
            RELATIONSHIP_STRUCT_SIZE,
            structSize,
          );
          return new neo4j_driver_core_1.Relationship(
            this.unpack(buffer),
            this.unpack(buffer),
            this.unpack(buffer),
            this.unpack(buffer),
            this.unpack(buffer),
          );
        };
        Unpacker2.prototype._unpackUnboundRelationship = function (
          structSize,
          buffer,
        ) {
          this._verifyStructSize(
            'UnboundRelationship',
            UNBOUND_RELATIONSHIP_STRUCT_SIZE,
            structSize,
          );
          return new neo4j_driver_core_1.UnboundRelationship(
            this.unpack(buffer),
            this.unpack(buffer),
            this.unpack(buffer),
          );
        };
        Unpacker2.prototype._unpackPath = function (structSize, buffer) {
          this._verifyStructSize('Path', PATH_STRUCT_SIZE, structSize);
          var nodes = this.unpack(buffer);
          var rels = this.unpack(buffer);
          var sequence = this.unpack(buffer);
          var segments = [];
          var prevNode = nodes[0];
          for (var i = 0; i < sequence.length; i += 2) {
            var nextNode = nodes[sequence[i + 1]];
            var relIndex = (0, neo4j_driver_core_1.toNumber)(sequence[i]);
            var rel = void 0;
            if (relIndex > 0) {
              rel = rels[relIndex - 1];
              if (rel instanceof neo4j_driver_core_1.UnboundRelationship) {
                rels[relIndex - 1] = rel = rel.bind(
                  prevNode.identity,
                  nextNode.identity,
                );
              }
            } else {
              rel = rels[-relIndex - 1];
              if (rel instanceof neo4j_driver_core_1.UnboundRelationship) {
                rels[-relIndex - 1] = rel = rel.bind(
                  nextNode.identity,
                  prevNode.identity,
                );
              }
            }
            segments.push(
              new neo4j_driver_core_1.PathSegment(prevNode, rel, nextNode),
            );
            prevNode = nextNode;
          }
          return new neo4j_driver_core_1.Path(
            nodes[0],
            nodes[nodes.length - 1],
            segments,
          );
        };
        Unpacker2.prototype._unpackUnknownStruct = function (
          signature,
          structSize,
          buffer,
        ) {
          var result = new Structure(signature, []);
          for (var i = 0; i < structSize; i++) {
            result.fields.push(this.unpack(buffer));
          }
          return result;
        };
        Unpacker2.prototype._verifyStructSize = function (
          structName,
          expectedSize,
          actualSize,
        ) {
          if (expectedSize !== actualSize) {
            throw (0, neo4j_driver_core_1.newError)(
              'Wrong struct size for ' +
                structName +
                ', expected ' +
                expectedSize +
                ' but was ' +
                actualSize,
              PROTOCOL_ERROR,
            );
          }
        };
        return Unpacker2;
      })();
      exports.Unpacker = Unpacker;
      function isIterable2(obj) {
        if (obj == null) {
          return false;
        }
        return typeof obj[Symbol.iterator] === 'function';
      }
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/packstream/temporal-factory.js
  var require_temporal_factory = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/packstream/temporal-factory.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.epochSecondAndNanoToLocalDateTime =
        exports.nanoOfDayToLocalTime =
        exports.epochDayToDate =
          void 0;
      var neo4j_driver_core_1 = require_lib();
      var _a = neo4j_driver_core_1.internal.temporalUtil;
      var DAYS_0000_TO_1970 = _a.DAYS_0000_TO_1970;
      var DAYS_PER_400_YEAR_CYCLE = _a.DAYS_PER_400_YEAR_CYCLE;
      var NANOS_PER_HOUR = _a.NANOS_PER_HOUR;
      var NANOS_PER_MINUTE = _a.NANOS_PER_MINUTE;
      var NANOS_PER_SECOND = _a.NANOS_PER_SECOND;
      var SECONDS_PER_DAY = _a.SECONDS_PER_DAY;
      var floorDiv = _a.floorDiv;
      var floorMod = _a.floorMod;
      function epochDayToDate(epochDay) {
        epochDay = (0, neo4j_driver_core_1.int)(epochDay);
        var zeroDay = epochDay.add(DAYS_0000_TO_1970).subtract(60);
        var adjust = (0, neo4j_driver_core_1.int)(0);
        if (zeroDay.lessThan(0)) {
          var adjustCycles = zeroDay
            .add(1)
            .div(DAYS_PER_400_YEAR_CYCLE)
            .subtract(1);
          adjust = adjustCycles.multiply(400);
          zeroDay = zeroDay.add(
            adjustCycles.multiply(-DAYS_PER_400_YEAR_CYCLE),
          );
        }
        var year = zeroDay.multiply(400).add(591).div(DAYS_PER_400_YEAR_CYCLE);
        var dayOfYearEst = zeroDay.subtract(
          year
            .multiply(365)
            .add(year.div(4))
            .subtract(year.div(100))
            .add(year.div(400)),
        );
        if (dayOfYearEst.lessThan(0)) {
          year = year.subtract(1);
          dayOfYearEst = zeroDay.subtract(
            year
              .multiply(365)
              .add(year.div(4))
              .subtract(year.div(100))
              .add(year.div(400)),
          );
        }
        year = year.add(adjust);
        var marchDayOfYear = dayOfYearEst;
        var marchMonth = marchDayOfYear.multiply(5).add(2).div(153);
        var month = marchMonth.add(2).modulo(12).add(1);
        var day = marchDayOfYear
          .subtract(marchMonth.multiply(306).add(5).div(10))
          .add(1);
        year = year.add(marchMonth.div(10));
        return new neo4j_driver_core_1.Date(year, month, day);
      }
      exports.epochDayToDate = epochDayToDate;
      function nanoOfDayToLocalTime(nanoOfDay) {
        nanoOfDay = (0, neo4j_driver_core_1.int)(nanoOfDay);
        var hour = nanoOfDay.div(NANOS_PER_HOUR);
        nanoOfDay = nanoOfDay.subtract(hour.multiply(NANOS_PER_HOUR));
        var minute = nanoOfDay.div(NANOS_PER_MINUTE);
        nanoOfDay = nanoOfDay.subtract(minute.multiply(NANOS_PER_MINUTE));
        var second = nanoOfDay.div(NANOS_PER_SECOND);
        var nanosecond = nanoOfDay.subtract(second.multiply(NANOS_PER_SECOND));
        return new neo4j_driver_core_1.LocalTime(
          hour,
          minute,
          second,
          nanosecond,
        );
      }
      exports.nanoOfDayToLocalTime = nanoOfDayToLocalTime;
      function epochSecondAndNanoToLocalDateTime(epochSecond, nano) {
        var epochDay = floorDiv(epochSecond, SECONDS_PER_DAY);
        var secondsOfDay = floorMod(epochSecond, SECONDS_PER_DAY);
        var nanoOfDay = secondsOfDay.multiply(NANOS_PER_SECOND).add(nano);
        var localDate = epochDayToDate(epochDay);
        var localTime = nanoOfDayToLocalTime(nanoOfDay);
        return new neo4j_driver_core_1.LocalDateTime(
          localDate.year,
          localDate.month,
          localDate.day,
          localTime.hour,
          localTime.minute,
          localTime.second,
          localTime.nanosecond,
        );
      }
      exports.epochSecondAndNanoToLocalDateTime =
        epochSecondAndNanoToLocalDateTime;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/packstream/packstream-utc.js
  var require_packstream_utc = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/packstream/packstream-utc.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.packDateTime =
        exports.unpackDateTimeWithZoneId =
        exports.unpackDateTimeWithZoneOffset =
        exports.DATE_TIME_WITH_ZONE_ID =
        exports.DATE_TIME_WITH_ZONE_OFFSET =
          void 0;
      var neo4j_driver_core_1 = require_lib();
      var temporal_factory_1 = require_temporal_factory();
      var localDateTimeToEpochSecond =
        neo4j_driver_core_1.internal.temporalUtil.localDateTimeToEpochSecond;
      exports.DATE_TIME_WITH_ZONE_OFFSET = 73;
      var DATE_TIME_WITH_ZONE_OFFSET_STRUCT_SIZE = 3;
      exports.DATE_TIME_WITH_ZONE_ID = 105;
      var DATE_TIME_WITH_ZONE_ID_STRUCT_SIZE = 3;
      function unpackDateTimeWithZoneOffset(
        unpacker,
        structSize,
        buffer,
        disableLosslessIntegers,
        useBigInt,
      ) {
        unpacker._verifyStructSize(
          'DateTimeWithZoneOffset',
          DATE_TIME_WITH_ZONE_OFFSET_STRUCT_SIZE,
          structSize,
        );
        var utcSecond = unpacker.unpackInteger(buffer);
        var nano = unpacker.unpackInteger(buffer);
        var timeZoneOffsetSeconds = unpacker.unpackInteger(buffer);
        var epochSecond = (0, neo4j_driver_core_1.int)(utcSecond).add(
          timeZoneOffsetSeconds,
        );
        var localDateTime = (0,
        temporal_factory_1.epochSecondAndNanoToLocalDateTime)(
          epochSecond,
          nano,
        );
        var result = new neo4j_driver_core_1.DateTime(
          localDateTime.year,
          localDateTime.month,
          localDateTime.day,
          localDateTime.hour,
          localDateTime.minute,
          localDateTime.second,
          localDateTime.nanosecond,
          timeZoneOffsetSeconds,
          null,
        );
        return convertIntegerPropsIfNeeded(
          result,
          disableLosslessIntegers,
          useBigInt,
        );
      }
      exports.unpackDateTimeWithZoneOffset = unpackDateTimeWithZoneOffset;
      function unpackDateTimeWithZoneId(
        unpacker,
        structSize,
        buffer,
        disableLosslessIntegers,
        useBigInt,
      ) {
        unpacker._verifyStructSize(
          'DateTimeWithZoneId',
          DATE_TIME_WITH_ZONE_ID_STRUCT_SIZE,
          structSize,
        );
        var epochSecond = unpacker.unpackInteger(buffer);
        var nano = unpacker.unpackInteger(buffer);
        var timeZoneId = unpacker.unpack(buffer);
        var localDateTime = getTimeInZoneId(timeZoneId, epochSecond, nano);
        var result = new neo4j_driver_core_1.DateTime(
          localDateTime.year,
          localDateTime.month,
          localDateTime.day,
          localDateTime.hour,
          localDateTime.minute,
          localDateTime.second,
          (0, neo4j_driver_core_1.int)(nano),
          localDateTime.timeZoneOffsetSeconds,
          timeZoneId,
        );
        return convertIntegerPropsIfNeeded(
          result,
          disableLosslessIntegers,
          useBigInt,
        );
      }
      exports.unpackDateTimeWithZoneId = unpackDateTimeWithZoneId;
      function packDateTime(value, packer) {
        if (value.timeZoneId) {
          packDateTimeWithZoneId(value, packer);
        } else {
          packDateTimeWithZoneOffset(value, packer);
        }
      }
      exports.packDateTime = packDateTime;
      function packDateTimeWithZoneId(value, packer) {
        var epochSecond = localDateTimeToEpochSecond(
          value.year,
          value.month,
          value.day,
          value.hour,
          value.minute,
          value.second,
          value.nanosecond,
        );
        var offset =
          value.timeZoneOffsetSeconds != null
            ? value.timeZoneOffsetSeconds
            : getOffsetFromZoneId(
                value.timeZoneId,
                epochSecond,
                value.nanosecond,
              );
        var utc = epochSecond.subtract(offset);
        var nano = (0, neo4j_driver_core_1.int)(value.nanosecond);
        var timeZoneId = value.timeZoneId;
        var packableStructFields = [
          packer.packable(utc),
          packer.packable(nano),
          packer.packable(timeZoneId),
        ];
        packer.packStruct(exports.DATE_TIME_WITH_ZONE_ID, packableStructFields);
      }
      function packDateTimeWithZoneOffset(value, packer) {
        var epochSecond = localDateTimeToEpochSecond(
          value.year,
          value.month,
          value.day,
          value.hour,
          value.minute,
          value.second,
          value.nanosecond,
        );
        var nano = (0, neo4j_driver_core_1.int)(value.nanosecond);
        var timeZoneOffsetSeconds = (0, neo4j_driver_core_1.int)(
          value.timeZoneOffsetSeconds,
        );
        var utcSecond = epochSecond.subtract(timeZoneOffsetSeconds);
        var packableStructFields = [
          packer.packable(utcSecond),
          packer.packable(nano),
          packer.packable(timeZoneOffsetSeconds),
        ];
        packer.packStruct(
          exports.DATE_TIME_WITH_ZONE_OFFSET,
          packableStructFields,
        );
      }
      function getOffsetFromZoneId(timeZoneId, epochSecond, nanosecond) {
        var dateTimeWithZoneAppliedTwice = getTimeInZoneId(
          timeZoneId,
          epochSecond,
          nanosecond,
        );
        var epochWithZoneAppliedTwice = localDateTimeToEpochSecond(
          dateTimeWithZoneAppliedTwice.year,
          dateTimeWithZoneAppliedTwice.month,
          dateTimeWithZoneAppliedTwice.day,
          dateTimeWithZoneAppliedTwice.hour,
          dateTimeWithZoneAppliedTwice.minute,
          dateTimeWithZoneAppliedTwice.second,
          nanosecond,
        );
        var offsetOfZoneInTheFutureUtc =
          epochWithZoneAppliedTwice.subtract(epochSecond);
        var guessedUtc = epochSecond.subtract(offsetOfZoneInTheFutureUtc);
        var zonedDateTimeFromGuessedUtc = getTimeInZoneId(
          timeZoneId,
          guessedUtc,
          nanosecond,
        );
        var zonedEpochFromGuessedUtc = localDateTimeToEpochSecond(
          zonedDateTimeFromGuessedUtc.year,
          zonedDateTimeFromGuessedUtc.month,
          zonedDateTimeFromGuessedUtc.day,
          zonedDateTimeFromGuessedUtc.hour,
          zonedDateTimeFromGuessedUtc.minute,
          zonedDateTimeFromGuessedUtc.second,
          nanosecond,
        );
        var offset = zonedEpochFromGuessedUtc.subtract(guessedUtc);
        return offset;
      }
      function getTimeInZoneId(timeZoneId, epochSecond, nano) {
        var formatter = new Intl.DateTimeFormat('en-US', {
          timeZone: timeZoneId,
          year: 'numeric',
          month: 'numeric',
          day: 'numeric',
          hour: 'numeric',
          minute: 'numeric',
          second: 'numeric',
          hour12: false,
        });
        var l = (0, temporal_factory_1.epochSecondAndNanoToLocalDateTime)(
          epochSecond,
          nano,
        );
        var utc = Date.UTC(
          (0, neo4j_driver_core_1.int)(l.year).toNumber(),
          (0, neo4j_driver_core_1.int)(l.month).toNumber() - 1,
          (0, neo4j_driver_core_1.int)(l.day).toNumber(),
          (0, neo4j_driver_core_1.int)(l.hour).toNumber(),
          (0, neo4j_driver_core_1.int)(l.minute).toNumber(),
          (0, neo4j_driver_core_1.int)(l.second).toNumber(),
        );
        var formattedUtcParts = formatter.formatToParts(utc);
        var localDateTime = formattedUtcParts.reduce(function (
          obj,
          currentValue,
        ) {
          if (currentValue.type !== 'literal') {
            obj[currentValue.type] = (0, neo4j_driver_core_1.int)(
              currentValue.value,
            );
          }
          return obj;
        },
        {});
        var epochInTimeZone = localDateTimeToEpochSecond(
          localDateTime.year,
          localDateTime.month,
          localDateTime.day,
          localDateTime.hour,
          localDateTime.minute,
          localDateTime.second,
          localDateTime.nanosecond,
        );
        localDateTime.timeZoneOffsetSeconds =
          epochInTimeZone.subtract(epochSecond);
        localDateTime.hour = localDateTime.hour.modulo(24);
        return localDateTime;
      }
      function convertIntegerPropsIfNeeded(
        obj,
        disableLosslessIntegers,
        useBigInt,
      ) {
        if (!disableLosslessIntegers && !useBigInt) {
          return obj;
        }
        var convert = function (value2) {
          return useBigInt ? value2.toBigInt() : value2.toNumberOrInfinity();
        };
        var clone = Object.create(Object.getPrototypeOf(obj));
        for (var prop in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, prop) === true) {
            var value = obj[prop];
            clone[prop] = (0, neo4j_driver_core_1.isInt)(value)
              ? convert(value)
              : value;
          }
        }
        Object.freeze(clone);
        return clone;
      }
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/packstream/packstream-v2.js
  var require_packstream_v2 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/packstream/packstream-v2.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var __createBinding2 =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, 'default', {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o['default'] = v;
            });
      var __importStar2 =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== 'default' &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.Unpacker = exports.Packer = void 0;
      var v1 = __importStar2(require_packstream_v1());
      var utc = __importStar2(require_packstream_utc());
      var neo4j_driver_core_1 = require_lib();
      var temporal_factory_1 = require_temporal_factory();
      var _a = neo4j_driver_core_1.internal.temporalUtil;
      var dateToEpochDay = _a.dateToEpochDay;
      var localDateTimeToEpochSecond = _a.localDateTimeToEpochSecond;
      var localTimeToNanoOfDay = _a.localTimeToNanoOfDay;
      var POINT_2D = 88;
      var POINT_2D_STRUCT_SIZE = 3;
      var POINT_3D = 89;
      var POINT_3D_STRUCT_SIZE = 4;
      var DURATION = 69;
      var DURATION_STRUCT_SIZE = 4;
      var LOCAL_TIME = 116;
      var LOCAL_TIME_STRUCT_SIZE = 1;
      var TIME = 84;
      var TIME_STRUCT_SIZE = 2;
      var DATE = 68;
      var DATE_STRUCT_SIZE = 1;
      var LOCAL_DATE_TIME = 100;
      var LOCAL_DATE_TIME_STRUCT_SIZE = 2;
      var DATE_TIME_WITH_ZONE_OFFSET = 70;
      var DATE_TIME_WITH_ZONE_OFFSET_STRUCT_SIZE = 3;
      var DATE_TIME_WITH_ZONE_ID = 102;
      var DATE_TIME_WITH_ZONE_ID_STRUCT_SIZE = 3;
      var Packer = (function (_super) {
        __extends2(Packer2, _super);
        function Packer2() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        Packer2.prototype.disableByteArrays = function () {
          throw new Error('Bolt V2 should always support byte arrays');
        };
        Packer2.prototype.packable = function (obj) {
          var _this = this;
          if ((0, neo4j_driver_core_1.isPoint)(obj)) {
            return function () {
              return packPoint(obj, _this);
            };
          } else if ((0, neo4j_driver_core_1.isDuration)(obj)) {
            return function () {
              return packDuration(obj, _this);
            };
          } else if ((0, neo4j_driver_core_1.isLocalTime)(obj)) {
            return function () {
              return packLocalTime(obj, _this);
            };
          } else if ((0, neo4j_driver_core_1.isTime)(obj)) {
            return function () {
              return packTime(obj, _this);
            };
          } else if ((0, neo4j_driver_core_1.isDate)(obj)) {
            return function () {
              return packDate(obj, _this);
            };
          } else if ((0, neo4j_driver_core_1.isLocalDateTime)(obj)) {
            return function () {
              return packLocalDateTime(obj, _this);
            };
          } else if ((0, neo4j_driver_core_1.isDateTime)(obj) && this.useUtc) {
            return function () {
              return utc.packDateTime(obj, _this);
            };
          } else if ((0, neo4j_driver_core_1.isDateTime)(obj) && !this.useUtc) {
            return function () {
              return packDateTime(obj, _this);
            };
          } else {
            return _super.prototype.packable.call(this, obj);
          }
        };
        return Packer2;
      })(v1.Packer);
      exports.Packer = Packer;
      var Unpacker = (function (_super) {
        __extends2(Unpacker2, _super);
        function Unpacker2(disableLosslessIntegers, useBigInt) {
          if (disableLosslessIntegers === void 0) {
            disableLosslessIntegers = false;
          }
          if (useBigInt === void 0) {
            useBigInt = false;
          }
          return _super.call(this, disableLosslessIntegers, useBigInt) || this;
        }
        Unpacker2.prototype._unpackUnknownStruct = function (
          signature,
          structSize,
          buffer,
        ) {
          if (signature === POINT_2D) {
            return unpackPoint2D(this, structSize, buffer);
          } else if (signature === POINT_3D) {
            return unpackPoint3D(this, structSize, buffer);
          } else if (signature === DURATION) {
            return unpackDuration(this, structSize, buffer);
          } else if (signature === LOCAL_TIME) {
            return unpackLocalTime(
              this,
              structSize,
              buffer,
              this._disableLosslessIntegers,
              this._useBigInt,
            );
          } else if (signature === TIME) {
            return unpackTime(
              this,
              structSize,
              buffer,
              this._disableLosslessIntegers,
              this._useBigInt,
            );
          } else if (signature === DATE) {
            return unpackDate(
              this,
              structSize,
              buffer,
              this._disableLosslessIntegers,
              this._useBigInt,
            );
          } else if (signature === LOCAL_DATE_TIME) {
            return unpackLocalDateTime(
              this,
              structSize,
              buffer,
              this._disableLosslessIntegers,
              this._useBigInt,
            );
          } else if (
            signature === utc.DATE_TIME_WITH_ZONE_OFFSET &&
            this.useUtc
          ) {
            return utc.unpackDateTimeWithZoneOffset(
              this,
              structSize,
              buffer,
              this._disableLosslessIntegers,
              this._useBigInt,
            );
          } else if (signature === DATE_TIME_WITH_ZONE_OFFSET && !this.useUtc) {
            return unpackDateTimeWithZoneOffset(
              this,
              structSize,
              buffer,
              this._disableLosslessIntegers,
              this._useBigInt,
            );
          } else if (signature === utc.DATE_TIME_WITH_ZONE_ID && this.useUtc) {
            return utc.unpackDateTimeWithZoneId(
              this,
              structSize,
              buffer,
              this._disableLosslessIntegers,
              this._useBigInt,
            );
          } else if (signature === DATE_TIME_WITH_ZONE_ID && !this.useUtc) {
            return unpackDateTimeWithZoneId(
              this,
              structSize,
              buffer,
              this._disableLosslessIntegers,
              this._useBigInt,
            );
          } else {
            return _super.prototype._unpackUnknownStruct.call(
              this,
              signature,
              structSize,
              buffer,
              this._disableLosslessIntegers,
              this._useBigInt,
            );
          }
        };
        return Unpacker2;
      })(v1.Unpacker);
      exports.Unpacker = Unpacker;
      function packPoint(point, packer) {
        var is2DPoint = point.z === null || point.z === void 0;
        if (is2DPoint) {
          packPoint2D(point, packer);
        } else {
          packPoint3D(point, packer);
        }
      }
      function packPoint2D(point, packer) {
        var packableStructFields = [
          packer.packable((0, neo4j_driver_core_1.int)(point.srid)),
          packer.packable(point.x),
          packer.packable(point.y),
        ];
        packer.packStruct(POINT_2D, packableStructFields);
      }
      function packPoint3D(point, packer) {
        var packableStructFields = [
          packer.packable((0, neo4j_driver_core_1.int)(point.srid)),
          packer.packable(point.x),
          packer.packable(point.y),
          packer.packable(point.z),
        ];
        packer.packStruct(POINT_3D, packableStructFields);
      }
      function unpackPoint2D(unpacker, structSize, buffer) {
        unpacker._verifyStructSize('Point2D', POINT_2D_STRUCT_SIZE, structSize);
        return new neo4j_driver_core_1.Point(
          unpacker.unpack(buffer),
          unpacker.unpack(buffer),
          unpacker.unpack(buffer),
          void 0,
        );
      }
      function unpackPoint3D(unpacker, structSize, buffer) {
        unpacker._verifyStructSize('Point3D', POINT_3D_STRUCT_SIZE, structSize);
        return new neo4j_driver_core_1.Point(
          unpacker.unpack(buffer),
          unpacker.unpack(buffer),
          unpacker.unpack(buffer),
          unpacker.unpack(buffer),
        );
      }
      function packDuration(value, packer) {
        var months = (0, neo4j_driver_core_1.int)(value.months);
        var days = (0, neo4j_driver_core_1.int)(value.days);
        var seconds = (0, neo4j_driver_core_1.int)(value.seconds);
        var nanoseconds = (0, neo4j_driver_core_1.int)(value.nanoseconds);
        var packableStructFields = [
          packer.packable(months),
          packer.packable(days),
          packer.packable(seconds),
          packer.packable(nanoseconds),
        ];
        packer.packStruct(DURATION, packableStructFields);
      }
      function unpackDuration(unpacker, structSize, buffer) {
        unpacker._verifyStructSize(
          'Duration',
          DURATION_STRUCT_SIZE,
          structSize,
        );
        var months = unpacker.unpack(buffer);
        var days = unpacker.unpack(buffer);
        var seconds = unpacker.unpack(buffer);
        var nanoseconds = unpacker.unpack(buffer);
        return new neo4j_driver_core_1.Duration(
          months,
          days,
          seconds,
          nanoseconds,
        );
      }
      function packLocalTime(value, packer) {
        var nanoOfDay = localTimeToNanoOfDay(
          value.hour,
          value.minute,
          value.second,
          value.nanosecond,
        );
        var packableStructFields = [packer.packable(nanoOfDay)];
        packer.packStruct(LOCAL_TIME, packableStructFields);
      }
      function unpackLocalTime(
        unpacker,
        structSize,
        buffer,
        disableLosslessIntegers,
      ) {
        unpacker._verifyStructSize(
          'LocalTime',
          LOCAL_TIME_STRUCT_SIZE,
          structSize,
        );
        var nanoOfDay = unpacker.unpackInteger(buffer);
        var result = (0, temporal_factory_1.nanoOfDayToLocalTime)(nanoOfDay);
        return convertIntegerPropsIfNeeded(result, disableLosslessIntegers);
      }
      function packTime(value, packer) {
        var nanoOfDay = localTimeToNanoOfDay(
          value.hour,
          value.minute,
          value.second,
          value.nanosecond,
        );
        var offsetSeconds = (0, neo4j_driver_core_1.int)(
          value.timeZoneOffsetSeconds,
        );
        var packableStructFields = [
          packer.packable(nanoOfDay),
          packer.packable(offsetSeconds),
        ];
        packer.packStruct(TIME, packableStructFields);
      }
      function unpackTime(
        unpacker,
        structSize,
        buffer,
        disableLosslessIntegers,
        useBigInt,
      ) {
        unpacker._verifyStructSize('Time', TIME_STRUCT_SIZE, structSize);
        var nanoOfDay = unpacker.unpackInteger(buffer);
        var offsetSeconds = unpacker.unpackInteger(buffer);
        var localTime = (0, temporal_factory_1.nanoOfDayToLocalTime)(nanoOfDay);
        var result = new neo4j_driver_core_1.Time(
          localTime.hour,
          localTime.minute,
          localTime.second,
          localTime.nanosecond,
          offsetSeconds,
        );
        return convertIntegerPropsIfNeeded(
          result,
          disableLosslessIntegers,
          useBigInt,
        );
      }
      function packDate(value, packer) {
        var epochDay = dateToEpochDay(value.year, value.month, value.day);
        var packableStructFields = [packer.packable(epochDay)];
        packer.packStruct(DATE, packableStructFields);
      }
      function unpackDate(
        unpacker,
        structSize,
        buffer,
        disableLosslessIntegers,
        useBigInt,
      ) {
        unpacker._verifyStructSize('Date', DATE_STRUCT_SIZE, structSize);
        var epochDay = unpacker.unpackInteger(buffer);
        var result = (0, temporal_factory_1.epochDayToDate)(epochDay);
        return convertIntegerPropsIfNeeded(
          result,
          disableLosslessIntegers,
          useBigInt,
        );
      }
      function packLocalDateTime(value, packer) {
        var epochSecond = localDateTimeToEpochSecond(
          value.year,
          value.month,
          value.day,
          value.hour,
          value.minute,
          value.second,
          value.nanosecond,
        );
        var nano = (0, neo4j_driver_core_1.int)(value.nanosecond);
        var packableStructFields = [
          packer.packable(epochSecond),
          packer.packable(nano),
        ];
        packer.packStruct(LOCAL_DATE_TIME, packableStructFields);
      }
      function unpackLocalDateTime(
        unpacker,
        structSize,
        buffer,
        disableLosslessIntegers,
        useBigInt,
      ) {
        unpacker._verifyStructSize(
          'LocalDateTime',
          LOCAL_DATE_TIME_STRUCT_SIZE,
          structSize,
        );
        var epochSecond = unpacker.unpackInteger(buffer);
        var nano = unpacker.unpackInteger(buffer);
        var result = (0, temporal_factory_1.epochSecondAndNanoToLocalDateTime)(
          epochSecond,
          nano,
        );
        return convertIntegerPropsIfNeeded(
          result,
          disableLosslessIntegers,
          useBigInt,
        );
      }
      function packDateTime(value, packer) {
        if (value.timeZoneId) {
          packDateTimeWithZoneId(value, packer);
        } else {
          packDateTimeWithZoneOffset(value, packer);
        }
      }
      function packDateTimeWithZoneOffset(value, packer) {
        var epochSecond = localDateTimeToEpochSecond(
          value.year,
          value.month,
          value.day,
          value.hour,
          value.minute,
          value.second,
          value.nanosecond,
        );
        var nano = (0, neo4j_driver_core_1.int)(value.nanosecond);
        var timeZoneOffsetSeconds = (0, neo4j_driver_core_1.int)(
          value.timeZoneOffsetSeconds,
        );
        var packableStructFields = [
          packer.packable(epochSecond),
          packer.packable(nano),
          packer.packable(timeZoneOffsetSeconds),
        ];
        packer.packStruct(DATE_TIME_WITH_ZONE_OFFSET, packableStructFields);
      }
      function unpackDateTimeWithZoneOffset(
        unpacker,
        structSize,
        buffer,
        disableLosslessIntegers,
        useBigInt,
      ) {
        unpacker._verifyStructSize(
          'DateTimeWithZoneOffset',
          DATE_TIME_WITH_ZONE_OFFSET_STRUCT_SIZE,
          structSize,
        );
        var epochSecond = unpacker.unpackInteger(buffer);
        var nano = unpacker.unpackInteger(buffer);
        var timeZoneOffsetSeconds = unpacker.unpackInteger(buffer);
        var localDateTime = (0,
        temporal_factory_1.epochSecondAndNanoToLocalDateTime)(
          epochSecond,
          nano,
        );
        var result = new neo4j_driver_core_1.DateTime(
          localDateTime.year,
          localDateTime.month,
          localDateTime.day,
          localDateTime.hour,
          localDateTime.minute,
          localDateTime.second,
          localDateTime.nanosecond,
          timeZoneOffsetSeconds,
          null,
        );
        return convertIntegerPropsIfNeeded(
          result,
          disableLosslessIntegers,
          useBigInt,
        );
      }
      function packDateTimeWithZoneId(value, packer) {
        var epochSecond = localDateTimeToEpochSecond(
          value.year,
          value.month,
          value.day,
          value.hour,
          value.minute,
          value.second,
          value.nanosecond,
        );
        var nano = (0, neo4j_driver_core_1.int)(value.nanosecond);
        var timeZoneId = value.timeZoneId;
        var packableStructFields = [
          packer.packable(epochSecond),
          packer.packable(nano),
          packer.packable(timeZoneId),
        ];
        packer.packStruct(DATE_TIME_WITH_ZONE_ID, packableStructFields);
      }
      function unpackDateTimeWithZoneId(
        unpacker,
        structSize,
        buffer,
        disableLosslessIntegers,
        useBigInt,
      ) {
        unpacker._verifyStructSize(
          'DateTimeWithZoneId',
          DATE_TIME_WITH_ZONE_ID_STRUCT_SIZE,
          structSize,
        );
        var epochSecond = unpacker.unpackInteger(buffer);
        var nano = unpacker.unpackInteger(buffer);
        var timeZoneId = unpacker.unpack(buffer);
        var localDateTime = (0,
        temporal_factory_1.epochSecondAndNanoToLocalDateTime)(
          epochSecond,
          nano,
        );
        var result = new neo4j_driver_core_1.DateTime(
          localDateTime.year,
          localDateTime.month,
          localDateTime.day,
          localDateTime.hour,
          localDateTime.minute,
          localDateTime.second,
          localDateTime.nanosecond,
          null,
          timeZoneId,
        );
        return convertIntegerPropsIfNeeded(
          result,
          disableLosslessIntegers,
          useBigInt,
        );
      }
      function convertIntegerPropsIfNeeded(
        obj,
        disableLosslessIntegers,
        useBigInt,
      ) {
        if (!disableLosslessIntegers && !useBigInt) {
          return obj;
        }
        var convert = function (value2) {
          return useBigInt ? value2.toBigInt() : value2.toNumberOrInfinity();
        };
        var clone = Object.create(Object.getPrototypeOf(obj));
        for (var prop in obj) {
          if (obj.hasOwnProperty(prop)) {
            var value = obj[prop];
            clone[prop] = (0, neo4j_driver_core_1.isInt)(value)
              ? convert(value)
              : value;
          }
        }
        Object.freeze(clone);
        return clone;
      }
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/packstream/index.js
  var require_packstream = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/packstream/index.js'(
      exports,
    ) {
      'use strict';
      var __createBinding2 =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, 'default', {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o['default'] = v;
            });
      var __importStar2 =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== 'default' &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.v2 = exports.v1 = void 0;
      var v1 = __importStar2(require_packstream_v1());
      exports.v1 = v1;
      var v2 = __importStar2(require_packstream_v2());
      exports.v2 = v2;
      exports.default = v2;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/bolt/request-message.js
  var require_request_message = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/bolt/request-message.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var neo4j_driver_core_1 = require_lib();
      var _a = neo4j_driver_core_1.internal.constants;
      var ACCESS_MODE_READ = _a.ACCESS_MODE_READ;
      var FETCH_ALL = _a.FETCH_ALL;
      var assertString = neo4j_driver_core_1.internal.util.assertString;
      var INIT = 1;
      var RESET = 15;
      var RUN = 16;
      var PULL_ALL = 63;
      var HELLO = 1;
      var GOODBYE = 2;
      var BEGIN = 17;
      var COMMIT = 18;
      var ROLLBACK = 19;
      var ROUTE = 102;
      var DISCARD = 47;
      var PULL = 63;
      var READ_MODE = 'r';
      var NO_STATEMENT_ID = -1;
      var RequestMessage = (function () {
        function RequestMessage2(signature, fields, toString) {
          this.signature = signature;
          this.fields = fields;
          this.toString = toString;
        }
        RequestMessage2.init = function (clientName, authToken) {
          return new RequestMessage2(
            INIT,
            [clientName, authToken],
            function () {
              return 'INIT ' + clientName + ' {...}';
            },
          );
        };
        RequestMessage2.run = function (query, parameters) {
          return new RequestMessage2(RUN, [query, parameters], function () {
            return (
              'RUN ' +
              query +
              ' ' +
              neo4j_driver_core_1.json.stringify(parameters)
            );
          });
        };
        RequestMessage2.pullAll = function () {
          return PULL_ALL_MESSAGE;
        };
        RequestMessage2.reset = function () {
          return RESET_MESSAGE;
        };
        RequestMessage2.hello = function (
          userAgent,
          authToken,
          routing,
          patchs,
        ) {
          if (routing === void 0) {
            routing = null;
          }
          if (patchs === void 0) {
            patchs = null;
          }
          var metadata = Object.assign({ user_agent: userAgent }, authToken);
          if (routing) {
            metadata.routing = routing;
          }
          if (patchs) {
            metadata.patch_bolt = patchs;
          }
          return new RequestMessage2(HELLO, [metadata], function () {
            return "HELLO {user_agent: '" + userAgent + "', ...}";
          });
        };
        RequestMessage2.begin = function (_a2) {
          var _b = _a2 === void 0 ? {} : _a2,
            bookmark = _b.bookmark,
            txConfig = _b.txConfig,
            database = _b.database,
            mode = _b.mode,
            impersonatedUser = _b.impersonatedUser;
          var metadata = buildTxMetadata(
            bookmark,
            txConfig,
            database,
            mode,
            impersonatedUser,
          );
          return new RequestMessage2(BEGIN, [metadata], function () {
            return 'BEGIN ' + neo4j_driver_core_1.json.stringify(metadata);
          });
        };
        RequestMessage2.commit = function () {
          return COMMIT_MESSAGE;
        };
        RequestMessage2.rollback = function () {
          return ROLLBACK_MESSAGE;
        };
        RequestMessage2.runWithMetadata = function (query, parameters, _a2) {
          var _b = _a2 === void 0 ? {} : _a2,
            bookmark = _b.bookmark,
            txConfig = _b.txConfig,
            database = _b.database,
            mode = _b.mode,
            impersonatedUser = _b.impersonatedUser;
          var metadata = buildTxMetadata(
            bookmark,
            txConfig,
            database,
            mode,
            impersonatedUser,
          );
          return new RequestMessage2(
            RUN,
            [query, parameters, metadata],
            function () {
              return (
                'RUN ' +
                query +
                ' ' +
                neo4j_driver_core_1.json.stringify(parameters) +
                ' ' +
                neo4j_driver_core_1.json.stringify(metadata)
              );
            },
          );
        };
        RequestMessage2.goodbye = function () {
          return GOODBYE_MESSAGE;
        };
        RequestMessage2.pull = function (_a2) {
          var _b = _a2 === void 0 ? {} : _a2,
            _c = _b.stmtId,
            stmtId = _c === void 0 ? NO_STATEMENT_ID : _c,
            _d = _b.n,
            n = _d === void 0 ? FETCH_ALL : _d;
          var metadata = buildStreamMetadata(
            stmtId === null || stmtId === void 0 ? NO_STATEMENT_ID : stmtId,
            n || FETCH_ALL,
          );
          return new RequestMessage2(PULL, [metadata], function () {
            return 'PULL ' + neo4j_driver_core_1.json.stringify(metadata);
          });
        };
        RequestMessage2.discard = function (_a2) {
          var _b = _a2 === void 0 ? {} : _a2,
            _c = _b.stmtId,
            stmtId = _c === void 0 ? NO_STATEMENT_ID : _c,
            _d = _b.n,
            n = _d === void 0 ? FETCH_ALL : _d;
          var metadata = buildStreamMetadata(
            stmtId === null || stmtId === void 0 ? NO_STATEMENT_ID : stmtId,
            n || FETCH_ALL,
          );
          return new RequestMessage2(DISCARD, [metadata], function () {
            return 'DISCARD ' + neo4j_driver_core_1.json.stringify(metadata);
          });
        };
        RequestMessage2.route = function (
          routingContext,
          bookmarks,
          databaseName,
        ) {
          if (routingContext === void 0) {
            routingContext = {};
          }
          if (bookmarks === void 0) {
            bookmarks = [];
          }
          if (databaseName === void 0) {
            databaseName = null;
          }
          return new RequestMessage2(
            ROUTE,
            [routingContext, bookmarks, databaseName],
            function () {
              return (
                'ROUTE ' +
                neo4j_driver_core_1.json.stringify(routingContext) +
                ' ' +
                neo4j_driver_core_1.json.stringify(bookmarks) +
                ' ' +
                databaseName
              );
            },
          );
        };
        RequestMessage2.routeV4x4 = function (
          routingContext,
          bookmarks,
          databaseContext,
        ) {
          if (routingContext === void 0) {
            routingContext = {};
          }
          if (bookmarks === void 0) {
            bookmarks = [];
          }
          if (databaseContext === void 0) {
            databaseContext = {};
          }
          var dbContext = {};
          if (databaseContext.databaseName) {
            dbContext.db = databaseContext.databaseName;
          }
          if (databaseContext.impersonatedUser) {
            dbContext.imp_user = databaseContext.impersonatedUser;
          }
          return new RequestMessage2(
            ROUTE,
            [routingContext, bookmarks, dbContext],
            function () {
              return (
                'ROUTE ' +
                neo4j_driver_core_1.json.stringify(routingContext) +
                ' ' +
                neo4j_driver_core_1.json.stringify(bookmarks) +
                ' ' +
                neo4j_driver_core_1.json.stringify(dbContext)
              );
            },
          );
        };
        return RequestMessage2;
      })();
      exports.default = RequestMessage;
      function buildTxMetadata(
        bookmark,
        txConfig,
        database,
        mode,
        impersonatedUser,
      ) {
        var metadata = {};
        if (!bookmark.isEmpty()) {
          metadata.bookmarks = bookmark.values();
        }
        if (txConfig.timeout) {
          metadata.tx_timeout = txConfig.timeout;
        }
        if (txConfig.metadata) {
          metadata.tx_metadata = txConfig.metadata;
        }
        if (database) {
          metadata.db = assertString(database, 'database');
        }
        if (impersonatedUser) {
          metadata.imp_user = assertString(
            impersonatedUser,
            'impersonatedUser',
          );
        }
        if (mode === ACCESS_MODE_READ) {
          metadata.mode = READ_MODE;
        }
        return metadata;
      }
      function buildStreamMetadata(stmtId, n) {
        var metadata = { n: (0, neo4j_driver_core_1.int)(n) };
        if (stmtId !== NO_STATEMENT_ID) {
          metadata.qid = (0, neo4j_driver_core_1.int)(stmtId);
        }
        return metadata;
      }
      var PULL_ALL_MESSAGE = new RequestMessage(PULL_ALL, [], function () {
        return 'PULL_ALL';
      });
      var RESET_MESSAGE = new RequestMessage(RESET, [], function () {
        return 'RESET';
      });
      var COMMIT_MESSAGE = new RequestMessage(COMMIT, [], function () {
        return 'COMMIT';
      });
      var ROLLBACK_MESSAGE = new RequestMessage(ROLLBACK, [], function () {
        return 'ROLLBACK';
      });
      var GOODBYE_MESSAGE = new RequestMessage(GOODBYE, [], function () {
        return 'GOODBYE';
      });
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/bolt/routing-table-raw.js
  var require_routing_table_raw = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/bolt/routing-table-raw.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var RawRoutingTable = (function () {
        function RawRoutingTable2() {}
        RawRoutingTable2.ofRecord = function (record) {
          if (record === null) {
            return RawRoutingTable2.ofNull();
          }
          return new RecordRawRoutingTable(record);
        };
        RawRoutingTable2.ofMessageResponse = function (response) {
          if (response === null) {
            return RawRoutingTable2.ofNull();
          }
          return new ResponseRawRoutingTable(response);
        };
        RawRoutingTable2.ofNull = function () {
          return new NullRawRoutingTable();
        };
        Object.defineProperty(RawRoutingTable2.prototype, 'ttl', {
          get: function () {
            throw new Error('Not implemented');
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(RawRoutingTable2.prototype, 'db', {
          get: function () {
            throw new Error('Not implemented');
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(RawRoutingTable2.prototype, 'servers', {
          get: function () {
            throw new Error('Not implemented');
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(RawRoutingTable2.prototype, 'isNull', {
          get: function () {
            throw new Error('Not implemented');
          },
          enumerable: false,
          configurable: true,
        });
        return RawRoutingTable2;
      })();
      exports.default = RawRoutingTable;
      var ResponseRawRoutingTable = (function (_super) {
        __extends2(ResponseRawRoutingTable2, _super);
        function ResponseRawRoutingTable2(response) {
          var _this = _super.call(this) || this;
          _this._response = response;
          return _this;
        }
        Object.defineProperty(ResponseRawRoutingTable2.prototype, 'ttl', {
          get: function () {
            return this._response.rt.ttl;
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(ResponseRawRoutingTable2.prototype, 'servers', {
          get: function () {
            return this._response.rt.servers;
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(ResponseRawRoutingTable2.prototype, 'db', {
          get: function () {
            return this._response.rt.db;
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(ResponseRawRoutingTable2.prototype, 'isNull', {
          get: function () {
            return this._response === null;
          },
          enumerable: false,
          configurable: true,
        });
        return ResponseRawRoutingTable2;
      })(RawRoutingTable);
      var NullRawRoutingTable = (function (_super) {
        __extends2(NullRawRoutingTable2, _super);
        function NullRawRoutingTable2() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        Object.defineProperty(NullRawRoutingTable2.prototype, 'isNull', {
          get: function () {
            return true;
          },
          enumerable: false,
          configurable: true,
        });
        return NullRawRoutingTable2;
      })(RawRoutingTable);
      var RecordRawRoutingTable = (function (_super) {
        __extends2(RecordRawRoutingTable2, _super);
        function RecordRawRoutingTable2(record) {
          var _this = _super.call(this) || this;
          _this._record = record;
          return _this;
        }
        Object.defineProperty(RecordRawRoutingTable2.prototype, 'ttl', {
          get: function () {
            return this._record.get('ttl');
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(RecordRawRoutingTable2.prototype, 'servers', {
          get: function () {
            return this._record.get('servers');
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(RecordRawRoutingTable2.prototype, 'db', {
          get: function () {
            return this._record.has('db') ? this._record.get('db') : null;
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(RecordRawRoutingTable2.prototype, 'isNull', {
          get: function () {
            return this._record === null;
          },
          enumerable: false,
          configurable: true,
        });
        return RecordRawRoutingTable2;
      })(RawRoutingTable);
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/bolt/stream-observers.js
  var require_stream_observers = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/bolt/stream-observers.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.ProcedureRouteObserver =
        exports.RouteObserver =
        exports.CompletedObserver =
        exports.FailedObserver =
        exports.ResetObserver =
        exports.LoginObserver =
        exports.ResultStreamObserver =
        exports.StreamObserver =
          void 0;
      var neo4j_driver_core_1 = require_lib();
      var routing_table_raw_1 = __importDefault2(require_routing_table_raw());
      var FETCH_ALL = neo4j_driver_core_1.internal.constants.FETCH_ALL;
      var PROTOCOL_ERROR = neo4j_driver_core_1.error.PROTOCOL_ERROR;
      var StreamObserver = (function () {
        function StreamObserver2() {}
        StreamObserver2.prototype.onNext = function (rawRecord) {};
        StreamObserver2.prototype.onError = function (error) {};
        StreamObserver2.prototype.onCompleted = function (meta) {};
        return StreamObserver2;
      })();
      exports.StreamObserver = StreamObserver;
      var ResultStreamObserver = (function (_super) {
        __extends2(ResultStreamObserver2, _super);
        function ResultStreamObserver2(_a) {
          var _b = _a === void 0 ? {} : _a,
            _c = _b.reactive,
            reactive = _c === void 0 ? false : _c,
            moreFunction = _b.moreFunction,
            discardFunction = _b.discardFunction,
            _d = _b.fetchSize,
            fetchSize = _d === void 0 ? FETCH_ALL : _d,
            beforeError = _b.beforeError,
            afterError = _b.afterError,
            beforeKeys = _b.beforeKeys,
            afterKeys = _b.afterKeys,
            beforeComplete = _b.beforeComplete,
            afterComplete = _b.afterComplete,
            server = _b.server;
          var _this = _super.call(this) || this;
          _this._fieldKeys = null;
          _this._fieldLookup = null;
          _this._head = null;
          _this._queuedRecords = [];
          _this._tail = null;
          _this._error = null;
          _this._observers = [];
          _this._meta = {};
          _this._server = server;
          _this._beforeError = beforeError;
          _this._afterError = afterError;
          _this._beforeKeys = beforeKeys;
          _this._afterKeys = afterKeys;
          _this._beforeComplete = beforeComplete;
          _this._afterComplete = afterComplete;
          _this._queryId = null;
          _this._moreFunction = moreFunction;
          _this._discardFunction = discardFunction;
          _this._discard = false;
          _this._fetchSize = fetchSize;
          _this._setState(reactive ? _states.READY : _states.READY_STREAMING);
          _this._setupAuoPull(fetchSize);
          return _this;
        }
        ResultStreamObserver2.prototype.onNext = function (rawRecord) {
          var record = new neo4j_driver_core_1.Record(
            this._fieldKeys,
            rawRecord,
            this._fieldLookup,
          );
          if (
            this._observers.some(function (o) {
              return o.onNext;
            })
          ) {
            this._observers.forEach(function (o) {
              if (o.onNext) {
                o.onNext(record);
              }
            });
          } else {
            this._queuedRecords.push(record);
            if (this._queuedRecords.length > this._highRecordWatermark) {
              this._autoPull = false;
            }
          }
        };
        ResultStreamObserver2.prototype.onCompleted = function (meta) {
          this._state.onSuccess(this, meta);
        };
        ResultStreamObserver2.prototype.onError = function (error) {
          this._state.onError(this, error);
        };
        ResultStreamObserver2.prototype.cancel = function () {
          this._discard = true;
        };
        ResultStreamObserver2.prototype.prepareToHandleSingleResponse =
          function () {
            this._head = [];
            this._fieldKeys = [];
            this._setState(_states.STREAMING);
          };
        ResultStreamObserver2.prototype.markCompleted = function () {
          this._head = [];
          this._fieldKeys = [];
          this._tail = {};
          this._setState(_states.SUCCEEDED);
        };
        ResultStreamObserver2.prototype.subscribe = function (observer) {
          if (this._error) {
            observer.onError(this._error);
            return;
          }
          if (this._head && observer.onKeys) {
            observer.onKeys(this._head);
          }
          if (this._queuedRecords.length > 0 && observer.onNext) {
            for (var i = 0; i < this._queuedRecords.length; i++) {
              observer.onNext(this._queuedRecords[i]);
              if (
                this._queuedRecords.length - i - 1 <=
                this._lowRecordWatermark
              ) {
                this._autoPull = true;
                if (this._state === _states.READY) {
                  this._handleStreaming();
                }
              }
            }
          }
          if (this._tail && observer.onCompleted) {
            observer.onCompleted(this._tail);
          }
          this._observers.push(observer);
          if (this._state === _states.READY) {
            this._handleStreaming();
          }
        };
        ResultStreamObserver2.prototype._handleHasMore = function (meta) {
          this._setState(_states.READY);
          this._handleStreaming();
          delete meta.has_more;
        };
        ResultStreamObserver2.prototype._handlePullSuccess = function (meta) {
          var _this = this;
          this._setState(_states.SUCCEEDED);
          var completionMetadata = Object.assign(
            this._server ? { server: this._server } : {},
            this._meta,
            meta,
          );
          var beforeHandlerResult = null;
          if (this._beforeComplete) {
            beforeHandlerResult = this._beforeComplete(completionMetadata);
          }
          var continuation = function () {
            _this._tail = completionMetadata;
            if (
              _this._observers.some(function (o) {
                return o.onCompleted;
              })
            ) {
              _this._observers.forEach(function (o) {
                if (o.onCompleted) {
                  o.onCompleted(completionMetadata);
                }
              });
            }
            if (_this._afterComplete) {
              _this._afterComplete(completionMetadata);
            }
          };
          if (beforeHandlerResult) {
            Promise.resolve(beforeHandlerResult).then(function () {
              return continuation();
            });
          } else {
            continuation();
          }
        };
        ResultStreamObserver2.prototype._handleRunSuccess = function (
          meta,
          afterSuccess,
        ) {
          var _this = this;
          if (this._fieldKeys === null) {
            this._fieldKeys = [];
            this._fieldLookup = {};
            if (meta.fields && meta.fields.length > 0) {
              this._fieldKeys = meta.fields;
              for (var i = 0; i < meta.fields.length; i++) {
                this._fieldLookup[meta.fields[i]] = i;
              }
              delete meta.fields;
            }
            if (meta.qid !== null && meta.qid !== void 0) {
              this._queryId = meta.qid;
              delete meta.qid;
            }
            this._storeMetadataForCompletion(meta);
            var beforeHandlerResult = null;
            if (this._beforeKeys) {
              beforeHandlerResult = this._beforeKeys(this._fieldKeys);
            }
            var continuation_1 = function () {
              _this._head = _this._fieldKeys;
              if (
                _this._observers.some(function (o) {
                  return o.onKeys;
                })
              ) {
                _this._observers.forEach(function (o) {
                  if (o.onKeys) {
                    o.onKeys(_this._fieldKeys);
                  }
                });
              }
              if (_this._afterKeys) {
                _this._afterKeys(_this._fieldKeys);
              }
              afterSuccess();
            };
            if (beforeHandlerResult) {
              Promise.resolve(beforeHandlerResult).then(function () {
                return continuation_1();
              });
            } else {
              continuation_1();
            }
          }
        };
        ResultStreamObserver2.prototype._handleError = function (error) {
          var _this = this;
          this._setState(_states.FAILED);
          this._error = error;
          var beforeHandlerResult = null;
          if (this._beforeError) {
            beforeHandlerResult = this._beforeError(error);
          }
          var continuation = function () {
            if (
              _this._observers.some(function (o) {
                return o.onError;
              })
            ) {
              _this._observers.forEach(function (o) {
                if (o.onError) {
                  o.onError(error);
                }
              });
            }
            if (_this._afterError) {
              _this._afterError(error);
            }
          };
          if (beforeHandlerResult) {
            Promise.resolve(beforeHandlerResult).then(function () {
              return continuation();
            });
          } else {
            continuation();
          }
        };
        ResultStreamObserver2.prototype._handleStreaming = function () {
          if (
            this._head &&
            this._observers.some(function (o) {
              return o.onNext || o.onCompleted;
            })
          ) {
            if (this._discard) {
              this._discardFunction(this._queryId, this);
              this._setState(_states.STREAMING);
            } else if (this._autoPull) {
              this._moreFunction(this._queryId, this._fetchSize, this);
              this._setState(_states.STREAMING);
            }
          }
        };
        ResultStreamObserver2.prototype._storeMetadataForCompletion = function (
          meta,
        ) {
          var keys = Object.keys(meta);
          var index = keys.length;
          var key = '';
          while (index--) {
            key = keys[index];
            this._meta[key] = meta[key];
          }
        };
        ResultStreamObserver2.prototype._setState = function (state) {
          this._state = state;
        };
        ResultStreamObserver2.prototype._setupAuoPull = function (fetchSize) {
          this._autoPull = true;
          if (fetchSize === FETCH_ALL) {
            this._lowRecordWatermark = Number.MAX_VALUE;
            this._highRecordWatermark = Number.MAX_VALUE;
          } else {
            this._lowRecordWatermark = 0.3 * fetchSize;
            this._highRecordWatermark = 0.7 * fetchSize;
          }
        };
        return ResultStreamObserver2;
      })(StreamObserver);
      exports.ResultStreamObserver = ResultStreamObserver;
      var LoginObserver = (function (_super) {
        __extends2(LoginObserver2, _super);
        function LoginObserver2(_a) {
          var _b = _a === void 0 ? {} : _a,
            onError = _b.onError,
            onCompleted = _b.onCompleted;
          var _this = _super.call(this) || this;
          _this._onError = onError;
          _this._onCompleted = onCompleted;
          return _this;
        }
        LoginObserver2.prototype.onNext = function (record) {
          this.onError(
            (0, neo4j_driver_core_1.newError)(
              'Received RECORD when initializing ' +
                neo4j_driver_core_1.json.stringify(record),
            ),
          );
        };
        LoginObserver2.prototype.onError = function (error) {
          if (this._onError) {
            this._onError(error);
          }
        };
        LoginObserver2.prototype.onCompleted = function (metadata) {
          if (this._onCompleted) {
            this._onCompleted(metadata);
          }
        };
        return LoginObserver2;
      })(StreamObserver);
      exports.LoginObserver = LoginObserver;
      var ResetObserver = (function (_super) {
        __extends2(ResetObserver2, _super);
        function ResetObserver2(_a) {
          var _b = _a === void 0 ? {} : _a,
            onProtocolError = _b.onProtocolError,
            onError = _b.onError,
            onComplete = _b.onComplete;
          var _this = _super.call(this) || this;
          _this._onProtocolError = onProtocolError;
          _this._onError = onError;
          _this._onComplete = onComplete;
          return _this;
        }
        ResetObserver2.prototype.onNext = function (record) {
          this.onError(
            (0, neo4j_driver_core_1.newError)(
              'Received RECORD when resetting: received record is: ' +
                neo4j_driver_core_1.json.stringify(record),
              PROTOCOL_ERROR,
            ),
          );
        };
        ResetObserver2.prototype.onError = function (error) {
          if (error.code === PROTOCOL_ERROR && this._onProtocolError) {
            this._onProtocolError(error.message);
          }
          if (this._onError) {
            this._onError(error);
          }
        };
        ResetObserver2.prototype.onCompleted = function (metadata) {
          if (this._onComplete) {
            this._onComplete(metadata);
          }
        };
        return ResetObserver2;
      })(StreamObserver);
      exports.ResetObserver = ResetObserver;
      var FailedObserver = (function (_super) {
        __extends2(FailedObserver2, _super);
        function FailedObserver2(_a) {
          var error = _a.error,
            onError = _a.onError;
          var _this = _super.call(this, { beforeError: onError }) || this;
          _this.onError(error);
          return _this;
        }
        return FailedObserver2;
      })(ResultStreamObserver);
      exports.FailedObserver = FailedObserver;
      var CompletedObserver = (function (_super) {
        __extends2(CompletedObserver2, _super);
        function CompletedObserver2() {
          var _this = _super.call(this) || this;
          _super.prototype.markCompleted.call(_this);
          return _this;
        }
        return CompletedObserver2;
      })(ResultStreamObserver);
      exports.CompletedObserver = CompletedObserver;
      var ProcedureRouteObserver = (function (_super) {
        __extends2(ProcedureRouteObserver2, _super);
        function ProcedureRouteObserver2(_a) {
          var resultObserver = _a.resultObserver,
            onProtocolError = _a.onProtocolError,
            onError = _a.onError,
            onCompleted = _a.onCompleted;
          var _this = _super.call(this) || this;
          _this._resultObserver = resultObserver;
          _this._onError = onError;
          _this._onCompleted = onCompleted;
          _this._records = [];
          _this._onProtocolError = onProtocolError;
          resultObserver.subscribe(_this);
          return _this;
        }
        ProcedureRouteObserver2.prototype.onNext = function (record) {
          this._records.push(record);
        };
        ProcedureRouteObserver2.prototype.onError = function (error) {
          if (error.code === PROTOCOL_ERROR && this._onProtocolError) {
            this._onProtocolError(error.message);
          }
          if (this._onError) {
            this._onError(error);
          }
        };
        ProcedureRouteObserver2.prototype.onCompleted = function () {
          if (this._records !== null && this._records.length !== 1) {
            this.onError(
              (0, neo4j_driver_core_1.newError)(
                'Illegal response from router. Received ' +
                  this._records.length +
                  ' records but expected only one.\n' +
                  neo4j_driver_core_1.json.stringify(this._records),
                PROTOCOL_ERROR,
              ),
            );
            return;
          }
          if (this._onCompleted) {
            this._onCompleted(
              routing_table_raw_1.default.ofRecord(this._records[0]),
            );
          }
        };
        return ProcedureRouteObserver2;
      })(StreamObserver);
      exports.ProcedureRouteObserver = ProcedureRouteObserver;
      var RouteObserver = (function (_super) {
        __extends2(RouteObserver2, _super);
        function RouteObserver2(_a) {
          var _b = _a === void 0 ? {} : _a,
            onProtocolError = _b.onProtocolError,
            onError = _b.onError,
            onCompleted = _b.onCompleted;
          var _this = _super.call(this) || this;
          _this._onProtocolError = onProtocolError;
          _this._onError = onError;
          _this._onCompleted = onCompleted;
          return _this;
        }
        RouteObserver2.prototype.onNext = function (record) {
          this.onError(
            (0, neo4j_driver_core_1.newError)(
              'Received RECORD when resetting: received record is: ' +
                neo4j_driver_core_1.json.stringify(record),
              PROTOCOL_ERROR,
            ),
          );
        };
        RouteObserver2.prototype.onError = function (error) {
          if (error.code === PROTOCOL_ERROR && this._onProtocolError) {
            this._onProtocolError(error.message);
          }
          if (this._onError) {
            this._onError(error);
          }
        };
        RouteObserver2.prototype.onCompleted = function (metadata) {
          if (this._onCompleted) {
            this._onCompleted(
              routing_table_raw_1.default.ofMessageResponse(metadata),
            );
          }
        };
        return RouteObserver2;
      })(StreamObserver);
      exports.RouteObserver = RouteObserver;
      var _states = {
        READY_STREAMING: {
          onSuccess: function (streamObserver, meta) {
            streamObserver._handleRunSuccess(meta, function () {
              streamObserver._setState(_states.STREAMING);
            });
          },
          onError: function (streamObserver, error) {
            streamObserver._handleError(error);
          },
          name: function () {
            return 'READY_STREAMING';
          },
        },
        READY: {
          onSuccess: function (streamObserver, meta) {
            streamObserver._handleRunSuccess(meta, function () {
              return streamObserver._handleStreaming();
            });
          },
          onError: function (streamObserver, error) {
            streamObserver._handleError(error);
          },
          name: function () {
            return 'READY';
          },
        },
        STREAMING: {
          onSuccess: function (streamObserver, meta) {
            if (meta.has_more) {
              streamObserver._handleHasMore(meta);
            } else {
              streamObserver._handlePullSuccess(meta);
            }
          },
          onError: function (streamObserver, error) {
            streamObserver._handleError(error);
          },
          name: function () {
            return 'STREAMING';
          },
        },
        FAILED: {
          onError: function (error) {},
          name: function () {
            return 'FAILED';
          },
        },
        SUCCEEDED: {
          name: function () {
            return 'SUCCEEDED';
          },
        },
      };
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v1.js
  var require_bolt_protocol_v1 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v1.js'(
      exports,
    ) {
      'use strict';
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var bolt_protocol_util_1 = require_bolt_protocol_util();
      var packstream_1 = require_packstream();
      var request_message_1 = __importDefault2(require_request_message());
      var stream_observers_1 = require_stream_observers();
      var neo4j_driver_core_1 = require_lib();
      var Bookmark = neo4j_driver_core_1.internal.bookmark.Bookmark;
      var _a = neo4j_driver_core_1.internal.constants;
      var ACCESS_MODE_WRITE = _a.ACCESS_MODE_WRITE;
      var BOLT_PROTOCOL_V1 = _a.BOLT_PROTOCOL_V1;
      var Logger = neo4j_driver_core_1.internal.logger.Logger;
      var TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;
      var BoltProtocol = (function () {
        function BoltProtocol2(
          server,
          chunker,
          _a2,
          createResponseHandler,
          log,
          onProtocolError,
        ) {
          var _b = _a2 === void 0 ? {} : _a2,
            disableLosslessIntegers = _b.disableLosslessIntegers,
            useBigInt = _b.useBigInt;
          if (createResponseHandler === void 0) {
            createResponseHandler = function () {
              return null;
            };
          }
          this._server = server || {};
          this._chunker = chunker;
          this._packer = this._createPacker(chunker);
          this._unpacker = this._createUnpacker(
            disableLosslessIntegers,
            useBigInt,
          );
          this._responseHandler = createResponseHandler(this);
          this._log = log;
          this._onProtocolError = onProtocolError;
          this._fatalError = null;
        }
        Object.defineProperty(BoltProtocol2.prototype, 'version', {
          get: function () {
            return BOLT_PROTOCOL_V1;
          },
          enumerable: false,
          configurable: true,
        });
        BoltProtocol2.prototype.packer = function () {
          return this._packer;
        };
        BoltProtocol2.prototype.unpacker = function () {
          return this._unpacker;
        };
        BoltProtocol2.prototype.transformMetadata = function (metadata) {
          return metadata;
        };
        BoltProtocol2.prototype.initialize = function (_a2) {
          var _this = this;
          var _b = _a2 === void 0 ? {} : _a2,
            userAgent = _b.userAgent,
            authToken = _b.authToken,
            onError = _b.onError,
            onComplete = _b.onComplete;
          var observer = new stream_observers_1.LoginObserver({
            onError: function (error) {
              return _this._onLoginError(error, onError);
            },
            onCompleted: function (metadata) {
              return _this._onLoginCompleted(metadata, onComplete);
            },
          });
          this.write(
            request_message_1.default.init(userAgent, authToken),
            observer,
            true,
          );
          return observer;
        };
        BoltProtocol2.prototype.prepareToClose = function () {};
        BoltProtocol2.prototype.beginTransaction = function (_a2) {
          var _b = _a2 === void 0 ? {} : _a2,
            bookmark = _b.bookmark,
            txConfig = _b.txConfig,
            database = _b.database,
            mode = _b.mode,
            impersonatedUser = _b.impersonatedUser,
            beforeError = _b.beforeError,
            afterError = _b.afterError,
            beforeComplete = _b.beforeComplete,
            afterComplete = _b.afterComplete;
          return this.run(
            'BEGIN',
            bookmark ? bookmark.asBeginTransactionParameters() : {},
            {
              bookmark,
              txConfig,
              database,
              mode,
              impersonatedUser,
              beforeError,
              afterError,
              beforeComplete,
              afterComplete,
              flush: false,
            },
          );
        };
        BoltProtocol2.prototype.commitTransaction = function (_a2) {
          var _b = _a2 === void 0 ? {} : _a2,
            beforeError = _b.beforeError,
            afterError = _b.afterError,
            beforeComplete = _b.beforeComplete,
            afterComplete = _b.afterComplete;
          return this.run(
            'COMMIT',
            {},
            {
              bookmark: Bookmark.empty(),
              txConfig: TxConfig.empty(),
              mode: ACCESS_MODE_WRITE,
              beforeError,
              afterError,
              beforeComplete,
              afterComplete,
            },
          );
        };
        BoltProtocol2.prototype.rollbackTransaction = function (_a2) {
          var _b = _a2 === void 0 ? {} : _a2,
            beforeError = _b.beforeError,
            afterError = _b.afterError,
            beforeComplete = _b.beforeComplete,
            afterComplete = _b.afterComplete;
          return this.run(
            'ROLLBACK',
            {},
            {
              bookmark: Bookmark.empty(),
              txConfig: TxConfig.empty(),
              mode: ACCESS_MODE_WRITE,
              beforeError,
              afterError,
              beforeComplete,
              afterComplete,
            },
          );
        };
        BoltProtocol2.prototype.run = function (query, parameters, _a2) {
          var _b = _a2 === void 0 ? {} : _a2,
            bookmark = _b.bookmark,
            txConfig = _b.txConfig,
            database = _b.database,
            mode = _b.mode,
            impersonatedUser = _b.impersonatedUser,
            beforeKeys = _b.beforeKeys,
            afterKeys = _b.afterKeys,
            beforeError = _b.beforeError,
            afterError = _b.afterError,
            beforeComplete = _b.beforeComplete,
            afterComplete = _b.afterComplete,
            _c = _b.flush,
            flush = _c === void 0 ? true : _c;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            beforeKeys,
            afterKeys,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete,
          });
          (0, bolt_protocol_util_1.assertTxConfigIsEmpty)(
            txConfig,
            this._onProtocolError,
            observer,
          );
          (0, bolt_protocol_util_1.assertDatabaseIsEmpty)(
            database,
            this._onProtocolError,
            observer,
          );
          (0, bolt_protocol_util_1.assertImpersonatedUserIsEmpty)(
            impersonatedUser,
            this._onProtocolError,
            observer,
          );
          this.write(
            request_message_1.default.run(query, parameters),
            observer,
            false,
          );
          this.write(request_message_1.default.pullAll(), observer, flush);
          return observer;
        };
        Object.defineProperty(BoltProtocol2.prototype, 'currentFailure', {
          get: function () {
            return this._responseHandler.currentFailure;
          },
          enumerable: false,
          configurable: true,
        });
        BoltProtocol2.prototype.reset = function (_a2) {
          var _b = _a2 === void 0 ? {} : _a2,
            onError = _b.onError,
            onComplete = _b.onComplete;
          var observer = new stream_observers_1.ResetObserver({
            onProtocolError: this._onProtocolError,
            onError,
            onComplete,
          });
          this.write(request_message_1.default.reset(), observer, true);
          return observer;
        };
        BoltProtocol2.prototype._createPacker = function (chunker) {
          return new packstream_1.v1.Packer(chunker);
        };
        BoltProtocol2.prototype._createUnpacker = function (
          disableLosslessIntegers,
          useBigInt,
        ) {
          return new packstream_1.v1.Unpacker(
            disableLosslessIntegers,
            useBigInt,
          );
        };
        BoltProtocol2.prototype.write = function (message, observer, flush) {
          var _this = this;
          var queued = this.queueObserverIfProtocolIsNotBroken(observer);
          if (queued) {
            if (this._log.isDebugEnabled()) {
              this._log.debug('C: ' + message);
            }
            this.packer().packStruct(
              message.signature,
              message.fields.map(function (field) {
                return _this.packer().packable(field);
              }),
            );
            this._chunker.messageBoundary();
            if (flush) {
              this._chunker.flush();
            }
          }
        };
        BoltProtocol2.prototype.notifyFatalError = function (error) {
          this._fatalError = error;
          return this._responseHandler._notifyErrorToObservers(error);
        };
        BoltProtocol2.prototype.updateCurrentObserver = function () {
          return this._responseHandler._updateCurrentObserver();
        };
        BoltProtocol2.prototype.hasOngoingObservableRequests = function () {
          return this._responseHandler.hasOngoingObservableRequests();
        };
        BoltProtocol2.prototype.queueObserverIfProtocolIsNotBroken = function (
          observer,
        ) {
          if (this.isBroken()) {
            this.notifyFatalErrorToObserver(observer);
            return false;
          }
          return this._responseHandler._queueObserver(observer);
        };
        BoltProtocol2.prototype.isBroken = function () {
          return !!this._fatalError;
        };
        BoltProtocol2.prototype.notifyFatalErrorToObserver = function (
          observer,
        ) {
          if (observer && observer.onError) {
            observer.onError(this._fatalError);
          }
        };
        BoltProtocol2.prototype.resetFailure = function () {
          this._responseHandler._resetFailure();
        };
        BoltProtocol2.prototype._onLoginCompleted = function (
          metadata,
          onCompleted,
        ) {
          if (metadata) {
            var serverVersion = metadata.server;
            if (!this._server.version) {
              this._server.version = serverVersion;
            }
          }
          if (onCompleted) {
            onCompleted(metadata);
          }
        };
        BoltProtocol2.prototype._onLoginError = function (error, onError) {
          this._onProtocolError(error.message);
          if (onError) {
            onError(error);
          }
        };
        return BoltProtocol2;
      })();
      exports.default = BoltProtocol;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v2.js
  var require_bolt_protocol_v2 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v2.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var bolt_protocol_v1_1 = __importDefault2(require_bolt_protocol_v1());
      var packstream_1 = __importDefault2(require_packstream());
      var neo4j_driver_core_1 = require_lib();
      var BOLT_PROTOCOL_V2 =
        neo4j_driver_core_1.internal.constants.BOLT_PROTOCOL_V2;
      var BoltProtocol = (function (_super) {
        __extends2(BoltProtocol2, _super);
        function BoltProtocol2() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        BoltProtocol2.prototype._createPacker = function (chunker) {
          return new packstream_1.default.Packer(chunker);
        };
        BoltProtocol2.prototype._createUnpacker = function (
          disableLosslessIntegers,
          useBigInt,
        ) {
          return new packstream_1.default.Unpacker(
            disableLosslessIntegers,
            useBigInt,
          );
        };
        Object.defineProperty(BoltProtocol2.prototype, 'version', {
          get: function () {
            return BOLT_PROTOCOL_V2;
          },
          enumerable: false,
          configurable: true,
        });
        return BoltProtocol2;
      })(bolt_protocol_v1_1.default);
      exports.default = BoltProtocol;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v3.js
  var require_bolt_protocol_v3 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v3.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var __assign2 =
        (exports && exports.__assign) ||
        function () {
          __assign2 =
            Object.assign ||
            function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
              }
              return t;
            };
          return __assign2.apply(this, arguments);
        };
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var bolt_protocol_v2_1 = __importDefault2(require_bolt_protocol_v2());
      var request_message_1 = __importDefault2(require_request_message());
      var bolt_protocol_util_1 = require_bolt_protocol_util();
      var stream_observers_1 = require_stream_observers();
      var neo4j_driver_core_1 = require_lib();
      var Bookmark = neo4j_driver_core_1.internal.bookmark.Bookmark;
      var BOLT_PROTOCOL_V3 =
        neo4j_driver_core_1.internal.constants.BOLT_PROTOCOL_V3;
      var TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;
      var CONTEXT = 'context';
      var CALL_GET_ROUTING_TABLE =
        'CALL dbms.cluster.routing.getRoutingTable($' + CONTEXT + ')';
      var noOpObserver = new stream_observers_1.StreamObserver();
      var BoltProtocol = (function (_super) {
        __extends2(BoltProtocol2, _super);
        function BoltProtocol2() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, 'version', {
          get: function () {
            return BOLT_PROTOCOL_V3;
          },
          enumerable: false,
          configurable: true,
        });
        BoltProtocol2.prototype.transformMetadata = function (metadata) {
          if ('t_first' in metadata) {
            metadata.result_available_after = metadata.t_first;
            delete metadata.t_first;
          }
          if ('t_last' in metadata) {
            metadata.result_consumed_after = metadata.t_last;
            delete metadata.t_last;
          }
          return metadata;
        };
        BoltProtocol2.prototype.initialize = function (_a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a,
            userAgent = _b.userAgent,
            authToken = _b.authToken,
            onError = _b.onError,
            onComplete = _b.onComplete;
          var observer = new stream_observers_1.LoginObserver({
            onError: function (error) {
              return _this._onLoginError(error, onError);
            },
            onCompleted: function (metadata) {
              return _this._onLoginCompleted(metadata, onComplete);
            },
          });
          this.write(
            request_message_1.default.hello(userAgent, authToken),
            observer,
            true,
          );
          return observer;
        };
        BoltProtocol2.prototype.prepareToClose = function () {
          this.write(request_message_1.default.goodbye(), noOpObserver, true);
        };
        BoltProtocol2.prototype.beginTransaction = function (_a) {
          var _b = _a === void 0 ? {} : _a,
            bookmark = _b.bookmark,
            txConfig = _b.txConfig,
            database = _b.database,
            impersonatedUser = _b.impersonatedUser,
            mode = _b.mode,
            beforeError = _b.beforeError,
            afterError = _b.afterError,
            beforeComplete = _b.beforeComplete,
            afterComplete = _b.afterComplete;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete,
          });
          observer.prepareToHandleSingleResponse();
          (0, bolt_protocol_util_1.assertDatabaseIsEmpty)(
            database,
            this._onProtocolError,
            observer,
          );
          (0, bolt_protocol_util_1.assertImpersonatedUserIsEmpty)(
            impersonatedUser,
            this._onProtocolError,
            observer,
          );
          this.write(
            request_message_1.default.begin({ bookmark, txConfig, mode }),
            observer,
            true,
          );
          return observer;
        };
        BoltProtocol2.prototype.commitTransaction = function (_a) {
          var _b = _a === void 0 ? {} : _a,
            beforeError = _b.beforeError,
            afterError = _b.afterError,
            beforeComplete = _b.beforeComplete,
            afterComplete = _b.afterComplete;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete,
          });
          observer.prepareToHandleSingleResponse();
          this.write(request_message_1.default.commit(), observer, true);
          return observer;
        };
        BoltProtocol2.prototype.rollbackTransaction = function (_a) {
          var _b = _a === void 0 ? {} : _a,
            beforeError = _b.beforeError,
            afterError = _b.afterError,
            beforeComplete = _b.beforeComplete,
            afterComplete = _b.afterComplete;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete,
          });
          observer.prepareToHandleSingleResponse();
          this.write(request_message_1.default.rollback(), observer, true);
          return observer;
        };
        BoltProtocol2.prototype.run = function (query, parameters, _a) {
          var _b = _a === void 0 ? {} : _a,
            bookmark = _b.bookmark,
            txConfig = _b.txConfig,
            database = _b.database,
            impersonatedUser = _b.impersonatedUser,
            mode = _b.mode,
            beforeKeys = _b.beforeKeys,
            afterKeys = _b.afterKeys,
            beforeError = _b.beforeError,
            afterError = _b.afterError,
            beforeComplete = _b.beforeComplete,
            afterComplete = _b.afterComplete,
            _c = _b.flush,
            flush = _c === void 0 ? true : _c;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            beforeKeys,
            afterKeys,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete,
          });
          (0, bolt_protocol_util_1.assertDatabaseIsEmpty)(
            database,
            this._onProtocolError,
            observer,
          );
          (0, bolt_protocol_util_1.assertImpersonatedUserIsEmpty)(
            impersonatedUser,
            this._onProtocolError,
            observer,
          );
          this.write(
            request_message_1.default.runWithMetadata(query, parameters, {
              bookmark,
              txConfig,
              mode,
            }),
            observer,
            false,
          );
          this.write(request_message_1.default.pullAll(), observer, flush);
          return observer;
        };
        BoltProtocol2.prototype.requestRoutingInformation = function (_a) {
          var _b;
          var _c = _a.routingContext,
            routingContext = _c === void 0 ? {} : _c,
            _d = _a.sessionContext,
            sessionContext = _d === void 0 ? {} : _d,
            onError = _a.onError,
            onCompleted = _a.onCompleted;
          var resultObserver = this.run(
            CALL_GET_ROUTING_TABLE,
            ((_b = {}), (_b[CONTEXT] = routingContext), _b),
            __assign2(__assign2({}, sessionContext), {
              txConfig: TxConfig.empty(),
            }),
          );
          return new stream_observers_1.ProcedureRouteObserver({
            resultObserver,
            onProtocolError: this._onProtocolError,
            onError,
            onCompleted,
          });
        };
        return BoltProtocol2;
      })(bolt_protocol_v2_1.default);
      exports.default = BoltProtocol;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x0.js
  var require_bolt_protocol_v4x0 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x0.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var __assign2 =
        (exports && exports.__assign) ||
        function () {
          __assign2 =
            Object.assign ||
            function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
              }
              return t;
            };
          return __assign2.apply(this, arguments);
        };
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var bolt_protocol_v3_1 = __importDefault2(require_bolt_protocol_v3());
      var request_message_1 = __importDefault2(require_request_message());
      var bolt_protocol_util_1 = require_bolt_protocol_util();
      var stream_observers_1 = require_stream_observers();
      var neo4j_driver_core_1 = require_lib();
      var Bookmark = neo4j_driver_core_1.internal.bookmark.Bookmark;
      var _a = neo4j_driver_core_1.internal.constants;
      var BOLT_PROTOCOL_V4_0 = _a.BOLT_PROTOCOL_V4_0;
      var FETCH_ALL = _a.FETCH_ALL;
      var TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;
      var CONTEXT = 'context';
      var DATABASE = 'database';
      var CALL_GET_ROUTING_TABLE_MULTI_DB =
        'CALL dbms.routing.getRoutingTable($' +
        CONTEXT +
        ', $' +
        DATABASE +
        ')';
      var BoltProtocol = (function (_super) {
        __extends2(BoltProtocol2, _super);
        function BoltProtocol2() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, 'version', {
          get: function () {
            return BOLT_PROTOCOL_V4_0;
          },
          enumerable: false,
          configurable: true,
        });
        BoltProtocol2.prototype.beginTransaction = function (_a2) {
          var _b = _a2 === void 0 ? {} : _a2,
            bookmark = _b.bookmark,
            txConfig = _b.txConfig,
            database = _b.database,
            impersonatedUser = _b.impersonatedUser,
            mode = _b.mode,
            beforeError = _b.beforeError,
            afterError = _b.afterError,
            beforeComplete = _b.beforeComplete,
            afterComplete = _b.afterComplete;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete,
          });
          observer.prepareToHandleSingleResponse();
          (0, bolt_protocol_util_1.assertImpersonatedUserIsEmpty)(
            impersonatedUser,
            this._onProtocolError,
            observer,
          );
          this.write(
            request_message_1.default.begin({
              bookmark,
              txConfig,
              database,
              mode,
            }),
            observer,
            true,
          );
          return observer;
        };
        BoltProtocol2.prototype.run = function (query, parameters, _a2) {
          var _b = _a2 === void 0 ? {} : _a2,
            bookmark = _b.bookmark,
            txConfig = _b.txConfig,
            database = _b.database,
            impersonatedUser = _b.impersonatedUser,
            mode = _b.mode,
            beforeKeys = _b.beforeKeys,
            afterKeys = _b.afterKeys,
            beforeError = _b.beforeError,
            afterError = _b.afterError,
            beforeComplete = _b.beforeComplete,
            afterComplete = _b.afterComplete,
            _c = _b.flush,
            flush = _c === void 0 ? true : _c,
            _d = _b.reactive,
            reactive = _d === void 0 ? false : _d,
            _e = _b.fetchSize,
            fetchSize = _e === void 0 ? FETCH_ALL : _e;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            reactive,
            fetchSize,
            moreFunction: this._requestMore.bind(this),
            discardFunction: this._requestDiscard.bind(this),
            beforeKeys,
            afterKeys,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete,
          });
          (0, bolt_protocol_util_1.assertImpersonatedUserIsEmpty)(
            impersonatedUser,
            this._onProtocolError,
            observer,
          );
          var flushRun = reactive;
          this.write(
            request_message_1.default.runWithMetadata(query, parameters, {
              bookmark,
              txConfig,
              database,
              mode,
            }),
            observer,
            flushRun && flush,
          );
          if (!reactive) {
            this.write(
              request_message_1.default.pull({ n: fetchSize }),
              observer,
              flush,
            );
          }
          return observer;
        };
        BoltProtocol2.prototype._requestMore = function (stmtId, n, observer) {
          this.write(
            request_message_1.default.pull({ stmtId, n }),
            observer,
            true,
          );
        };
        BoltProtocol2.prototype._requestDiscard = function (stmtId, observer) {
          this.write(
            request_message_1.default.discard({ stmtId }),
            observer,
            true,
          );
        };
        BoltProtocol2.prototype._noOp = function () {};
        BoltProtocol2.prototype.requestRoutingInformation = function (_a2) {
          var _b;
          var _c = _a2.routingContext,
            routingContext = _c === void 0 ? {} : _c,
            _d = _a2.databaseName,
            databaseName = _d === void 0 ? null : _d,
            _e = _a2.sessionContext,
            sessionContext = _e === void 0 ? {} : _e,
            onError = _a2.onError,
            onCompleted = _a2.onCompleted;
          var resultObserver = this.run(
            CALL_GET_ROUTING_TABLE_MULTI_DB,
            ((_b = {}),
            (_b[CONTEXT] = routingContext),
            (_b[DATABASE] = databaseName),
            _b),
            __assign2(__assign2({}, sessionContext), {
              txConfig: TxConfig.empty(),
            }),
          );
          return new stream_observers_1.ProcedureRouteObserver({
            resultObserver,
            onProtocolError: this._onProtocolError,
            onError,
            onCompleted,
          });
        };
        return BoltProtocol2;
      })(bolt_protocol_v3_1.default);
      exports.default = BoltProtocol;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x1.js
  var require_bolt_protocol_v4x1 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x1.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var bolt_protocol_v4x0_1 = __importDefault2(require_bolt_protocol_v4x0());
      var request_message_1 = __importDefault2(require_request_message());
      var stream_observers_1 = require_stream_observers();
      var neo4j_driver_core_1 = require_lib();
      var BOLT_PROTOCOL_V4_1 =
        neo4j_driver_core_1.internal.constants.BOLT_PROTOCOL_V4_1;
      var BoltProtocol = (function (_super) {
        __extends2(BoltProtocol2, _super);
        function BoltProtocol2(
          server,
          chunker,
          packstreamConfig,
          createResponseHandler,
          log,
          onProtocolError,
          serversideRouting,
        ) {
          if (createResponseHandler === void 0) {
            createResponseHandler = function () {
              return null;
            };
          }
          var _this =
            _super.call(
              this,
              server,
              chunker,
              packstreamConfig,
              createResponseHandler,
              log,
              onProtocolError,
            ) || this;
          _this._serversideRouting = serversideRouting;
          return _this;
        }
        Object.defineProperty(BoltProtocol2.prototype, 'version', {
          get: function () {
            return BOLT_PROTOCOL_V4_1;
          },
          enumerable: false,
          configurable: true,
        });
        BoltProtocol2.prototype.initialize = function (_a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a,
            userAgent = _b.userAgent,
            authToken = _b.authToken,
            onError = _b.onError,
            onComplete = _b.onComplete;
          var observer = new stream_observers_1.LoginObserver({
            onError: function (error) {
              return _this._onLoginError(error, onError);
            },
            onCompleted: function (metadata) {
              return _this._onLoginCompleted(metadata, onComplete);
            },
          });
          this.write(
            request_message_1.default.hello(
              userAgent,
              authToken,
              this._serversideRouting,
            ),
            observer,
            true,
          );
          return observer;
        };
        return BoltProtocol2;
      })(bolt_protocol_v4x0_1.default);
      exports.default = BoltProtocol;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x2.js
  var require_bolt_protocol_v4x2 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x2.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var bolt_protocol_v4x1_1 = __importDefault2(require_bolt_protocol_v4x1());
      var neo4j_driver_core_1 = require_lib();
      var BOLT_PROTOCOL_V4_2 =
        neo4j_driver_core_1.internal.constants.BOLT_PROTOCOL_V4_2;
      var BoltProtocol = (function (_super) {
        __extends2(BoltProtocol2, _super);
        function BoltProtocol2() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, 'version', {
          get: function () {
            return BOLT_PROTOCOL_V4_2;
          },
          enumerable: false,
          configurable: true,
        });
        return BoltProtocol2;
      })(bolt_protocol_v4x1_1.default);
      exports.default = BoltProtocol;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x3.js
  var require_bolt_protocol_v4x3 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x3.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var bolt_protocol_v4x2_1 = __importDefault2(require_bolt_protocol_v4x2());
      var request_message_1 = __importDefault2(require_request_message());
      var stream_observers_1 = require_stream_observers();
      var stream_observers_2 = require_stream_observers();
      var neo4j_driver_core_1 = require_lib();
      var Bookmark = neo4j_driver_core_1.internal.bookmark.Bookmark;
      var BOLT_PROTOCOL_V4_3 =
        neo4j_driver_core_1.internal.constants.BOLT_PROTOCOL_V4_3;
      var BoltProtocol = (function (_super) {
        __extends2(BoltProtocol2, _super);
        function BoltProtocol2() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, 'version', {
          get: function () {
            return BOLT_PROTOCOL_V4_3;
          },
          enumerable: false,
          configurable: true,
        });
        BoltProtocol2.prototype.requestRoutingInformation = function (_a) {
          var _b = _a.routingContext,
            routingContext = _b === void 0 ? {} : _b,
            _c = _a.databaseName,
            databaseName = _c === void 0 ? null : _c,
            _d = _a.sessionContext,
            sessionContext = _d === void 0 ? {} : _d,
            onError = _a.onError,
            onCompleted = _a.onCompleted;
          var observer = new stream_observers_1.RouteObserver({
            onProtocolError: this._onProtocolError,
            onError,
            onCompleted,
          });
          var bookmark = sessionContext.bookmark || Bookmark.empty();
          this.write(
            request_message_1.default.route(
              routingContext,
              bookmark.values(),
              databaseName,
            ),
            observer,
            true,
          );
          return observer;
        };
        BoltProtocol2.prototype.initialize = function (_a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a,
            userAgent = _b.userAgent,
            authToken = _b.authToken,
            onError = _b.onError,
            onComplete = _b.onComplete;
          var observer = new stream_observers_2.LoginObserver({
            onError: function (error) {
              return _this._onLoginError(error, onError);
            },
            onCompleted: function (metadata) {
              if (metadata.patch_bolt !== void 0) {
                _this._applyPatches(metadata.patch_bolt);
              }
              return _this._onLoginCompleted(metadata, onComplete);
            },
          });
          this.write(
            request_message_1.default.hello(
              userAgent,
              authToken,
              this._serversideRouting,
              ['utc'],
            ),
            observer,
            true,
          );
          return observer;
        };
        BoltProtocol2.prototype._applyPatches = function (patches) {
          if (patches.includes('utc')) {
            this._applyUtcPatch();
          }
        };
        BoltProtocol2.prototype._applyUtcPatch = function () {
          this._packer.useUtc = true;
          this._unpacker.useUtc = true;
        };
        return BoltProtocol2;
      })(bolt_protocol_v4x2_1.default);
      exports.default = BoltProtocol;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x4.js
  var require_bolt_protocol_v4x4 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v4x4.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var bolt_protocol_v4x3_1 = __importDefault2(require_bolt_protocol_v4x3());
      var neo4j_driver_core_1 = require_lib();
      var request_message_1 = __importDefault2(require_request_message());
      var stream_observers_1 = require_stream_observers();
      var _a = neo4j_driver_core_1.internal.constants;
      var BOLT_PROTOCOL_V4_4 = _a.BOLT_PROTOCOL_V4_4;
      var FETCH_ALL = _a.FETCH_ALL;
      var Bookmark = neo4j_driver_core_1.internal.bookmark.Bookmark;
      var BoltProtocol = (function (_super) {
        __extends2(BoltProtocol2, _super);
        function BoltProtocol2() {
          return (_super !== null && _super.apply(this, arguments)) || this;
        }
        Object.defineProperty(BoltProtocol2.prototype, 'version', {
          get: function () {
            return BOLT_PROTOCOL_V4_4;
          },
          enumerable: false,
          configurable: true,
        });
        BoltProtocol2.prototype.requestRoutingInformation = function (_a2) {
          var _b = _a2.routingContext,
            routingContext = _b === void 0 ? {} : _b,
            _c = _a2.databaseName,
            databaseName = _c === void 0 ? null : _c,
            _d = _a2.impersonatedUser,
            impersonatedUser = _d === void 0 ? null : _d,
            _e = _a2.sessionContext,
            sessionContext = _e === void 0 ? {} : _e,
            onError = _a2.onError,
            onCompleted = _a2.onCompleted;
          var observer = new stream_observers_1.RouteObserver({
            onProtocolError: this._onProtocolError,
            onError,
            onCompleted,
          });
          var bookmark = sessionContext.bookmark || Bookmark.empty();
          this.write(
            request_message_1.default.routeV4x4(
              routingContext,
              bookmark.values(),
              { databaseName, impersonatedUser },
            ),
            observer,
            true,
          );
          return observer;
        };
        BoltProtocol2.prototype.run = function (query, parameters, _a2) {
          var _b = _a2 === void 0 ? {} : _a2,
            bookmark = _b.bookmark,
            txConfig = _b.txConfig,
            database = _b.database,
            mode = _b.mode,
            impersonatedUser = _b.impersonatedUser,
            beforeKeys = _b.beforeKeys,
            afterKeys = _b.afterKeys,
            beforeError = _b.beforeError,
            afterError = _b.afterError,
            beforeComplete = _b.beforeComplete,
            afterComplete = _b.afterComplete,
            _c = _b.flush,
            flush = _c === void 0 ? true : _c,
            _d = _b.reactive,
            reactive = _d === void 0 ? false : _d,
            _e = _b.fetchSize,
            fetchSize = _e === void 0 ? FETCH_ALL : _e;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            reactive,
            fetchSize,
            moreFunction: this._requestMore.bind(this),
            discardFunction: this._requestDiscard.bind(this),
            beforeKeys,
            afterKeys,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete,
          });
          var flushRun = reactive;
          this.write(
            request_message_1.default.runWithMetadata(query, parameters, {
              bookmark,
              txConfig,
              database,
              mode,
              impersonatedUser,
            }),
            observer,
            flushRun && flush,
          );
          if (!reactive) {
            this.write(
              request_message_1.default.pull({ n: fetchSize }),
              observer,
              flush,
            );
          }
          return observer;
        };
        BoltProtocol2.prototype.beginTransaction = function (_a2) {
          var _b = _a2 === void 0 ? {} : _a2,
            bookmark = _b.bookmark,
            txConfig = _b.txConfig,
            database = _b.database,
            mode = _b.mode,
            impersonatedUser = _b.impersonatedUser,
            beforeError = _b.beforeError,
            afterError = _b.afterError,
            beforeComplete = _b.beforeComplete,
            afterComplete = _b.afterComplete;
          var observer = new stream_observers_1.ResultStreamObserver({
            server: this._server,
            beforeError,
            afterError,
            beforeComplete,
            afterComplete,
          });
          observer.prepareToHandleSingleResponse();
          this.write(
            request_message_1.default.begin({
              bookmark,
              txConfig,
              database,
              mode,
              impersonatedUser,
            }),
            observer,
            true,
          );
          return observer;
        };
        return BoltProtocol2;
      })(bolt_protocol_v4x3_1.default);
      exports.default = BoltProtocol;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/bolt/response-handler.js
  var require_response_handler = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/bolt/response-handler.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var neo4j_driver_core_1 = require_lib();
      var SUCCESS = 112;
      var RECORD = 113;
      var IGNORED = 126;
      var FAILURE = 127;
      function NO_OP() {}
      function NO_OP_IDENTITY(subject) {
        return subject;
      }
      var NO_OP_OBSERVER = {
        onNext: NO_OP,
        onCompleted: NO_OP,
        onError: NO_OP,
      };
      var ResponseHandler = (function () {
        function ResponseHandler2(_a) {
          var _b = _a === void 0 ? {} : _a,
            transformMetadata = _b.transformMetadata,
            log = _b.log,
            observer = _b.observer;
          this._pendingObservers = [];
          this._log = log;
          this._transformMetadata = transformMetadata || NO_OP_IDENTITY;
          this._observer = Object.assign(
            {
              onPendingObserversChange: NO_OP,
              onError: NO_OP,
              onFailure: NO_OP,
              onErrorApplyTransformation: NO_OP_IDENTITY,
            },
            observer,
          );
        }
        Object.defineProperty(ResponseHandler2.prototype, 'currentFailure', {
          get: function () {
            return this._currentFailure;
          },
          enumerable: false,
          configurable: true,
        });
        ResponseHandler2.prototype.handleResponse = function (msg) {
          var payload = msg.fields[0];
          switch (msg.signature) {
            case RECORD:
              if (this._log.isDebugEnabled()) {
                this._log.debug(
                  'S: RECORD ' + neo4j_driver_core_1.json.stringify(msg),
                );
              }
              this._currentObserver.onNext(payload);
              break;
            case SUCCESS:
              if (this._log.isDebugEnabled()) {
                this._log.debug(
                  'S: SUCCESS ' + neo4j_driver_core_1.json.stringify(msg),
                );
              }
              try {
                var metadata = this._transformMetadata(payload);
                this._currentObserver.onCompleted(metadata);
              } finally {
                this._updateCurrentObserver();
              }
              break;
            case FAILURE:
              if (this._log.isDebugEnabled()) {
                this._log.debug(
                  'S: FAILURE ' + neo4j_driver_core_1.json.stringify(msg),
                );
              }
              try {
                var error = (0, neo4j_driver_core_1.newError)(
                  payload.message,
                  payload.code,
                );
                this._currentFailure =
                  this._observer.onErrorApplyTransformation(error);
                this._currentObserver.onError(this._currentFailure);
              } finally {
                this._updateCurrentObserver();
                this._observer.onFailure(this._currentFailure);
              }
              break;
            case IGNORED:
              if (this._log.isDebugEnabled()) {
                this._log.debug(
                  'S: IGNORED ' + neo4j_driver_core_1.json.stringify(msg),
                );
              }
              try {
                if (this._currentFailure && this._currentObserver.onError) {
                  this._currentObserver.onError(this._currentFailure);
                } else if (this._currentObserver.onError) {
                  this._currentObserver.onError(
                    (0, neo4j_driver_core_1.newError)(
                      'Ignored either because of an error or RESET',
                    ),
                  );
                }
              } finally {
                this._updateCurrentObserver();
              }
              break;
            default:
              this._observer.onError(
                (0, neo4j_driver_core_1.newError)(
                  'Unknown Bolt protocol message: ' + msg,
                ),
              );
          }
        };
        ResponseHandler2.prototype._updateCurrentObserver = function () {
          this._currentObserver = this._pendingObservers.shift();
          this._observer.onPendingObserversChange(
            this._pendingObservers.length,
          );
        };
        ResponseHandler2.prototype._queueObserver = function (observer) {
          observer = observer || NO_OP_OBSERVER;
          observer.onCompleted = observer.onCompleted || NO_OP;
          observer.onError = observer.onError || NO_OP;
          observer.onNext = observer.onNext || NO_OP;
          if (this._currentObserver === void 0) {
            this._currentObserver = observer;
          } else {
            this._pendingObservers.push(observer);
          }
          this._observer.onPendingObserversChange(
            this._pendingObservers.length,
          );
          return true;
        };
        ResponseHandler2.prototype._notifyErrorToObservers = function (error) {
          if (this._currentObserver && this._currentObserver.onError) {
            this._currentObserver.onError(error);
          }
          while (this._pendingObservers.length > 0) {
            var observer = this._pendingObservers.shift();
            if (observer && observer.onError) {
              observer.onError(error);
            }
          }
        };
        ResponseHandler2.prototype.hasOngoingObservableRequests = function () {
          return (
            this._currentObserver != null || this._pendingObservers.length > 0
          );
        };
        ResponseHandler2.prototype._resetFailure = function () {
          this._currentFailure = null;
        };
        return ResponseHandler2;
      })();
      exports.default = ResponseHandler;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/bolt/create.js
  var require_create = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/bolt/create.js'(exports) {
      'use strict';
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var neo4j_driver_core_1 = require_lib();
      var bolt_protocol_v1_1 = __importDefault2(require_bolt_protocol_v1());
      var bolt_protocol_v2_1 = __importDefault2(require_bolt_protocol_v2());
      var bolt_protocol_v3_1 = __importDefault2(require_bolt_protocol_v3());
      var bolt_protocol_v4x0_1 = __importDefault2(require_bolt_protocol_v4x0());
      var bolt_protocol_v4x1_1 = __importDefault2(require_bolt_protocol_v4x1());
      var bolt_protocol_v4x2_1 = __importDefault2(require_bolt_protocol_v4x2());
      var bolt_protocol_v4x3_1 = __importDefault2(require_bolt_protocol_v4x3());
      var bolt_protocol_v4x4_1 = __importDefault2(require_bolt_protocol_v4x4());
      var response_handler_1 = __importDefault2(require_response_handler());
      function create(_a) {
        var _b = _a === void 0 ? {} : _a,
          version = _b.version,
          chunker = _b.chunker,
          dechunker = _b.dechunker,
          channel = _b.channel,
          disableLosslessIntegers = _b.disableLosslessIntegers,
          useBigInt = _b.useBigInt,
          serversideRouting = _b.serversideRouting,
          server = _b.server,
          log = _b.log,
          observer = _b.observer;
        var createResponseHandler = function (protocol) {
          var responseHandler = new response_handler_1.default({
            transformMetadata: protocol.transformMetadata.bind(protocol),
            log,
            observer,
          });
          channel.onerror = observer.onError.bind(observer);
          channel.onmessage = function (buf) {
            return dechunker.write(buf);
          };
          dechunker.onmessage = function (buf) {
            try {
              responseHandler.handleResponse(protocol.unpacker().unpack(buf));
            } catch (e) {
              return observer.onError(e);
            }
          };
          return responseHandler;
        };
        return createProtocol(
          version,
          server,
          chunker,
          { disableLosslessIntegers, useBigInt },
          serversideRouting,
          createResponseHandler,
          observer.onProtocolError.bind(observer),
          log,
        );
      }
      exports.default = create;
      function createProtocol(
        version,
        server,
        chunker,
        packingConfig,
        serversideRouting,
        createResponseHandler,
        onProtocolError,
        log,
      ) {
        switch (version) {
          case 1:
            return new bolt_protocol_v1_1.default(
              server,
              chunker,
              packingConfig,
              createResponseHandler,
              log,
              onProtocolError,
            );
          case 2:
            return new bolt_protocol_v2_1.default(
              server,
              chunker,
              packingConfig,
              createResponseHandler,
              log,
              onProtocolError,
            );
          case 3:
            return new bolt_protocol_v3_1.default(
              server,
              chunker,
              packingConfig,
              createResponseHandler,
              log,
              onProtocolError,
            );
          case 4:
            return new bolt_protocol_v4x0_1.default(
              server,
              chunker,
              packingConfig,
              createResponseHandler,
              log,
              onProtocolError,
            );
          case 4.1:
            return new bolt_protocol_v4x1_1.default(
              server,
              chunker,
              packingConfig,
              createResponseHandler,
              log,
              onProtocolError,
              serversideRouting,
            );
          case 4.2:
            return new bolt_protocol_v4x2_1.default(
              server,
              chunker,
              packingConfig,
              createResponseHandler,
              log,
              onProtocolError,
              serversideRouting,
            );
          case 4.3:
            return new bolt_protocol_v4x3_1.default(
              server,
              chunker,
              packingConfig,
              createResponseHandler,
              log,
              onProtocolError,
              serversideRouting,
            );
          case 4.4:
            return new bolt_protocol_v4x4_1.default(
              server,
              chunker,
              packingConfig,
              createResponseHandler,
              log,
              onProtocolError,
              serversideRouting,
            );
          default:
            throw (0, neo4j_driver_core_1.newError)(
              'Unknown Bolt protocol version: ' + version,
            );
        }
      }
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/bolt/index.js
  var require_bolt = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/bolt/index.js'(exports) {
      'use strict';
      var __createBinding2 =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __exportStar2 =
        (exports && exports.__exportStar) ||
        function (m, exports2) {
          for (var p in m)
            if (
              p !== 'default' &&
              !Object.prototype.hasOwnProperty.call(exports2, p)
            )
              __createBinding2(exports2, m, p);
        };
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.RawRoutingTable = exports.BoltProtocol = void 0;
      var handshake_1 = __importDefault2(require_handshake());
      var create_1 = __importDefault2(require_create());
      var bolt_protocol_v4x3_1 = __importDefault2(require_bolt_protocol_v4x3());
      var routing_table_raw_1 = __importDefault2(require_routing_table_raw());
      __exportStar2(require_stream_observers(), exports);
      exports.BoltProtocol = bolt_protocol_v4x3_1.default;
      exports.RawRoutingTable = routing_table_raw_1.default;
      exports.default = {
        handshake: handshake_1.default,
        create: create_1.default,
      };
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/pool/pool-config.js
  var require_pool_config = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/pool/pool-config.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.DEFAULT_ACQUISITION_TIMEOUT = exports.DEFAULT_MAX_SIZE = void 0;
      var DEFAULT_MAX_SIZE = 100;
      exports.DEFAULT_MAX_SIZE = DEFAULT_MAX_SIZE;
      var DEFAULT_ACQUISITION_TIMEOUT = 60 * 1e3;
      exports.DEFAULT_ACQUISITION_TIMEOUT = DEFAULT_ACQUISITION_TIMEOUT;
      var PoolConfig = (function () {
        function PoolConfig2(maxSize, acquisitionTimeout) {
          this.maxSize = valueOrDefault(maxSize, DEFAULT_MAX_SIZE);
          this.acquisitionTimeout = valueOrDefault(
            acquisitionTimeout,
            DEFAULT_ACQUISITION_TIMEOUT,
          );
        }
        PoolConfig2.defaultConfig = function () {
          return new PoolConfig2(DEFAULT_MAX_SIZE, DEFAULT_ACQUISITION_TIMEOUT);
        };
        PoolConfig2.fromDriverConfig = function (config2) {
          var maxSizeConfigured = isConfigured(config2.maxConnectionPoolSize);
          var maxSize = maxSizeConfigured
            ? config2.maxConnectionPoolSize
            : DEFAULT_MAX_SIZE;
          var acquisitionTimeoutConfigured = isConfigured(
            config2.connectionAcquisitionTimeout,
          );
          var acquisitionTimeout = acquisitionTimeoutConfigured
            ? config2.connectionAcquisitionTimeout
            : DEFAULT_ACQUISITION_TIMEOUT;
          return new PoolConfig2(maxSize, acquisitionTimeout);
        };
        return PoolConfig2;
      })();
      exports.default = PoolConfig;
      function valueOrDefault(value, defaultValue) {
        return value === 0 || value ? value : defaultValue;
      }
      function isConfigured(value) {
        return value === 0 || value;
      }
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/pool/pool.js
  var require_pool = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/pool/pool.js'(exports) {
      'use strict';
      var __awaiter2 =
        (exports && exports.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator['throw'](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
      var __generator2 =
        (exports && exports.__generator) ||
        function (thisArg, body) {
          var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: [],
            },
            f,
            y,
            t,
            g;
          return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === 'function' &&
              (g[Symbol.iterator] = function () {
                return this;
              }),
            g
          );
          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f) throw new TypeError('Generator is already executing.');
            while (_)
              try {
                if (
                  ((f = 1),
                  y &&
                    (t =
                      op[0] & 2
                        ? y['return']
                        : op[0]
                        ? y['throw'] || ((t = y['return']) && t.call(y), 0)
                        : y.next) &&
                    !(t = t.call(y, op[1])).done)
                )
                  return t;
                if (((y = 0), t)) op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (
                      !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                      (op[0] === 6 || op[0] === 2)
                    ) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var pool_config_1 = __importDefault2(require_pool_config());
      var neo4j_driver_core_1 = require_lib();
      var Logger = neo4j_driver_core_1.internal.logger.Logger;
      var Pool = (function () {
        function Pool2(_a) {
          var _b = _a === void 0 ? {} : _a,
            _c = _b.create,
            create =
              _c === void 0
                ? function (address, release) {
                    return Promise.resolve();
                  }
                : _c,
            _d = _b.destroy,
            destroy =
              _d === void 0
                ? function (conn) {
                    return Promise.resolve();
                  }
                : _d,
            _e = _b.validate,
            validate =
              _e === void 0
                ? function (conn) {
                    return true;
                  }
                : _e,
            _f = _b.installIdleObserver,
            installIdleObserver =
              _f === void 0 ? function (conn, observer) {} : _f,
            _g = _b.removeIdleObserver,
            removeIdleObserver = _g === void 0 ? function (conn) {} : _g,
            _h = _b.config,
            config2 =
              _h === void 0 ? pool_config_1.default.defaultConfig() : _h,
            _j = _b.log,
            log = _j === void 0 ? Logger.noOp() : _j;
          this._create = create;
          this._destroy = destroy;
          this._validate = validate;
          this._installIdleObserver = installIdleObserver;
          this._removeIdleObserver = removeIdleObserver;
          this._maxSize = config2.maxSize;
          this._acquisitionTimeout = config2.acquisitionTimeout;
          this._pools = {};
          this._pendingCreates = {};
          this._acquireRequests = {};
          this._activeResourceCounts = {};
          this._poolState = {};
          this._release = this._release.bind(this);
          this._log = log;
          this._closed = false;
        }
        Pool2.prototype.acquire = function (address) {
          var _this = this;
          return this._acquire(address).then(function (resource) {
            var key = address.asKey();
            if (resource) {
              return resource;
            }
            var allRequests = _this._acquireRequests;
            var requests = allRequests[key];
            if (!requests) {
              allRequests[key] = [];
            }
            return new Promise(function (resolve, reject) {
              var request;
              var timeoutId = setTimeout(function () {
                var pendingRequests = allRequests[key];
                if (pendingRequests) {
                  allRequests[key] = pendingRequests.filter(function (item) {
                    return item !== request;
                  });
                }
                if (request.isCompleted()) {
                } else {
                  var activeCount = _this.activeResourceCount(address);
                  var idleCount = _this.has(address)
                    ? _this._pools[key].length
                    : 0;
                  request.reject(
                    (0, neo4j_driver_core_1.newError)(
                      'Connection acquisition timed out in ' +
                        _this._acquisitionTimeout +
                        ' ms. Pool status: Active conn count = ' +
                        activeCount +
                        ', Idle conn count = ' +
                        idleCount +
                        '.',
                    ),
                  );
                }
              }, _this._acquisitionTimeout);
              request = new PendingRequest(
                key,
                resolve,
                reject,
                timeoutId,
                _this._log,
              );
              allRequests[key].push(request);
            });
          });
        };
        Pool2.prototype.purge = function (address) {
          return this._purgeKey(address.asKey());
        };
        Pool2.prototype.close = function () {
          return __awaiter2(this, void 0, void 0, function () {
            var _this = this;
            return __generator2(this, function (_a) {
              switch (_a.label) {
                case 0:
                  this._closed = true;
                  return [
                    4,
                    Promise.all(
                      Object.keys(this._pools).map(function (key) {
                        return _this._purgeKey(key);
                      }),
                    ),
                  ];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        };
        Pool2.prototype.keepAll = function (addresses) {
          var _this = this;
          var keysToKeep = addresses.map(function (a) {
            return a.asKey();
          });
          var keysPresent = Object.keys(this._pools);
          var keysToPurge = keysPresent.filter(function (k) {
            return keysToKeep.indexOf(k) === -1;
          });
          return Promise.all(
            keysToPurge.map(function (key) {
              return _this._purgeKey(key);
            }),
          );
        };
        Pool2.prototype.has = function (address) {
          return address.asKey() in this._pools;
        };
        Pool2.prototype.activeResourceCount = function (address) {
          return this._activeResourceCounts[address.asKey()] || 0;
        };
        Pool2.prototype._acquire = function (address) {
          return __awaiter2(this, void 0, void 0, function () {
            var key, pool, poolState, resource_1, numConnections, resource;
            var _this = this;
            return __generator2(this, function (_a) {
              switch (_a.label) {
                case 0:
                  if (this._closed) {
                    throw (0, neo4j_driver_core_1.newError)(
                      'Pool is closed, it is no more able to serve requests.',
                    );
                  }
                  key = address.asKey();
                  pool = this._pools[key];
                  poolState = this._poolState[key];
                  if (!pool) {
                    pool = [];
                    poolState = new PoolState();
                    this._pools[key] = pool;
                    this._pendingCreates[key] = 0;
                    this._poolState[key] = poolState;
                  }
                  _a.label = 1;
                case 1:
                  if (!pool.length) return [3, 5];
                  resource_1 = pool.pop();
                  if (!this._validate(resource_1)) return [3, 2];
                  if (this._removeIdleObserver) {
                    this._removeIdleObserver(resource_1);
                  }
                  resourceAcquired(key, this._activeResourceCounts);
                  if (this._log.isDebugEnabled()) {
                    this._log.debug(
                      resource_1 + ' acquired from the pool ' + key,
                    );
                  }
                  return [2, resource_1];
                case 2:
                  return [4, this._destroy(resource_1)];
                case 3:
                  _a.sent();
                  _a.label = 4;
                case 4:
                  return [3, 1];
                case 5:
                  if (this._maxSize > 0) {
                    numConnections =
                      this.activeResourceCount(address) +
                      this._pendingCreates[key];
                    if (numConnections >= this._maxSize) {
                      return [2, null];
                    }
                  }
                  this._pendingCreates[key] = this._pendingCreates[key] + 1;
                  _a.label = 6;
                case 6:
                  _a.trys.push([6, , 8, 9]);
                  return [
                    4,
                    this._create(address, function (address2, resource2) {
                      return _this._release(poolState, address2, resource2);
                    }),
                  ];
                case 7:
                  resource = _a.sent();
                  resourceAcquired(key, this._activeResourceCounts);
                  if (this._log.isDebugEnabled()) {
                    this._log.debug(resource + ' created for the pool ' + key);
                  }
                  return [3, 9];
                case 8:
                  this._pendingCreates[key] = this._pendingCreates[key] - 1;
                  return [7];
                case 9:
                  return [2, resource];
              }
            });
          });
        };
        Pool2.prototype._release = function (poolState, address, resource) {
          return __awaiter2(this, void 0, void 0, function () {
            var key, pool;
            var _this = this;
            return __generator2(this, function (_a) {
              switch (_a.label) {
                case 0:
                  key = address.asKey();
                  pool = this._pools[key];
                  if (!(pool && poolState && poolState.isActive()))
                    return [3, 4];
                  if (!!this._validate(resource)) return [3, 2];
                  if (this._log.isDebugEnabled()) {
                    this._log.debug(
                      resource +
                        " destroyed and can't be released to the pool " +
                        key +
                        ' because it is not functional',
                    );
                  }
                  return [4, this._destroy(resource)];
                case 1:
                  _a.sent();
                  return [3, 3];
                case 2:
                  if (this._installIdleObserver) {
                    this._installIdleObserver(resource, {
                      onError: function (error) {
                        _this._log.debug(
                          'Idle connection ' +
                            resource +
                            ' destroyed because of error: ' +
                            error,
                        );
                        var pool2 = _this._pools[key];
                        if (pool2) {
                          _this._pools[key] = pool2.filter(function (r) {
                            return r !== resource;
                          });
                        }
                        _this._destroy(resource).catch(function () {});
                      },
                    });
                  }
                  pool.push(resource);
                  if (this._log.isDebugEnabled()) {
                    this._log.debug(resource + ' released to the pool ' + key);
                  }
                  _a.label = 3;
                case 3:
                  return [3, 6];
                case 4:
                  if (this._log.isDebugEnabled()) {
                    this._log.debug(
                      resource +
                        " destroyed and can't be released to the pool " +
                        key +
                        ' because pool has been purged',
                    );
                  }
                  return [4, this._destroy(resource)];
                case 5:
                  _a.sent();
                  _a.label = 6;
                case 6:
                  resourceReleased(key, this._activeResourceCounts);
                  this._processPendingAcquireRequests(address);
                  return [2];
              }
            });
          });
        };
        Pool2.prototype._purgeKey = function (key) {
          return __awaiter2(this, void 0, void 0, function () {
            var pool, poolState, resource;
            return __generator2(this, function (_a) {
              switch (_a.label) {
                case 0:
                  pool = this._pools[key] || [];
                  poolState = this._poolState[key] || new PoolState();
                  _a.label = 1;
                case 1:
                  if (!pool.length) return [3, 3];
                  resource = pool.pop();
                  if (this._removeIdleObserver) {
                    this._removeIdleObserver(resource);
                  }
                  return [4, this._destroy(resource)];
                case 2:
                  _a.sent();
                  return [3, 1];
                case 3:
                  poolState.close();
                  delete this._pools[key];
                  delete this._poolState[key];
                  return [2];
              }
            });
          });
        };
        Pool2.prototype._processPendingAcquireRequests = function (address) {
          var _this = this;
          var key = address.asKey();
          var requests = this._acquireRequests[key];
          var poolState = this._poolState[key];
          if (requests) {
            var pendingRequest_1 = requests.shift();
            if (pendingRequest_1) {
              this._acquire(address)
                .catch(function (error) {
                  pendingRequest_1.reject(error);
                  return null;
                })
                .then(function (resource) {
                  if (resource) {
                    if (pendingRequest_1.isCompleted()) {
                      _this._release(poolState, address, resource);
                    } else {
                      pendingRequest_1.resolve(resource);
                    }
                  }
                });
            } else {
              delete this._acquireRequests[key];
            }
          }
        };
        return Pool2;
      })();
      function resourceAcquired(key, activeResourceCounts) {
        var currentCount = activeResourceCounts[key] || 0;
        activeResourceCounts[key] = currentCount + 1;
      }
      function resourceReleased(key, activeResourceCounts) {
        var currentCount = activeResourceCounts[key] || 0;
        var nextCount = currentCount - 1;
        if (nextCount > 0) {
          activeResourceCounts[key] = nextCount;
        } else {
          delete activeResourceCounts[key];
        }
      }
      var PendingRequest = (function () {
        function PendingRequest2(key, resolve, reject, timeoutId, log) {
          this._key = key;
          this._resolve = resolve;
          this._reject = reject;
          this._timeoutId = timeoutId;
          this._log = log;
          this._completed = false;
        }
        PendingRequest2.prototype.isCompleted = function () {
          return this._completed;
        };
        PendingRequest2.prototype.resolve = function (resource) {
          if (this._completed) {
            return;
          }
          this._completed = true;
          clearTimeout(this._timeoutId);
          if (this._log.isDebugEnabled()) {
            this._log.debug(resource + ' acquired from the pool ' + this._key);
          }
          this._resolve(resource);
        };
        PendingRequest2.prototype.reject = function (error) {
          if (this._completed) {
            return;
          }
          this._completed = true;
          clearTimeout(this._timeoutId);
          this._reject(error);
        };
        return PendingRequest2;
      })();
      var PoolState = (function () {
        function PoolState2() {
          this._active = true;
        }
        PoolState2.prototype.isActive = function () {
          return this._active;
        };
        PoolState2.prototype.close = function () {
          this._active = false;
        };
        return PoolState2;
      })();
      exports.default = Pool;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/pool/index.js
  var require_pool2 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/pool/index.js'(exports) {
      'use strict';
      var __createBinding2 =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, 'default', {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o['default'] = v;
            });
      var __importStar2 =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== 'default' &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.DEFAULT_MAX_SIZE =
        exports.DEFAULT_ACQUISITION_TIMEOUT =
        exports.PoolConfig =
        exports.Pool =
          void 0;
      var pool_config_1 = __importStar2(require_pool_config());
      exports.PoolConfig = pool_config_1.default;
      Object.defineProperty(exports, 'DEFAULT_ACQUISITION_TIMEOUT', {
        enumerable: true,
        get: function () {
          return pool_config_1.DEFAULT_ACQUISITION_TIMEOUT;
        },
      });
      Object.defineProperty(exports, 'DEFAULT_MAX_SIZE', {
        enumerable: true,
        get: function () {
          return pool_config_1.DEFAULT_MAX_SIZE;
        },
      });
      var pool_1 = __importDefault2(require_pool());
      exports.Pool = pool_1.default;
      exports.default = pool_1.default;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/connection-provider/connection-provider-single.js
  var require_connection_provider_single = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/connection-provider/connection-provider-single.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, '__esModule', { value: true });
      var neo4j_driver_core_1 = require_lib();
      var SingleConnectionProvider = (function (_super) {
        __extends2(SingleConnectionProvider2, _super);
        function SingleConnectionProvider2(connection) {
          var _this = _super.call(this) || this;
          _this._connection = connection;
          return _this;
        }
        SingleConnectionProvider2.prototype.acquireConnection = function (_a) {
          var _b = _a === void 0 ? {} : _a,
            accessMode = _b.accessMode,
            database = _b.database,
            bookmarks = _b.bookmarks;
          var connection = this._connection;
          this._connection = null;
          return Promise.resolve(connection);
        };
        return SingleConnectionProvider2;
      })(neo4j_driver_core_1.ConnectionProvider);
      exports.default = SingleConnectionProvider;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/connection/connection.js
  var require_connection2 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/connection/connection.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var Connection = (function () {
        function Connection2(errorHandler) {
          this._errorHandler = errorHandler;
        }
        Object.defineProperty(Connection2.prototype, 'id', {
          get: function () {
            throw new Error('not implemented');
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(Connection2.prototype, 'databaseId', {
          get: function () {
            throw new Error('not implemented');
          },
          set: function (value) {
            throw new Error('not implemented');
          },
          enumerable: false,
          configurable: true,
        });
        Connection2.prototype.isOpen = function () {
          throw new Error('not implemented');
        };
        Connection2.prototype.protocol = function () {
          throw new Error('not implemented');
        };
        Object.defineProperty(Connection2.prototype, 'address', {
          get: function () {
            throw new Error('not implemented');
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(Connection2.prototype, 'version', {
          get: function () {
            throw new Error('not implemented');
          },
          set: function (value) {
            throw new Error('not implemented');
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(Connection2.prototype, 'server', {
          get: function () {
            throw new Error('not implemented');
          },
          enumerable: false,
          configurable: true,
        });
        Connection2.prototype.connect = function (userAgent, authToken) {
          throw new Error('not implemented');
        };
        Connection2.prototype.write = function (message, observer, flush) {
          throw new Error('not implemented');
        };
        Connection2.prototype.resetAndFlush = function () {
          throw new Error('not implemented');
        };
        Connection2.prototype.close = function () {
          throw new Error('not implemented');
        };
        Connection2.prototype.handleAndTransformError = function (
          error,
          address,
        ) {
          if (this._errorHandler) {
            return this._errorHandler.handleAndTransformError(error, address);
          }
          return error;
        };
        return Connection2;
      })();
      exports.default = Connection;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/connection/connection-channel.js
  var require_connection_channel = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/connection/connection-channel.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var __awaiter2 =
        (exports && exports.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator['throw'](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
      var __generator2 =
        (exports && exports.__generator) ||
        function (thisArg, body) {
          var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: [],
            },
            f,
            y,
            t,
            g;
          return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === 'function' &&
              (g[Symbol.iterator] = function () {
                return this;
              }),
            g
          );
          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f) throw new TypeError('Generator is already executing.');
            while (_)
              try {
                if (
                  ((f = 1),
                  y &&
                    (t =
                      op[0] & 2
                        ? y['return']
                        : op[0]
                        ? y['throw'] || ((t = y['return']) && t.call(y), 0)
                        : y.next) &&
                    !(t = t.call(y, op[1])).done)
                )
                  return t;
                if (((y = 0), t)) op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (
                      !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                      (op[0] === 6 || op[0] === 2)
                    ) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.createChannelConnection = void 0;
      var channel_1 = require_channel();
      var neo4j_driver_core_1 = require_lib();
      var connection_1 = __importDefault2(require_connection2());
      var bolt_1 = __importDefault2(require_bolt());
      var PROTOCOL_ERROR = neo4j_driver_core_1.error.PROTOCOL_ERROR;
      var Logger = neo4j_driver_core_1.internal.logger.Logger;
      var idGenerator = 0;
      function createChannelConnection(
        address,
        config2,
        errorHandler,
        log,
        serversideRouting,
        createChannel,
      ) {
        if (serversideRouting === void 0) {
          serversideRouting = null;
        }
        if (createChannel === void 0) {
          createChannel = function (channelConfig2) {
            return new channel_1.Channel(channelConfig2);
          };
        }
        var channelConfig = new channel_1.ChannelConfig(
          address,
          config2,
          errorHandler.errorCode(),
        );
        var channel = createChannel(channelConfig);
        return bolt_1.default
          .handshake(channel)
          .then(function (_a) {
            var version = _a.protocolVersion,
              consumeRemainingBuffer = _a.consumeRemainingBuffer;
            var chunker = new channel_1.Chunker(channel);
            var dechunker = new channel_1.Dechunker();
            var createProtocol = function (conn) {
              return bolt_1.default.create({
                version,
                channel,
                chunker,
                dechunker,
                disableLosslessIntegers: config2.disableLosslessIntegers,
                useBigInt: config2.useBigInt,
                serversideRouting,
                server: conn.server,
                log: conn.logger,
                observer: {
                  onPendingObserversChange:
                    conn._handleOngoingRequestsNumberChange.bind(conn),
                  onError: conn._handleFatalError.bind(conn),
                  onFailure: conn._resetOnFailure.bind(conn),
                  onProtocolError: conn._handleProtocolError.bind(conn),
                  onErrorApplyTransformation: function (error) {
                    return conn.handleAndTransformError(error, conn._address);
                  },
                },
              });
            };
            var connection = new ChannelConnection(
              channel,
              errorHandler,
              address,
              log,
              config2.disableLosslessIntegers,
              serversideRouting,
              chunker,
              createProtocol,
            );
            consumeRemainingBuffer(function (buffer) {
              return dechunker.write(buffer);
            });
            return connection;
          })
          .catch(function (reason) {
            return channel.close().then(function () {
              throw reason;
            });
          });
      }
      exports.createChannelConnection = createChannelConnection;
      var ChannelConnection = (function (_super) {
        __extends2(ChannelConnection2, _super);
        function ChannelConnection2(
          channel,
          errorHandler,
          address,
          log,
          disableLosslessIntegers,
          serversideRouting,
          chunker,
          protocolSupplier,
        ) {
          if (disableLosslessIntegers === void 0) {
            disableLosslessIntegers = false;
          }
          if (serversideRouting === void 0) {
            serversideRouting = null;
          }
          var _this = _super.call(this, errorHandler) || this;
          _this._id = idGenerator++;
          _this._address = address;
          _this._server = { address: address.asHostPort() };
          _this.creationTimestamp = Date.now();
          _this._disableLosslessIntegers = disableLosslessIntegers;
          _this._ch = channel;
          _this._chunker = chunker;
          _this._log = createConnectionLogger(_this, log);
          _this._serversideRouting = serversideRouting;
          _this._dbConnectionId = null;
          _this._protocol = protocolSupplier(_this);
          _this._isBroken = false;
          if (_this._log.isDebugEnabled()) {
            _this._log.debug('created towards ' + address);
          }
          return _this;
        }
        Object.defineProperty(ChannelConnection2.prototype, 'id', {
          get: function () {
            return this._id;
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(ChannelConnection2.prototype, 'databaseId', {
          get: function () {
            return this._dbConnectionId;
          },
          set: function (value) {
            this._dbConnectionId = value;
          },
          enumerable: false,
          configurable: true,
        });
        ChannelConnection2.prototype.connect = function (userAgent, authToken) {
          return this._initialize(userAgent, authToken);
        };
        ChannelConnection2.prototype._initialize = function (
          userAgent,
          authToken,
        ) {
          var _this = this;
          var self2 = this;
          return new Promise(function (resolve, reject) {
            _this._protocol.initialize({
              userAgent,
              authToken,
              onError: function (err) {
                return reject(err);
              },
              onComplete: function (metadata) {
                if (metadata) {
                  var serverVersion = metadata.server;
                  if (!_this.version || serverVersion) {
                    _this.version = serverVersion;
                  }
                  var dbConnectionId = metadata.connection_id;
                  if (!_this.databaseId) {
                    _this.databaseId = dbConnectionId;
                  }
                  if (metadata.hints) {
                    var receiveTimeoutRaw =
                      metadata.hints['connection.recv_timeout_seconds'];
                    if (
                      receiveTimeoutRaw !== null &&
                      receiveTimeoutRaw !== void 0
                    ) {
                      var receiveTimeoutInSeconds = (0,
                      neo4j_driver_core_1.toNumber)(receiveTimeoutRaw);
                      if (
                        Number.isInteger(receiveTimeoutInSeconds) &&
                        receiveTimeoutInSeconds > 0
                      ) {
                        _this._ch.setupReceiveTimeout(
                          receiveTimeoutInSeconds * 1e3,
                        );
                      } else {
                        _this._log.info(
                          'Server located at ' +
                            _this._address +
                            ' supplied an invalid connection receive timeout value (' +
                            receiveTimeoutInSeconds +
                            '). Please, verify the server configuration and status because this can be the symptom of a bigger issue.',
                        );
                      }
                    }
                  }
                }
                resolve(self2);
              },
            });
          });
        };
        ChannelConnection2.prototype.protocol = function () {
          return this._protocol;
        };
        Object.defineProperty(ChannelConnection2.prototype, 'address', {
          get: function () {
            return this._address;
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(ChannelConnection2.prototype, 'version', {
          get: function () {
            return this._server.version;
          },
          set: function (value) {
            this._server.version = value;
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(ChannelConnection2.prototype, 'server', {
          get: function () {
            return this._server;
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(ChannelConnection2.prototype, 'logger', {
          get: function () {
            return this._log;
          },
          enumerable: false,
          configurable: true,
        });
        ChannelConnection2.prototype._handleFatalError = function (error) {
          this._isBroken = true;
          this._error = this.handleAndTransformError(
            this._protocol.currentFailure || error,
            this._address,
          );
          if (this._log.isErrorEnabled()) {
            this._log.error(
              'experienced a fatal error caused by ' +
                this._error +
                ' (' +
                neo4j_driver_core_1.json.stringify(this._error) +
                ')',
            );
          }
          this._protocol.notifyFatalError(this._error);
        };
        ChannelConnection2.prototype._queueObserver = function (observer) {
          return this._protocol.queueObserverIfProtocolIsNotBroken(observer);
        };
        ChannelConnection2.prototype.hasOngoingObservableRequests =
          function () {
            return this._protocol.hasOngoingObservableRequests();
          };
        ChannelConnection2.prototype.resetAndFlush = function () {
          var _this = this;
          return new Promise(function (resolve, reject) {
            _this._protocol.reset({
              onError: function (error) {
                if (_this._isBroken) {
                  reject(error);
                } else {
                  var neo4jError = _this._handleProtocolError(
                    'Received FAILURE as a response for RESET: ' + error,
                  );
                  reject(neo4jError);
                }
              },
              onComplete: function () {
                resolve();
              },
            });
          });
        };
        ChannelConnection2.prototype._resetOnFailure = function () {
          var _this = this;
          if (!this.isOpen()) {
            return;
          }
          this._protocol.reset({
            onError: function () {
              _this._protocol.resetFailure();
            },
            onComplete: function () {
              _this._protocol.resetFailure();
            },
          });
        };
        ChannelConnection2.prototype._updateCurrentObserver = function () {
          this._protocol.updateCurrentObserver();
        };
        ChannelConnection2.prototype.isOpen = function () {
          return !this._isBroken && this._ch._open;
        };
        ChannelConnection2.prototype._handleOngoingRequestsNumberChange =
          function (requestsNumber) {
            if (requestsNumber === 0) {
              this._ch.stopReceiveTimeout();
            } else {
              this._ch.startReceiveTimeout();
            }
          };
        ChannelConnection2.prototype.close = function () {
          return __awaiter2(this, void 0, void 0, function () {
            return __generator2(this, function (_a) {
              switch (_a.label) {
                case 0:
                  if (this._log.isDebugEnabled()) {
                    this._log.debug('closing');
                  }
                  if (this._protocol && this.isOpen()) {
                    this._protocol.prepareToClose();
                  }
                  return [4, this._ch.close()];
                case 1:
                  _a.sent();
                  if (this._log.isDebugEnabled()) {
                    this._log.debug('closed');
                  }
                  return [2];
              }
            });
          });
        };
        ChannelConnection2.prototype.toString = function () {
          return (
            'Connection [' + this.id + '][' + (this.databaseId || '') + ']'
          );
        };
        ChannelConnection2.prototype._handleProtocolError = function (message) {
          this._protocol.resetFailure();
          this._updateCurrentObserver();
          var error = (0, neo4j_driver_core_1.newError)(
            message,
            PROTOCOL_ERROR,
          );
          this._handleFatalError(error);
          return error;
        };
        return ChannelConnection2;
      })(connection_1.default);
      exports.default = ChannelConnection;
      function createConnectionLogger(connection, logger) {
        return new Logger(logger._level, function (level, message) {
          return logger._loggerFunction(level, connection + ' ' + message);
        });
      }
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/connection/connection-delegate.js
  var require_connection_delegate = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/connection/connection-delegate.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var connection_1 = __importDefault2(require_connection2());
      var DelegateConnection = (function (_super) {
        __extends2(DelegateConnection2, _super);
        function DelegateConnection2(delegate, errorHandler) {
          var _this = _super.call(this, errorHandler) || this;
          if (errorHandler) {
            _this._originalErrorHandler = delegate._errorHandler;
            delegate._errorHandler = _this._errorHandler;
          }
          _this._delegate = delegate;
          return _this;
        }
        Object.defineProperty(DelegateConnection2.prototype, 'id', {
          get: function () {
            return this._delegate.id;
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(DelegateConnection2.prototype, 'databaseId', {
          get: function () {
            return this._delegate.databaseId;
          },
          set: function (value) {
            this._delegate.databaseId = value;
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(DelegateConnection2.prototype, 'server', {
          get: function () {
            return this._delegate.server;
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(DelegateConnection2.prototype, 'address', {
          get: function () {
            return this._delegate.address;
          },
          enumerable: false,
          configurable: true,
        });
        Object.defineProperty(DelegateConnection2.prototype, 'version', {
          get: function () {
            return this._delegate.version;
          },
          set: function (value) {
            this._delegate.version = value;
          },
          enumerable: false,
          configurable: true,
        });
        DelegateConnection2.prototype.isOpen = function () {
          return this._delegate.isOpen();
        };
        DelegateConnection2.prototype.protocol = function () {
          return this._delegate.protocol();
        };
        DelegateConnection2.prototype.connect = function (
          userAgent,
          authToken,
        ) {
          return this._delegate.connect(userAgent, authToken);
        };
        DelegateConnection2.prototype.write = function (
          message,
          observer,
          flush,
        ) {
          return this._delegate.write(message, observer, flush);
        };
        DelegateConnection2.prototype.resetAndFlush = function () {
          return this._delegate.resetAndFlush();
        };
        DelegateConnection2.prototype.close = function () {
          return this._delegate.close();
        };
        DelegateConnection2.prototype._release = function () {
          if (this._originalErrorHandler) {
            this._delegate._errorHandler = this._originalErrorHandler;
          }
          return this._delegate._release();
        };
        return DelegateConnection2;
      })(connection_1.default);
      exports.default = DelegateConnection;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/connection/connection-error-handler.js
  var require_connection_error_handler = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/connection/connection-error-handler.js'(
      exports,
    ) {
      'use strict';
      Object.defineProperty(exports, '__esModule', { value: true });
      var neo4j_driver_core_1 = require_lib();
      var SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;
      var SESSION_EXPIRED = neo4j_driver_core_1.error.SESSION_EXPIRED;
      var ConnectionErrorHandler = (function () {
        function ConnectionErrorHandler2(
          errorCode,
          handleUnavailability,
          handleWriteFailure,
          handleAuthorizationExpired,
        ) {
          this._errorCode = errorCode;
          this._handleUnavailability = handleUnavailability || noOpHandler;
          this._handleWriteFailure = handleWriteFailure || noOpHandler;
          this._handleAuthorizationExpired =
            handleAuthorizationExpired || noOpHandler;
        }
        ConnectionErrorHandler2.create = function (_a) {
          var errorCode = _a.errorCode,
            handleUnavailability = _a.handleUnavailability,
            handleWriteFailure = _a.handleWriteFailure,
            handleAuthorizationExpired = _a.handleAuthorizationExpired;
          return new ConnectionErrorHandler2(
            errorCode,
            handleUnavailability,
            handleWriteFailure,
            handleAuthorizationExpired,
          );
        };
        ConnectionErrorHandler2.prototype.errorCode = function () {
          return this._errorCode;
        };
        ConnectionErrorHandler2.prototype.handleAndTransformError = function (
          error,
          address,
        ) {
          if (isAutorizationExpiredError(error)) {
            return this._handleAuthorizationExpired(error, address);
          }
          if (isAvailabilityError(error)) {
            return this._handleUnavailability(error, address);
          }
          if (isFailureToWrite(error)) {
            return this._handleWriteFailure(error, address);
          }
          return error;
        };
        return ConnectionErrorHandler2;
      })();
      exports.default = ConnectionErrorHandler;
      function isAutorizationExpiredError(error) {
        return (
          error &&
          (error.code === 'Neo.ClientError.Security.AuthorizationExpired' ||
            error.code === 'Neo.ClientError.Security.TokenExpired')
        );
      }
      function isAvailabilityError(error) {
        if (error) {
          return (
            error.code === SESSION_EXPIRED ||
            error.code === SERVICE_UNAVAILABLE ||
            error.code === 'Neo.TransientError.General.DatabaseUnavailable'
          );
        }
        return false;
      }
      function isFailureToWrite(error) {
        if (error) {
          return (
            error.code === 'Neo.ClientError.Cluster.NotALeader' ||
            error.code === 'Neo.ClientError.General.ForbiddenOnReadOnlyDatabase'
          );
        }
        return false;
      }
      function noOpHandler(error) {
        return error;
      }
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/connection/index.js
  var require_connection3 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/connection/index.js'(
      exports,
    ) {
      'use strict';
      var __createBinding2 =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, 'default', {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o['default'] = v;
            });
      var __importStar2 =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== 'default' &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.createChannelConnection =
        exports.ConnectionErrorHandler =
        exports.DelegateConnection =
        exports.ChannelConnection =
        exports.Connection =
          void 0;
      var connection_1 = __importDefault2(require_connection2());
      exports.Connection = connection_1.default;
      var connection_channel_1 = __importStar2(require_connection_channel());
      exports.ChannelConnection = connection_channel_1.default;
      Object.defineProperty(exports, 'createChannelConnection', {
        enumerable: true,
        get: function () {
          return connection_channel_1.createChannelConnection;
        },
      });
      var connection_delegate_1 = __importDefault2(
        require_connection_delegate(),
      );
      exports.DelegateConnection = connection_delegate_1.default;
      var connection_error_handler_1 = __importDefault2(
        require_connection_error_handler(),
      );
      exports.ConnectionErrorHandler = connection_error_handler_1.default;
      exports.default = connection_1.default;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/connection-provider/connection-provider-pooled.js
  var require_connection_provider_pooled = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/connection-provider/connection-provider-pooled.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var __createBinding2 =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, 'default', {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o['default'] = v;
            });
      var __importStar2 =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== 'default' &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      var __awaiter2 =
        (exports && exports.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator['throw'](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
      var __generator2 =
        (exports && exports.__generator) ||
        function (thisArg, body) {
          var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: [],
            },
            f,
            y,
            t,
            g;
          return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === 'function' &&
              (g[Symbol.iterator] = function () {
                return this;
              }),
            g
          );
          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f) throw new TypeError('Generator is already executing.');
            while (_)
              try {
                if (
                  ((f = 1),
                  y &&
                    (t =
                      op[0] & 2
                        ? y['return']
                        : op[0]
                        ? y['throw'] || ((t = y['return']) && t.call(y), 0)
                        : y.next) &&
                    !(t = t.call(y, op[1])).done)
                )
                  return t;
                if (((y = 0), t)) op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (
                      !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                      (op[0] === 6 || op[0] === 2)
                    ) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var connection_1 = require_connection3();
      var pool_1 = __importStar2(require_pool2());
      var neo4j_driver_core_1 = require_lib();
      var SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;
      var PooledConnectionProvider = (function (_super) {
        __extends2(PooledConnectionProvider2, _super);
        function PooledConnectionProvider2(_a, createChannelConnectionHook) {
          var id = _a.id,
            config2 = _a.config,
            log = _a.log,
            userAgent = _a.userAgent,
            authToken = _a.authToken;
          if (createChannelConnectionHook === void 0) {
            createChannelConnectionHook = null;
          }
          var _this = _super.call(this) || this;
          _this._id = id;
          _this._config = config2;
          _this._log = log;
          _this._userAgent = userAgent;
          _this._authToken = authToken;
          _this._createChannelConnection =
            createChannelConnectionHook ||
            function (address) {
              return (0, connection_1.createChannelConnection)(
                address,
                _this._config,
                _this._createConnectionErrorHandler(),
                _this._log,
              );
            };
          _this._connectionPool = new pool_1.default({
            create: _this._createConnection.bind(_this),
            destroy: _this._destroyConnection.bind(_this),
            validate: _this._validateConnection.bind(_this),
            installIdleObserver:
              PooledConnectionProvider2._installIdleObserverOnConnection.bind(
                _this,
              ),
            removeIdleObserver:
              PooledConnectionProvider2._removeIdleObserverOnConnection.bind(
                _this,
              ),
            config: pool_1.PoolConfig.fromDriverConfig(config2),
            log: _this._log,
          });
          _this._openConnections = {};
          return _this;
        }
        PooledConnectionProvider2.prototype._createConnectionErrorHandler =
          function () {
            return new connection_1.ConnectionErrorHandler(SERVICE_UNAVAILABLE);
          };
        PooledConnectionProvider2.prototype._createConnection = function (
          address,
          release,
        ) {
          var _this = this;
          return this._createChannelConnection(address).then(function (
            connection,
          ) {
            connection._release = function () {
              return release(address, connection);
            };
            _this._openConnections[connection.id] = connection;
            return connection
              .connect(_this._userAgent, _this._authToken)
              .catch(function (error) {
                _this._destroyConnection(connection);
                throw error;
              });
          });
        };
        PooledConnectionProvider2.prototype._validateConnection = function (
          conn,
        ) {
          if (!conn.isOpen()) {
            return false;
          }
          var maxConnectionLifetime = this._config.maxConnectionLifetime;
          var lifetime = Date.now() - conn.creationTimestamp;
          return lifetime <= maxConnectionLifetime;
        };
        PooledConnectionProvider2.prototype._destroyConnection = function (
          conn,
        ) {
          delete this._openConnections[conn.id];
          return conn.close();
        };
        PooledConnectionProvider2.prototype.close = function () {
          return __awaiter2(this, void 0, void 0, function () {
            return __generator2(this, function (_a) {
              switch (_a.label) {
                case 0:
                  return [4, this._connectionPool.close()];
                case 1:
                  _a.sent();
                  return [
                    4,
                    Promise.all(
                      Object.values(this._openConnections).map(function (c) {
                        return c.close();
                      }),
                    ),
                  ];
                case 2:
                  _a.sent();
                  return [2];
              }
            });
          });
        };
        PooledConnectionProvider2._installIdleObserverOnConnection = function (
          conn,
          observer,
        ) {
          conn._queueObserver(observer);
        };
        PooledConnectionProvider2._removeIdleObserverOnConnection = function (
          conn,
        ) {
          conn._updateCurrentObserver();
        };
        return PooledConnectionProvider2;
      })(neo4j_driver_core_1.ConnectionProvider);
      exports.default = PooledConnectionProvider;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/connection-provider/connection-provider-direct.js
  var require_connection_provider_direct = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/connection-provider/connection-provider-direct.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var __awaiter2 =
        (exports && exports.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator['throw'](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
      var __generator2 =
        (exports && exports.__generator) ||
        function (thisArg, body) {
          var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: [],
            },
            f,
            y,
            t,
            g;
          return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === 'function' &&
              (g[Symbol.iterator] = function () {
                return this;
              }),
            g
          );
          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f) throw new TypeError('Generator is already executing.');
            while (_)
              try {
                if (
                  ((f = 1),
                  y &&
                    (t =
                      op[0] & 2
                        ? y['return']
                        : op[0]
                        ? y['throw'] || ((t = y['return']) && t.call(y), 0)
                        : y.next) &&
                    !(t = t.call(y, op[1])).done)
                )
                  return t;
                if (((y = 0), t)) op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (
                      !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                      (op[0] === 6 || op[0] === 2)
                    ) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var connection_provider_pooled_1 = __importDefault2(
        require_connection_provider_pooled(),
      );
      var connection_1 = require_connection3();
      var neo4j_driver_core_1 = require_lib();
      var _a = neo4j_driver_core_1.internal.constants;
      var BOLT_PROTOCOL_V3 = _a.BOLT_PROTOCOL_V3;
      var BOLT_PROTOCOL_V4_0 = _a.BOLT_PROTOCOL_V4_0;
      var BOLT_PROTOCOL_V4_4 = _a.BOLT_PROTOCOL_V4_4;
      var SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;
      var newError = neo4j_driver_core_1.error.newError;
      var DirectConnectionProvider = (function (_super) {
        __extends2(DirectConnectionProvider2, _super);
        function DirectConnectionProvider2(_a2) {
          var id = _a2.id,
            config2 = _a2.config,
            log = _a2.log,
            address = _a2.address,
            userAgent = _a2.userAgent,
            authToken = _a2.authToken;
          var _this =
            _super.call(this, {
              id,
              config: config2,
              log,
              userAgent,
              authToken,
            }) || this;
          _this._address = address;
          return _this;
        }
        DirectConnectionProvider2.prototype.acquireConnection = function (_a2) {
          var _this = this;
          var _b = _a2 === void 0 ? {} : _a2,
            accessMode = _b.accessMode,
            database = _b.database,
            bookmarks = _b.bookmarks;
          var databaseSpecificErrorHandler =
            connection_1.ConnectionErrorHandler.create({
              errorCode: SERVICE_UNAVAILABLE,
              handleAuthorizationExpired: function (error, address) {
                return _this._handleAuthorizationExpired(
                  error,
                  address,
                  database,
                );
              },
            });
          return this._connectionPool
            .acquire(this._address)
            .then(function (connection) {
              return new connection_1.DelegateConnection(
                connection,
                databaseSpecificErrorHandler,
              );
            });
        };
        DirectConnectionProvider2.prototype._handleAuthorizationExpired =
          function (error, address, database) {
            this._log.warn(
              'Direct driver ' +
                this._id +
                ' will close connection to ' +
                address +
                " for database '" +
                database +
                "' because of an error " +
                error.code +
                " '" +
                error.message +
                "'",
            );
            this._connectionPool.purge(address).catch(function () {});
            return error;
          };
        DirectConnectionProvider2.prototype._hasProtocolVersion = function (
          versionPredicate,
        ) {
          return __awaiter2(this, void 0, void 0, function () {
            var connection, protocolVersion;
            return __generator2(this, function (_a2) {
              switch (_a2.label) {
                case 0:
                  return [
                    4,
                    (0, connection_1.createChannelConnection)(
                      this._address,
                      this._config,
                      this._createConnectionErrorHandler(),
                      this._log,
                    ),
                  ];
                case 1:
                  connection = _a2.sent();
                  protocolVersion = connection.protocol()
                    ? connection.protocol().version
                    : null;
                  return [4, connection.close()];
                case 2:
                  _a2.sent();
                  if (protocolVersion) {
                    return [2, versionPredicate(protocolVersion)];
                  }
                  return [2, false];
              }
            });
          });
        };
        DirectConnectionProvider2.prototype.supportsMultiDb = function () {
          return __awaiter2(this, void 0, void 0, function () {
            return __generator2(this, function (_a2) {
              switch (_a2.label) {
                case 0:
                  return [
                    4,
                    this._hasProtocolVersion(function (version) {
                      return version >= BOLT_PROTOCOL_V4_0;
                    }),
                  ];
                case 1:
                  return [2, _a2.sent()];
              }
            });
          });
        };
        DirectConnectionProvider2.prototype.supportsTransactionConfig =
          function () {
            return __awaiter2(this, void 0, void 0, function () {
              return __generator2(this, function (_a2) {
                switch (_a2.label) {
                  case 0:
                    return [
                      4,
                      this._hasProtocolVersion(function (version) {
                        return version >= BOLT_PROTOCOL_V3;
                      }),
                    ];
                  case 1:
                    return [2, _a2.sent()];
                }
              });
            });
          };
        DirectConnectionProvider2.prototype.supportsUserImpersonation =
          function () {
            return __awaiter2(this, void 0, void 0, function () {
              return __generator2(this, function (_a2) {
                switch (_a2.label) {
                  case 0:
                    return [
                      4,
                      this._hasProtocolVersion(function (version) {
                        return version >= BOLT_PROTOCOL_V4_4;
                      }),
                    ];
                  case 1:
                    return [2, _a2.sent()];
                }
              });
            });
          };
        return DirectConnectionProvider2;
      })(connection_provider_pooled_1.default);
      exports.default = DirectConnectionProvider;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/rediscovery/routing-table.js
  var require_routing_table = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/rediscovery/routing-table.js'(
      exports,
    ) {
      'use strict';
      var __read2 =
        (exports && exports.__read) ||
        function (o, n) {
          var m = typeof Symbol === 'function' && o[Symbol.iterator];
          if (!m) return o;
          var i = m.call(o),
            r,
            ar = [],
            e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r && !r.done && (m = i['return'])) m.call(i);
            } finally {
              if (e) throw e.error;
            }
          }
          return ar;
        };
      var __spreadArray2 =
        (exports && exports.__spreadArray) ||
        function (to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
          return to.concat(ar || Array.prototype.slice.call(from));
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.createValidRoutingTable = void 0;
      var neo4j_driver_core_1 = require_lib();
      var _a = neo4j_driver_core_1.internal.constants;
      var WRITE = _a.ACCESS_MODE_WRITE;
      var READ = _a.ACCESS_MODE_READ;
      var ServerAddress =
        neo4j_driver_core_1.internal.serverAddress.ServerAddress;
      var PROTOCOL_ERROR = neo4j_driver_core_1.error.PROTOCOL_ERROR;
      var MIN_ROUTERS = 1;
      var RoutingTable = (function () {
        function RoutingTable2(_a2) {
          var _b = _a2 === void 0 ? {} : _a2,
            database = _b.database,
            routers = _b.routers,
            readers = _b.readers,
            writers = _b.writers,
            expirationTime = _b.expirationTime,
            ttl = _b.ttl;
          this.database = database || null;
          this.databaseName = database || 'default database';
          this.routers = routers || [];
          this.readers = readers || [];
          this.writers = writers || [];
          this.expirationTime =
            expirationTime || (0, neo4j_driver_core_1.int)(0);
          this.ttl = ttl;
        }
        RoutingTable2.fromRawRoutingTable = function (
          database,
          routerAddress,
          rawRoutingTable,
        ) {
          return createValidRoutingTable(
            database,
            routerAddress,
            rawRoutingTable,
          );
        };
        RoutingTable2.prototype.forget = function (address) {
          this.readers = removeFromArray(this.readers, address);
          this.writers = removeFromArray(this.writers, address);
        };
        RoutingTable2.prototype.forgetRouter = function (address) {
          this.routers = removeFromArray(this.routers, address);
        };
        RoutingTable2.prototype.forgetWriter = function (address) {
          this.writers = removeFromArray(this.writers, address);
        };
        RoutingTable2.prototype.isStaleFor = function (accessMode) {
          return (
            this.expirationTime.lessThan(Date.now()) ||
            this.routers.length < MIN_ROUTERS ||
            (accessMode === READ && this.readers.length === 0) ||
            (accessMode === WRITE && this.writers.length === 0)
          );
        };
        RoutingTable2.prototype.isExpiredFor = function (duration) {
          return this.expirationTime.add(duration).lessThan(Date.now());
        };
        RoutingTable2.prototype.allServers = function () {
          return __spreadArray2(
            __spreadArray2(
              __spreadArray2([], __read2(this.routers), false),
              __read2(this.readers),
              false,
            ),
            __read2(this.writers),
            false,
          );
        };
        RoutingTable2.prototype.toString = function () {
          return (
            'RoutingTable[' +
            ('database=' + this.databaseName + ', ') +
            ('expirationTime=' + this.expirationTime + ', ') +
            ('currentTime=' + Date.now() + ', ') +
            ('routers=[' + this.routers + '], ') +
            ('readers=[' + this.readers + '], ') +
            ('writers=[' + this.writers + ']]')
          );
        };
        return RoutingTable2;
      })();
      exports.default = RoutingTable;
      function removeFromArray(array, element) {
        return array.filter(function (item) {
          return item.asKey() !== element.asKey();
        });
      }
      function createValidRoutingTable(
        database,
        routerAddress,
        rawRoutingTable,
      ) {
        var ttl = rawRoutingTable.ttl;
        var expirationTime = calculateExpirationTime(
          rawRoutingTable,
          routerAddress,
        );
        var _a2 = parseServers(rawRoutingTable, routerAddress),
          routers = _a2.routers,
          readers = _a2.readers,
          writers = _a2.writers;
        assertNonEmpty(routers, 'routers', routerAddress);
        assertNonEmpty(readers, 'readers', routerAddress);
        return new RoutingTable({
          database: database || rawRoutingTable.db,
          routers,
          readers,
          writers,
          expirationTime,
          ttl,
        });
      }
      exports.createValidRoutingTable = createValidRoutingTable;
      function parseServers(rawRoutingTable, routerAddress) {
        try {
          var routers_1 = [];
          var readers_1 = [];
          var writers_1 = [];
          rawRoutingTable.servers.forEach(function (server) {
            var role = server.role;
            var addresses = server.addresses;
            if (role === 'ROUTE') {
              routers_1 = parseArray(addresses).map(function (address) {
                return ServerAddress.fromUrl(address);
              });
            } else if (role === 'WRITE') {
              writers_1 = parseArray(addresses).map(function (address) {
                return ServerAddress.fromUrl(address);
              });
            } else if (role === 'READ') {
              readers_1 = parseArray(addresses).map(function (address) {
                return ServerAddress.fromUrl(address);
              });
            }
          });
          return {
            routers: routers_1,
            readers: readers_1,
            writers: writers_1,
          };
        } catch (error) {
          throw (0, neo4j_driver_core_1.newError)(
            'Unable to parse servers entry from router ' +
              routerAddress +
              ' from addresses:\n' +
              neo4j_driver_core_1.json.stringify(rawRoutingTable.servers) +
              '\nError message: ' +
              error.message,
            PROTOCOL_ERROR,
          );
        }
      }
      function calculateExpirationTime(rawRoutingTable, routerAddress) {
        try {
          var now = (0, neo4j_driver_core_1.int)(Date.now());
          var expires = (0, neo4j_driver_core_1.int)(rawRoutingTable.ttl)
            .multiply(1e3)
            .add(now);
          if (expires.lessThan(now)) {
            return neo4j_driver_core_1.Integer.MAX_VALUE;
          }
          return expires;
        } catch (error) {
          throw (0, neo4j_driver_core_1.newError)(
            'Unable to parse TTL entry from router ' +
              routerAddress +
              ' from raw routing table:\n' +
              neo4j_driver_core_1.json.stringify(rawRoutingTable) +
              '\nError message: ' +
              error.message,
            PROTOCOL_ERROR,
          );
        }
      }
      function assertNonEmpty(
        serverAddressesArray,
        serversName,
        routerAddress,
      ) {
        if (serverAddressesArray.length === 0) {
          throw (0, neo4j_driver_core_1.newError)(
            'Received no ' + serversName + ' from router ' + routerAddress,
            PROTOCOL_ERROR,
          );
        }
      }
      function parseArray(addresses) {
        if (!Array.isArray(addresses)) {
          throw new TypeError('Array expected but got: ' + addresses);
        }
        return Array.from(addresses);
      }
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/rediscovery/rediscovery.js
  var require_rediscovery = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/rediscovery/rediscovery.js'(
      exports,
    ) {
      'use strict';
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var routing_table_1 = __importDefault2(require_routing_table());
      var bolt_1 = require_bolt();
      var neo4j_driver_core_1 = require_lib();
      var SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;
      var PROCEDURE_NOT_FOUND_CODE =
        'Neo.ClientError.Procedure.ProcedureNotFound';
      var DATABASE_NOT_FOUND_CODE = 'Neo.ClientError.Database.DatabaseNotFound';
      var Rediscovery = (function () {
        function Rediscovery2(routingContext) {
          this._routingContext = routingContext;
        }
        Rediscovery2.prototype.lookupRoutingTableOnRouter = function (
          session,
          database,
          routerAddress,
          impersonatedUser,
        ) {
          var _this = this;
          return session._acquireConnection(function (connection) {
            return _this
              ._requestRawRoutingTable(
                connection,
                session,
                database,
                routerAddress,
                impersonatedUser,
              )
              .then(function (rawRoutingTable) {
                if (rawRoutingTable.isNull) {
                  return null;
                }
                return routing_table_1.default.fromRawRoutingTable(
                  database,
                  routerAddress,
                  rawRoutingTable,
                );
              });
          });
        };
        Rediscovery2.prototype._requestRawRoutingTable = function (
          connection,
          session,
          database,
          routerAddress,
          impersonatedUser,
        ) {
          var _this = this;
          return new Promise(function (resolve, reject) {
            connection.protocol().requestRoutingInformation({
              routingContext: _this._routingContext,
              databaseName: database,
              impersonatedUser,
              sessionContext: {
                bookmark: session._lastBookmark,
                mode: session._mode,
                database: session._database,
                afterComplete: session._onComplete,
              },
              onCompleted: resolve,
              onError: function (error) {
                if (error.code === DATABASE_NOT_FOUND_CODE) {
                  reject(error);
                } else if (error.code === PROCEDURE_NOT_FOUND_CODE) {
                  reject(
                    (0, neo4j_driver_core_1.newError)(
                      'Server at ' +
                        routerAddress.asHostPort() +
                        " can't perform routing. Make sure you are connecting to a causal cluster",
                      SERVICE_UNAVAILABLE,
                    ),
                  );
                } else {
                  resolve(bolt_1.RawRoutingTable.ofNull());
                }
              },
            });
          });
        };
        return Rediscovery2;
      })();
      exports.default = Rediscovery;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/rediscovery/index.js
  var require_rediscovery2 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/rediscovery/index.js'(
      exports,
    ) {
      'use strict';
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.RoutingTable = exports.Rediscovery = void 0;
      var rediscovery_1 = __importDefault2(require_rediscovery());
      exports.Rediscovery = rediscovery_1.default;
      var routing_table_1 = __importDefault2(require_routing_table());
      exports.RoutingTable = routing_table_1.default;
      exports.default = rediscovery_1.default;
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/connection-provider/connection-provider-routing.js
  var require_connection_provider_routing = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/connection-provider/connection-provider-routing.js'(
      exports,
    ) {
      'use strict';
      var __extends2 =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics = function (d, b) {
            extendStatics =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (d2, b2) {
                  d2.__proto__ = b2;
                }) ||
              function (d2, b2) {
                for (var p in b2)
                  if (Object.prototype.hasOwnProperty.call(b2, p))
                    d2[p] = b2[p];
              };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== 'function' && b !== null)
              throw new TypeError(
                'Class extends value ' +
                  String(b) +
                  ' is not a constructor or null',
              );
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      var __assign2 =
        (exports && exports.__assign) ||
        function () {
          __assign2 =
            Object.assign ||
            function (t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                  if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
              }
              return t;
            };
          return __assign2.apply(this, arguments);
        };
      var __createBinding2 =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, 'default', {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o['default'] = v;
            });
      var __importStar2 =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== 'default' &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      var __awaiter2 =
        (exports && exports.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator['throw'](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
      var __generator2 =
        (exports && exports.__generator) ||
        function (thisArg, body) {
          var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: [],
            },
            f,
            y,
            t,
            g;
          return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === 'function' &&
              (g[Symbol.iterator] = function () {
                return this;
              }),
            g
          );
          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f) throw new TypeError('Generator is already executing.');
            while (_)
              try {
                if (
                  ((f = 1),
                  y &&
                    (t =
                      op[0] & 2
                        ? y['return']
                        : op[0]
                        ? y['throw'] || ((t = y['return']) && t.call(y), 0)
                        : y.next) &&
                    !(t = t.call(y, op[1])).done)
                )
                  return t;
                if (((y = 0), t)) op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (
                      !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                      (op[0] === 6 || op[0] === 2)
                    ) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
      var __values2 =
        (exports && exports.__values) ||
        function (o) {
          var s = typeof Symbol === 'function' && Symbol.iterator,
            m = s && o[s],
            i = 0;
          if (m) return m.call(o);
          if (o && typeof o.length === 'number')
            return {
              next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
              },
            };
          throw new TypeError(
            s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.',
          );
        };
      var __read2 =
        (exports && exports.__read) ||
        function (o, n) {
          var m = typeof Symbol === 'function' && o[Symbol.iterator];
          if (!m) return o;
          var i = m.call(o),
            r,
            ar = [],
            e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r && !r.done && (m = i['return'])) m.call(i);
            } finally {
              if (e) throw e.error;
            }
          }
          return ar;
        };
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      var neo4j_driver_core_1 = require_lib();
      var rediscovery_1 = __importStar2(require_rediscovery2());
      var channel_1 = require_channel();
      var connection_provider_single_1 = __importDefault2(
        require_connection_provider_single(),
      );
      var connection_provider_pooled_1 = __importDefault2(
        require_connection_provider_pooled(),
      );
      var load_balancing_1 = require_load_balancing();
      var connection_1 = require_connection3();
      var SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;
      var SESSION_EXPIRED = neo4j_driver_core_1.error.SESSION_EXPIRED;
      var Bookmark = neo4j_driver_core_1.internal.bookmark.Bookmark;
      var _a = neo4j_driver_core_1.internal.constants;
      var READ = _a.ACCESS_MODE_READ;
      var WRITE = _a.ACCESS_MODE_WRITE;
      var BOLT_PROTOCOL_V3 = _a.BOLT_PROTOCOL_V3;
      var BOLT_PROTOCOL_V4_0 = _a.BOLT_PROTOCOL_V4_0;
      var BOLT_PROTOCOL_V4_4 = _a.BOLT_PROTOCOL_V4_4;
      var UNAUTHORIZED_ERROR_CODE = 'Neo.ClientError.Security.Unauthorized';
      var DATABASE_NOT_FOUND_ERROR_CODE =
        'Neo.ClientError.Database.DatabaseNotFound';
      var SYSTEM_DB_NAME = 'system';
      var DEFAULT_DB_NAME = null;
      var DEFAULT_ROUTING_TABLE_PURGE_DELAY = (0, neo4j_driver_core_1.int)(3e4);
      var RoutingConnectionProvider = (function (_super) {
        __extends2(RoutingConnectionProvider2, _super);
        function RoutingConnectionProvider2(_a2) {
          var id = _a2.id,
            address = _a2.address,
            routingContext = _a2.routingContext,
            hostNameResolver = _a2.hostNameResolver,
            config2 = _a2.config,
            log = _a2.log,
            userAgent = _a2.userAgent,
            authToken = _a2.authToken,
            routingTablePurgeDelay = _a2.routingTablePurgeDelay;
          var _this =
            _super.call(
              this,
              { id, config: config2, log, userAgent, authToken },
              function (address2) {
                return (0, connection_1.createChannelConnection)(
                  address2,
                  _this._config,
                  _this._createConnectionErrorHandler(),
                  _this._log,
                  _this._routingContext,
                );
              },
            ) || this;
          _this._routingContext = __assign2(__assign2({}, routingContext), {
            address: address.toString(),
          });
          _this._seedRouter = address;
          _this._rediscovery = new rediscovery_1.default(_this._routingContext);
          _this._loadBalancingStrategy =
            new load_balancing_1.LeastConnectedLoadBalancingStrategy(
              _this._connectionPool,
            );
          _this._hostNameResolver = hostNameResolver;
          _this._dnsResolver = new channel_1.HostNameResolver();
          _this._log = log;
          _this._useSeedRouter = true;
          _this._routingTableRegistry = new RoutingTableRegistry(
            routingTablePurgeDelay
              ? (0, neo4j_driver_core_1.int)(routingTablePurgeDelay)
              : DEFAULT_ROUTING_TABLE_PURGE_DELAY,
          );
          return _this;
        }
        RoutingConnectionProvider2.prototype._createConnectionErrorHandler =
          function () {
            return new connection_1.ConnectionErrorHandler(SESSION_EXPIRED);
          };
        RoutingConnectionProvider2.prototype._handleUnavailability = function (
          error,
          address,
          database,
        ) {
          this._log.warn(
            'Routing driver ' +
              this._id +
              ' will forget ' +
              address +
              " for database '" +
              database +
              "' because of an error " +
              error.code +
              " '" +
              error.message +
              "'",
          );
          this.forget(address, database || DEFAULT_DB_NAME);
          return error;
        };
        RoutingConnectionProvider2.prototype._handleAuthorizationExpired =
          function (error, address, database) {
            this._log.warn(
              'Routing driver ' +
                this._id +
                ' will close connections to ' +
                address +
                " for database '" +
                database +
                "' because of an error " +
                error.code +
                " '" +
                error.message +
                "'",
            );
            this._connectionPool.purge(address).catch(function () {});
            return error;
          };
        RoutingConnectionProvider2.prototype._handleWriteFailure = function (
          error,
          address,
          database,
        ) {
          this._log.warn(
            'Routing driver ' +
              this._id +
              ' will forget writer ' +
              address +
              " for database '" +
              database +
              "' because of an error " +
              error.code +
              " '" +
              error.message +
              "'",
          );
          this.forgetWriter(address, database || DEFAULT_DB_NAME);
          return (0, neo4j_driver_core_1.newError)(
            'No longer possible to write to server at ' + address,
            SESSION_EXPIRED,
          );
        };
        RoutingConnectionProvider2.prototype.acquireConnection = function (
          _a2,
        ) {
          var _b = _a2 === void 0 ? {} : _a2,
            accessMode = _b.accessMode,
            database = _b.database,
            bookmarks = _b.bookmarks,
            impersonatedUser = _b.impersonatedUser,
            onDatabaseNameResolved = _b.onDatabaseNameResolved;
          return __awaiter2(this, void 0, void 0, function () {
            var name,
              address,
              context2,
              databaseSpecificErrorHandler,
              routingTable,
              connection,
              error_1,
              transformed;
            var _this = this;
            return __generator2(this, function (_c) {
              switch (_c.label) {
                case 0:
                  context2 = { database: database || DEFAULT_DB_NAME };
                  databaseSpecificErrorHandler =
                    new connection_1.ConnectionErrorHandler(
                      SESSION_EXPIRED,
                      function (error, address2) {
                        return _this._handleUnavailability(
                          error,
                          address2,
                          context2.database,
                        );
                      },
                      function (error, address2) {
                        return _this._handleWriteFailure(
                          error,
                          address2,
                          context2.database,
                        );
                      },
                      function (error, address2) {
                        return _this._handleAuthorizationExpired(
                          error,
                          address2,
                          context2.database,
                        );
                      },
                    );
                  return [
                    4,
                    this._freshRoutingTable({
                      accessMode,
                      database: context2.database,
                      bookmark: bookmarks,
                      impersonatedUser,
                      onDatabaseNameResolved: function (databaseName) {
                        context2.database = context2.database || databaseName;
                        if (onDatabaseNameResolved) {
                          onDatabaseNameResolved(databaseName);
                        }
                      },
                    }),
                  ];
                case 1:
                  routingTable = _c.sent();
                  if (accessMode === READ) {
                    address = this._loadBalancingStrategy.selectReader(
                      routingTable.readers,
                    );
                    name = 'read';
                  } else if (accessMode === WRITE) {
                    address = this._loadBalancingStrategy.selectWriter(
                      routingTable.writers,
                    );
                    name = 'write';
                  } else {
                    throw (0, neo4j_driver_core_1.newError)(
                      'Illegal mode ' + accessMode,
                    );
                  }
                  if (!address) {
                    throw (0, neo4j_driver_core_1.newError)(
                      'Failed to obtain connection towards ' +
                        name +
                        ' server. Known routing table is: ' +
                        routingTable,
                      SESSION_EXPIRED,
                    );
                  }
                  _c.label = 2;
                case 2:
                  _c.trys.push([2, 4, , 5]);
                  return [
                    4,
                    this._acquireConnectionToServer(
                      address,
                      name,
                      routingTable,
                    ),
                  ];
                case 3:
                  connection = _c.sent();
                  return [
                    2,
                    new connection_1.DelegateConnection(
                      connection,
                      databaseSpecificErrorHandler,
                    ),
                  ];
                case 4:
                  error_1 = _c.sent();
                  transformed =
                    databaseSpecificErrorHandler.handleAndTransformError(
                      error_1,
                      address,
                    );
                  throw transformed;
                case 5:
                  return [2];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype._hasProtocolVersion = function (
          versionPredicate,
        ) {
          return __awaiter2(this, void 0, void 0, function () {
            var addresses, lastError, i, connection, protocolVersion, error_2;
            return __generator2(this, function (_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this._resolveSeedRouter(this._seedRouter)];
                case 1:
                  addresses = _a2.sent();
                  i = 0;
                  _a2.label = 2;
                case 2:
                  if (!(i < addresses.length)) return [3, 8];
                  _a2.label = 3;
                case 3:
                  _a2.trys.push([3, 6, , 7]);
                  return [
                    4,
                    (0, connection_1.createChannelConnection)(
                      addresses[i],
                      this._config,
                      this._createConnectionErrorHandler(),
                      this._log,
                    ),
                  ];
                case 4:
                  connection = _a2.sent();
                  protocolVersion = connection.protocol()
                    ? connection.protocol().version
                    : null;
                  return [4, connection.close()];
                case 5:
                  _a2.sent();
                  if (protocolVersion) {
                    return [2, versionPredicate(protocolVersion)];
                  }
                  return [2, false];
                case 6:
                  error_2 = _a2.sent();
                  lastError = error_2;
                  return [3, 7];
                case 7:
                  i++;
                  return [3, 2];
                case 8:
                  if (lastError) {
                    throw lastError;
                  }
                  return [2, false];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype.supportsMultiDb = function () {
          return __awaiter2(this, void 0, void 0, function () {
            return __generator2(this, function (_a2) {
              switch (_a2.label) {
                case 0:
                  return [
                    4,
                    this._hasProtocolVersion(function (version) {
                      return version >= BOLT_PROTOCOL_V4_0;
                    }),
                  ];
                case 1:
                  return [2, _a2.sent()];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype.supportsTransactionConfig =
          function () {
            return __awaiter2(this, void 0, void 0, function () {
              return __generator2(this, function (_a2) {
                switch (_a2.label) {
                  case 0:
                    return [
                      4,
                      this._hasProtocolVersion(function (version) {
                        return version >= BOLT_PROTOCOL_V3;
                      }),
                    ];
                  case 1:
                    return [2, _a2.sent()];
                }
              });
            });
          };
        RoutingConnectionProvider2.prototype.supportsUserImpersonation =
          function () {
            return __awaiter2(this, void 0, void 0, function () {
              return __generator2(this, function (_a2) {
                switch (_a2.label) {
                  case 0:
                    return [
                      4,
                      this._hasProtocolVersion(function (version) {
                        return version >= BOLT_PROTOCOL_V4_4;
                      }),
                    ];
                  case 1:
                    return [2, _a2.sent()];
                }
              });
            });
          };
        RoutingConnectionProvider2.prototype.forget = function (
          address,
          database,
        ) {
          this._routingTableRegistry.apply(database, {
            applyWhenExists: function (routingTable) {
              return routingTable.forget(address);
            },
          });
          this._connectionPool.purge(address).catch(function () {});
        };
        RoutingConnectionProvider2.prototype.forgetWriter = function (
          address,
          database,
        ) {
          this._routingTableRegistry.apply(database, {
            applyWhenExists: function (routingTable) {
              return routingTable.forgetWriter(address);
            },
          });
        };
        RoutingConnectionProvider2.prototype._acquireConnectionToServer =
          function (address, serverName, routingTable) {
            return this._connectionPool.acquire(address);
          };
        RoutingConnectionProvider2.prototype._freshRoutingTable = function (
          _a2,
        ) {
          var _b = _a2 === void 0 ? {} : _a2,
            accessMode = _b.accessMode,
            database = _b.database,
            bookmark = _b.bookmark,
            impersonatedUser = _b.impersonatedUser,
            onDatabaseNameResolved = _b.onDatabaseNameResolved;
          var currentRoutingTable = this._routingTableRegistry.get(
            database,
            function () {
              return new rediscovery_1.RoutingTable({ database });
            },
          );
          if (!currentRoutingTable.isStaleFor(accessMode)) {
            return currentRoutingTable;
          }
          this._log.info(
            'Routing table is stale for database: "' +
              database +
              '" and access mode: "' +
              accessMode +
              '": ' +
              currentRoutingTable,
          );
          return this._refreshRoutingTable(
            currentRoutingTable,
            bookmark,
            impersonatedUser,
            onDatabaseNameResolved,
          );
        };
        RoutingConnectionProvider2.prototype._refreshRoutingTable = function (
          currentRoutingTable,
          bookmark,
          impersonatedUser,
          onDatabaseNameResolved,
        ) {
          var knownRouters = currentRoutingTable.routers;
          if (this._useSeedRouter) {
            return this._fetchRoutingTableFromSeedRouterFallbackToKnownRouters(
              knownRouters,
              currentRoutingTable,
              bookmark,
              impersonatedUser,
              onDatabaseNameResolved,
            );
          }
          return this._fetchRoutingTableFromKnownRoutersFallbackToSeedRouter(
            knownRouters,
            currentRoutingTable,
            bookmark,
            impersonatedUser,
            onDatabaseNameResolved,
          );
        };
        RoutingConnectionProvider2.prototype._fetchRoutingTableFromSeedRouterFallbackToKnownRouters =
          function (
            knownRouters,
            currentRoutingTable,
            bookmark,
            impersonatedUser,
            onDatabaseNameResolved,
          ) {
            return __awaiter2(this, void 0, void 0, function () {
              var seenRouters, newRoutingTable;
              return __generator2(this, function (_a2) {
                switch (_a2.label) {
                  case 0:
                    seenRouters = [];
                    return [
                      4,
                      this._fetchRoutingTableUsingSeedRouter(
                        seenRouters,
                        this._seedRouter,
                        currentRoutingTable,
                        bookmark,
                        impersonatedUser,
                      ),
                    ];
                  case 1:
                    newRoutingTable = _a2.sent();
                    if (!newRoutingTable) return [3, 2];
                    this._useSeedRouter = false;
                    return [3, 4];
                  case 2:
                    return [
                      4,
                      this._fetchRoutingTableUsingKnownRouters(
                        knownRouters,
                        currentRoutingTable,
                        bookmark,
                        impersonatedUser,
                      ),
                    ];
                  case 3:
                    newRoutingTable = _a2.sent();
                    _a2.label = 4;
                  case 4:
                    return [
                      4,
                      this._applyRoutingTableIfPossible(
                        currentRoutingTable,
                        newRoutingTable,
                        onDatabaseNameResolved,
                      ),
                    ];
                  case 5:
                    return [2, _a2.sent()];
                }
              });
            });
          };
        RoutingConnectionProvider2.prototype._fetchRoutingTableFromKnownRoutersFallbackToSeedRouter =
          function (
            knownRouters,
            currentRoutingTable,
            bookmark,
            impersonatedUser,
            onDatabaseNameResolved,
          ) {
            return __awaiter2(this, void 0, void 0, function () {
              var newRoutingTable;
              return __generator2(this, function (_a2) {
                switch (_a2.label) {
                  case 0:
                    return [
                      4,
                      this._fetchRoutingTableUsingKnownRouters(
                        knownRouters,
                        currentRoutingTable,
                        bookmark,
                        impersonatedUser,
                      ),
                    ];
                  case 1:
                    newRoutingTable = _a2.sent();
                    if (!!newRoutingTable) return [3, 3];
                    return [
                      4,
                      this._fetchRoutingTableUsingSeedRouter(
                        knownRouters,
                        this._seedRouter,
                        currentRoutingTable,
                        bookmark,
                        impersonatedUser,
                      ),
                    ];
                  case 2:
                    newRoutingTable = _a2.sent();
                    _a2.label = 3;
                  case 3:
                    return [
                      4,
                      this._applyRoutingTableIfPossible(
                        currentRoutingTable,
                        newRoutingTable,
                        onDatabaseNameResolved,
                      ),
                    ];
                  case 4:
                    return [2, _a2.sent()];
                }
              });
            });
          };
        RoutingConnectionProvider2.prototype._fetchRoutingTableUsingKnownRouters =
          function (
            knownRouters,
            currentRoutingTable,
            bookmark,
            impersonatedUser,
          ) {
            return __awaiter2(this, void 0, void 0, function () {
              var newRoutingTable, lastRouterIndex;
              return __generator2(this, function (_a2) {
                switch (_a2.label) {
                  case 0:
                    return [
                      4,
                      this._fetchRoutingTable(
                        knownRouters,
                        currentRoutingTable,
                        bookmark,
                        impersonatedUser,
                      ),
                    ];
                  case 1:
                    newRoutingTable = _a2.sent();
                    if (newRoutingTable) {
                      return [2, newRoutingTable];
                    }
                    lastRouterIndex = knownRouters.length - 1;
                    RoutingConnectionProvider2._forgetRouter(
                      currentRoutingTable,
                      knownRouters,
                      lastRouterIndex,
                    );
                    return [2, null];
                }
              });
            });
          };
        RoutingConnectionProvider2.prototype._fetchRoutingTableUsingSeedRouter =
          function (
            seenRouters,
            seedRouter,
            routingTable,
            bookmark,
            impersonatedUser,
          ) {
            return __awaiter2(this, void 0, void 0, function () {
              var resolvedAddresses, newAddresses;
              return __generator2(this, function (_a2) {
                switch (_a2.label) {
                  case 0:
                    return [4, this._resolveSeedRouter(seedRouter)];
                  case 1:
                    resolvedAddresses = _a2.sent();
                    newAddresses = resolvedAddresses.filter(function (address) {
                      return seenRouters.indexOf(address) < 0;
                    });
                    return [
                      4,
                      this._fetchRoutingTable(
                        newAddresses,
                        routingTable,
                        bookmark,
                        impersonatedUser,
                      ),
                    ];
                  case 2:
                    return [2, _a2.sent()];
                }
              });
            });
          };
        RoutingConnectionProvider2.prototype._resolveSeedRouter = function (
          seedRouter,
        ) {
          return __awaiter2(this, void 0, void 0, function () {
            var resolvedAddresses, dnsResolvedAddresses;
            var _this = this;
            return __generator2(this, function (_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, this._hostNameResolver.resolve(seedRouter)];
                case 1:
                  resolvedAddresses = _a2.sent();
                  return [
                    4,
                    Promise.all(
                      resolvedAddresses.map(function (address) {
                        return _this._dnsResolver.resolve(address);
                      }),
                    ),
                  ];
                case 2:
                  dnsResolvedAddresses = _a2.sent();
                  return [2, [].concat.apply([], dnsResolvedAddresses)];
              }
            });
          });
        };
        RoutingConnectionProvider2.prototype._fetchRoutingTable = function (
          routerAddresses,
          routingTable,
          bookmark,
          impersonatedUser,
        ) {
          var _this = this;
          return routerAddresses.reduce(function (
            refreshedTablePromise,
            currentRouter,
            currentIndex,
          ) {
            return __awaiter2(_this, void 0, void 0, function () {
              var newRoutingTable, previousRouterIndex, session, error_3;
              return __generator2(this, function (_a2) {
                switch (_a2.label) {
                  case 0:
                    return [4, refreshedTablePromise];
                  case 1:
                    newRoutingTable = _a2.sent();
                    if (newRoutingTable) {
                      return [2, newRoutingTable];
                    } else {
                      previousRouterIndex = currentIndex - 1;
                      RoutingConnectionProvider2._forgetRouter(
                        routingTable,
                        routerAddresses,
                        previousRouterIndex,
                      );
                    }
                    return [
                      4,
                      this._createSessionForRediscovery(
                        currentRouter,
                        bookmark,
                        impersonatedUser,
                      ),
                    ];
                  case 2:
                    session = _a2.sent();
                    if (!session) return [3, 8];
                    _a2.label = 3;
                  case 3:
                    _a2.trys.push([3, 5, 6, 7]);
                    return [
                      4,
                      this._rediscovery.lookupRoutingTableOnRouter(
                        session,
                        routingTable.database,
                        currentRouter,
                        impersonatedUser,
                      ),
                    ];
                  case 4:
                    return [2, _a2.sent()];
                  case 5:
                    error_3 = _a2.sent();
                    if (
                      error_3 &&
                      error_3.code === DATABASE_NOT_FOUND_ERROR_CODE
                    ) {
                      throw error_3;
                    }
                    this._log.warn(
                      'unable to fetch routing table because of an error ' +
                        error_3,
                    );
                    return [2, null];
                  case 6:
                    session.close();
                    return [7];
                  case 7:
                    return [3, 9];
                  case 8:
                    return [2, null];
                  case 9:
                    return [2];
                }
              });
            });
          },
          Promise.resolve(null));
        };
        RoutingConnectionProvider2.prototype._createSessionForRediscovery =
          function (routerAddress, bookmark, impersonatedUser) {
            return __awaiter2(this, void 0, void 0, function () {
              var connection,
                databaseSpecificErrorHandler,
                connectionProvider,
                protocolVersion,
                error_4;
              var _this = this;
              return __generator2(this, function (_a2) {
                switch (_a2.label) {
                  case 0:
                    _a2.trys.push([0, 2, , 3]);
                    return [4, this._connectionPool.acquire(routerAddress)];
                  case 1:
                    connection = _a2.sent();
                    databaseSpecificErrorHandler =
                      connection_1.ConnectionErrorHandler.create({
                        errorCode: SESSION_EXPIRED,
                        handleAuthorizationExpired: function (error, address) {
                          return _this._handleAuthorizationExpired(
                            error,
                            address,
                          );
                        },
                      });
                    connectionProvider =
                      new connection_provider_single_1.default(
                        new connection_1.DelegateConnection(
                          connection,
                          databaseSpecificErrorHandler,
                        ),
                      );
                    protocolVersion = connection.protocol().version;
                    if (protocolVersion < 4) {
                      return [
                        2,
                        new neo4j_driver_core_1.Session({
                          mode: WRITE,
                          bookmark: Bookmark.empty(),
                          connectionProvider,
                        }),
                      ];
                    }
                    return [
                      2,
                      new neo4j_driver_core_1.Session({
                        mode: READ,
                        database: SYSTEM_DB_NAME,
                        bookmark,
                        connectionProvider,
                        impersonatedUser,
                      }),
                    ];
                  case 2:
                    error_4 = _a2.sent();
                    if (error_4 && error_4.code === UNAUTHORIZED_ERROR_CODE) {
                      throw error_4;
                    }
                    return [2, null];
                  case 3:
                    return [2];
                }
              });
            });
          };
        RoutingConnectionProvider2.prototype._applyRoutingTableIfPossible =
          function (
            currentRoutingTable,
            newRoutingTable,
            onDatabaseNameResolved,
          ) {
            return __awaiter2(this, void 0, void 0, function () {
              return __generator2(this, function (_a2) {
                switch (_a2.label) {
                  case 0:
                    if (!newRoutingTable) {
                      throw (0, neo4j_driver_core_1.newError)(
                        'Could not perform discovery. No routing servers available. Known routing table: ' +
                          currentRoutingTable,
                        SERVICE_UNAVAILABLE,
                      );
                    }
                    if (newRoutingTable.writers.length === 0) {
                      this._useSeedRouter = true;
                    }
                    return [
                      4,
                      this._updateRoutingTable(
                        newRoutingTable,
                        onDatabaseNameResolved,
                      ),
                    ];
                  case 1:
                    _a2.sent();
                    return [2, newRoutingTable];
                }
              });
            });
          };
        RoutingConnectionProvider2.prototype._updateRoutingTable = function (
          newRoutingTable,
          onDatabaseNameResolved,
        ) {
          return __awaiter2(this, void 0, void 0, function () {
            return __generator2(this, function (_a2) {
              switch (_a2.label) {
                case 0:
                  return [
                    4,
                    this._connectionPool.keepAll(newRoutingTable.allServers()),
                  ];
                case 1:
                  _a2.sent();
                  this._routingTableRegistry.removeExpired();
                  this._routingTableRegistry.register(newRoutingTable);
                  onDatabaseNameResolved(newRoutingTable.database);
                  this._log.info('Updated routing table ' + newRoutingTable);
                  return [2];
              }
            });
          });
        };
        RoutingConnectionProvider2._forgetRouter = function (
          routingTable,
          routersArray,
          routerIndex,
        ) {
          var address = routersArray[routerIndex];
          if (routingTable && address) {
            routingTable.forgetRouter(address);
          }
        };
        return RoutingConnectionProvider2;
      })(connection_provider_pooled_1.default);
      exports.default = RoutingConnectionProvider;
      var RoutingTableRegistry = (function () {
        function RoutingTableRegistry2(routingTablePurgeDelay) {
          this._tables = /* @__PURE__ */ new Map();
          this._routingTablePurgeDelay = routingTablePurgeDelay;
        }
        RoutingTableRegistry2.prototype.register = function (table) {
          this._tables.set(table.database, table);
          return this;
        };
        RoutingTableRegistry2.prototype.apply = function (database, _a2) {
          var _b = _a2 === void 0 ? {} : _a2,
            applyWhenExists = _b.applyWhenExists,
            _c = _b.applyWhenDontExists,
            applyWhenDontExists = _c === void 0 ? function () {} : _c;
          if (this._tables.has(database)) {
            applyWhenExists(this._tables.get(database));
          } else if (typeof database === 'string' || database === null) {
            applyWhenDontExists();
          } else {
            this._forEach(applyWhenExists);
          }
          return this;
        };
        RoutingTableRegistry2.prototype.get = function (
          database,
          defaultSupplier,
        ) {
          if (this._tables.has(database)) {
            return this._tables.get(database);
          }
          return typeof defaultSupplier === 'function'
            ? defaultSupplier()
            : defaultSupplier;
        };
        RoutingTableRegistry2.prototype.removeExpired = function () {
          var _this = this;
          return this._removeIf(function (value) {
            return value.isExpiredFor(_this._routingTablePurgeDelay);
          });
        };
        RoutingTableRegistry2.prototype._forEach = function (apply) {
          var e_1, _a2;
          try {
            for (
              var _b = __values2(this._tables), _c = _b.next();
              !_c.done;
              _c = _b.next()
            ) {
              var _d = __read2(_c.value, 2),
                value = _d[1];
              apply(value);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
          return this;
        };
        RoutingTableRegistry2.prototype._remove = function (key) {
          this._tables.delete(key);
          return this;
        };
        RoutingTableRegistry2.prototype._removeIf = function (predicate) {
          var e_2, _a2;
          try {
            for (
              var _b = __values2(this._tables), _c = _b.next();
              !_c.done;
              _c = _b.next()
            ) {
              var _d = __read2(_c.value, 2),
                key = _d[0],
                value = _d[1];
              if (predicate(value)) {
                this._remove(key);
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
            } finally {
              if (e_2) throw e_2.error;
            }
          }
          return this;
        };
        return RoutingTableRegistry2;
      })();
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/connection-provider/index.js
  var require_connection_provider2 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/connection-provider/index.js'(
      exports,
    ) {
      'use strict';
      var __importDefault2 =
        (exports && exports.__importDefault) ||
        function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.RoutingConnectionProvider =
        exports.DirectConnectionProvider =
        exports.PooledConnectionProvider =
        exports.SingleConnectionProvider =
          void 0;
      var connection_provider_single_1 = require_connection_provider_single();
      Object.defineProperty(exports, 'SingleConnectionProvider', {
        enumerable: true,
        get: function () {
          return __importDefault2(connection_provider_single_1).default;
        },
      });
      var connection_provider_pooled_1 = require_connection_provider_pooled();
      Object.defineProperty(exports, 'PooledConnectionProvider', {
        enumerable: true,
        get: function () {
          return __importDefault2(connection_provider_pooled_1).default;
        },
      });
      var connection_provider_direct_1 = require_connection_provider_direct();
      Object.defineProperty(exports, 'DirectConnectionProvider', {
        enumerable: true,
        get: function () {
          return __importDefault2(connection_provider_direct_1).default;
        },
      });
      var connection_provider_routing_1 = require_connection_provider_routing();
      Object.defineProperty(exports, 'RoutingConnectionProvider', {
        enumerable: true,
        get: function () {
          return __importDefault2(connection_provider_routing_1).default;
        },
      });
    },
  });

  // node_modules/neo4j-driver-bolt-connection/lib/index.js
  var require_lib2 = __commonJS({
    'node_modules/neo4j-driver-bolt-connection/lib/index.js'(exports) {
      'use strict';
      var __createBinding2 =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, 'default', {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o['default'] = v;
            });
      var __importStar2 =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== 'default' &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      var __exportStar2 =
        (exports && exports.__exportStar) ||
        function (m, exports2) {
          for (var p in m)
            if (
              p !== 'default' &&
              !Object.prototype.hasOwnProperty.call(exports2, p)
            )
              __createBinding2(exports2, m, p);
        };
      Object.defineProperty(exports, '__esModule', { value: true });
      exports.pool =
        exports.packstream =
        exports.channel =
        exports.buf =
        exports.bolt =
        exports.loadBalancing =
          void 0;
      exports.loadBalancing = __importStar2(require_load_balancing());
      exports.bolt = __importStar2(require_bolt());
      exports.buf = __importStar2(require_buf());
      exports.channel = __importStar2(require_channel());
      exports.packstream = __importStar2(require_packstream());
      exports.pool = __importStar2(require_pool2());
      __exportStar2(require_connection_provider2(), exports);
    },
  });

  // node_modules/neo4j-driver/lib/index.js
  var require_lib3 = __commonJS({
    'node_modules/neo4j-driver/lib/index.js'(exports) {
      'use strict';
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, '__esModule', {
        value: true,
      });
      exports.driver = driver;
      Object.defineProperty(exports, 'Driver', {
        enumerable: true,
        get: function get() {
          return _driver.Driver;
        },
      });
      Object.defineProperty(exports, 'Neo4jError', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.Neo4jError;
        },
      });
      Object.defineProperty(exports, 'error', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.error;
        },
      });
      Object.defineProperty(exports, 'Integer', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.Integer;
        },
      });
      Object.defineProperty(exports, 'int', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore['int'];
        },
      });
      Object.defineProperty(exports, 'isInt', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.isInt;
        },
      });
      Object.defineProperty(exports, 'isPoint', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.isPoint;
        },
      });
      Object.defineProperty(exports, 'Point', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.Point;
        },
      });
      Object.defineProperty(exports, 'Date', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.Date;
        },
      });
      Object.defineProperty(exports, 'DateTime', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.DateTime;
        },
      });
      Object.defineProperty(exports, 'Duration', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.Duration;
        },
      });
      Object.defineProperty(exports, 'isDate', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.isDate;
        },
      });
      Object.defineProperty(exports, 'isDateTime', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.isDateTime;
        },
      });
      Object.defineProperty(exports, 'isDuration', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.isDuration;
        },
      });
      Object.defineProperty(exports, 'isLocalDateTime', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.isLocalDateTime;
        },
      });
      Object.defineProperty(exports, 'isLocalTime', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.isLocalTime;
        },
      });
      Object.defineProperty(exports, 'isTime', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.isTime;
        },
      });
      Object.defineProperty(exports, 'LocalDateTime', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.LocalDateTime;
        },
      });
      Object.defineProperty(exports, 'LocalTime', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.LocalTime;
        },
      });
      Object.defineProperty(exports, 'Time', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.Time;
        },
      });
      Object.defineProperty(exports, 'Node', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.Node;
        },
      });
      Object.defineProperty(exports, 'Path', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.Path;
        },
      });
      Object.defineProperty(exports, 'PathSegment', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.PathSegment;
        },
      });
      Object.defineProperty(exports, 'Relationship', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.Relationship;
        },
      });
      Object.defineProperty(exports, 'UnboundRelationship', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.UnboundRelationship;
        },
      });
      Object.defineProperty(exports, 'Record', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.Record;
        },
      });
      Object.defineProperty(exports, 'ResultSummary', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.ResultSummary;
        },
      });
      Object.defineProperty(exports, 'Plan', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.Plan;
        },
      });
      Object.defineProperty(exports, 'ProfiledPlan', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.ProfiledPlan;
        },
      });
      Object.defineProperty(exports, 'QueryStatistics', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.QueryStatistics;
        },
      });
      Object.defineProperty(exports, 'Notification', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.Notification;
        },
      });
      Object.defineProperty(exports, 'ServerInfo', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.ServerInfo;
        },
      });
      Object.defineProperty(exports, 'Result', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.Result;
        },
      });
      Object.defineProperty(exports, 'auth', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.auth;
        },
      });
      Object.defineProperty(exports, 'Session', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.Session;
        },
      });
      Object.defineProperty(exports, 'Transaction', {
        enumerable: true,
        get: function get() {
          return _neo4jDriverCore.Transaction;
        },
      });
      Object.defineProperty(exports, 'RxSession', {
        enumerable: true,
        get: function get() {
          return _sessionRx['default'];
        },
      });
      Object.defineProperty(exports, 'RxTransaction', {
        enumerable: true,
        get: function get() {
          return _transactionRx['default'];
        },
      });
      Object.defineProperty(exports, 'RxResult', {
        enumerable: true,
        get: function get() {
          return _resultRx['default'];
        },
      });
      exports['default'] =
        exports.temporal =
        exports.spatial =
        exports.session =
        exports.types =
        exports.logging =
        exports.integer =
          void 0;
      var _driver = require_driver2();
      var _version = _interopRequireDefault(require_version());
      var _neo4jDriverCore = require_lib();
      var _neo4jDriverBoltConnection = require_lib2();
      var _sessionRx = _interopRequireDefault(require_session_rx());
      var _transactionRx = _interopRequireDefault(require_transaction_rx());
      var _resultRx = _interopRequireDefault(require_result_rx());
      var _internal$util = _neo4jDriverCore.internal.util;
      var ENCRYPTION_ON = _internal$util.ENCRYPTION_ON;
      var ENCRYPTION_OFF = _internal$util.ENCRYPTION_OFF;
      var assertString = _internal$util.assertString;
      var isEmptyObjectOrNull = _internal$util.isEmptyObjectOrNull;
      var ServerAddress = _neo4jDriverCore.internal.serverAddress.ServerAddress;
      var urlUtil = _neo4jDriverCore.internal.urlUtil;
      function driver(url, authToken) {
        var config2 =
          arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        assertString(url, 'Bolt URL');
        var parsedUrl = urlUtil.parseDatabaseUrl(url);
        var routing = false;
        var encrypted = false;
        var trust;
        switch (parsedUrl.scheme) {
          case 'bolt':
            break;
          case 'bolt+s':
            encrypted = true;
            trust = 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES';
            break;
          case 'bolt+ssc':
            encrypted = true;
            trust = 'TRUST_ALL_CERTIFICATES';
            break;
          case 'neo4j':
            routing = true;
            break;
          case 'neo4j+s':
            encrypted = true;
            trust = 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES';
            routing = true;
            break;
          case 'neo4j+ssc':
            encrypted = true;
            trust = 'TRUST_ALL_CERTIFICATES';
            routing = true;
            break;
          default:
            throw new Error('Unknown scheme: '.concat(parsedUrl.scheme));
        }
        if (encrypted) {
          if ('encrypted' in config2 || 'trust' in config2) {
            throw new Error(
              'Encryption/trust can only be configured either through URL or config, not both',
            );
          }
          config2.encrypted = ENCRYPTION_ON;
          config2.trust = trust;
        }
        authToken = authToken || {};
        authToken.scheme = authToken.scheme || 'none';
        config2.userAgent = config2.userAgent || USER_AGENT;
        var address = ServerAddress.fromUrl(parsedUrl.hostAndPort);
        var meta = {
          address,
          typename: routing ? 'Routing' : 'Direct',
          routing,
        };
        return new _driver.Driver(
          meta,
          config2,
          createConnectionProviderFunction(),
        );
        function createConnectionProviderFunction() {
          if (routing) {
            return function (id, config3, log, hostNameResolver) {
              return new _neo4jDriverBoltConnection.RoutingConnectionProvider({
                id,
                config: config3,
                log,
                hostNameResolver,
                authToken,
                address,
                userAgent: config3.userAgent,
                routingContext: parsedUrl.query,
              });
            };
          } else {
            if (!isEmptyObjectOrNull(parsedUrl.query)) {
              throw new Error(
                "Parameters are not supported with none routed scheme. Given URL: '".concat(
                  url,
                  "'",
                ),
              );
            }
            return function (id, config3, log) {
              return new _neo4jDriverBoltConnection.DirectConnectionProvider({
                id,
                config: config3,
                log,
                authToken,
                address,
                userAgent: config3.userAgent,
              });
            };
          }
        }
      }
      var USER_AGENT = 'neo4j-javascript/' + _version['default'];
      var logging = {
        console: (function (_console) {
          function console2(_x) {
            return _console.apply(this, arguments);
          }
          console2.toString = function () {
            return _console.toString();
          };
          return console2;
        })(function (level) {
          return {
            level,
            logger: function logger(level2, message) {
              return console.log(
                ''
                  .concat(global.Date.now(), ' ')
                  .concat(level2.toUpperCase(), ' ')
                  .concat(message),
              );
            },
          };
        }),
      };
      exports.logging = logging;
      var types = {
        Node: _neo4jDriverCore.Node,
        Relationship: _neo4jDriverCore.Relationship,
        UnboundRelationship: _neo4jDriverCore.UnboundRelationship,
        PathSegment: _neo4jDriverCore.PathSegment,
        Path: _neo4jDriverCore.Path,
        Result: _neo4jDriverCore.Result,
        ResultSummary: _neo4jDriverCore.ResultSummary,
        Record: _neo4jDriverCore.Record,
        Point: _neo4jDriverCore.Point,
        Date: _neo4jDriverCore.Date,
        DateTime: _neo4jDriverCore.DateTime,
        Duration: _neo4jDriverCore.Duration,
        LocalDateTime: _neo4jDriverCore.LocalDateTime,
        LocalTime: _neo4jDriverCore.LocalTime,
        Time: _neo4jDriverCore.Time,
        Integer: _neo4jDriverCore.Integer,
      };
      exports.types = types;
      var session = {
        READ: _driver.READ,
        WRITE: _driver.WRITE,
      };
      exports.session = session;
      var integer = {
        toNumber: _neo4jDriverCore.toNumber,
        toString: _neo4jDriverCore.toString,
        inSafeRange: _neo4jDriverCore.inSafeRange,
      };
      exports.integer = integer;
      var spatial = {
        isPoint: _neo4jDriverCore.isPoint,
      };
      exports.spatial = spatial;
      var temporal = {
        isDuration: _neo4jDriverCore.isDuration,
        isLocalTime: _neo4jDriverCore.isLocalTime,
        isTime: _neo4jDriverCore.isTime,
        isDate: _neo4jDriverCore.isDate,
        isLocalDateTime: _neo4jDriverCore.isLocalDateTime,
        isDateTime: _neo4jDriverCore.isDateTime,
      };
      exports.temporal = temporal;
      var forExport = {
        driver,
        int: _neo4jDriverCore['int'],
        isInt: _neo4jDriverCore.isInt,
        isPoint: _neo4jDriverCore.isPoint,
        isDuration: _neo4jDriverCore.isDuration,
        isLocalTime: _neo4jDriverCore.isLocalTime,
        isTime: _neo4jDriverCore.isTime,
        isDate: _neo4jDriverCore.isDate,
        isLocalDateTime: _neo4jDriverCore.isLocalDateTime,
        isDateTime: _neo4jDriverCore.isDateTime,
        integer,
        Neo4jError: _neo4jDriverCore.Neo4jError,
        auth: _neo4jDriverCore.auth,
        logging,
        types,
        session,
        error: _neo4jDriverCore.error,
        spatial,
        temporal,
        Driver: _driver.Driver,
        Session: _neo4jDriverCore.Session,
        Transaction: _neo4jDriverCore.Transaction,
        Result: _neo4jDriverCore.Result,
        RxSession: _sessionRx['default'],
        RxTransaction: _transactionRx['default'],
        RxResult: _resultRx['default'],
        ResultSummary: _neo4jDriverCore.ResultSummary,
        Plan: _neo4jDriverCore.Plan,
        ProfiledPlan: _neo4jDriverCore.ProfiledPlan,
        QueryStatistics: _neo4jDriverCore.QueryStatistics,
        Notification: _neo4jDriverCore.Notification,
        ServerInfo: _neo4jDriverCore.ServerInfo,
        Record: _neo4jDriverCore.Record,
        Node: _neo4jDriverCore.Node,
        Relationship: _neo4jDriverCore.Relationship,
        UnboundRelationship: _neo4jDriverCore.UnboundRelationship,
        Path: _neo4jDriverCore.Path,
        PathSegment: _neo4jDriverCore.PathSegment,
        Point: _neo4jDriverCore.Point,
        Integer: _neo4jDriverCore.Integer,
        Duration: _neo4jDriverCore.Duration,
        LocalTime: _neo4jDriverCore.LocalTime,
        Time: _neo4jDriverCore.Time,
        Date: _neo4jDriverCore.Date,
        LocalDateTime: _neo4jDriverCore.LocalDateTime,
        DateTime: _neo4jDriverCore.DateTime,
      };
      var _default = forExport;
      exports['default'] = _default;
    },
  });

  // node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    'node_modules/tslib/tslib.js'(exports, module) {
      var __extends2;
      var __assign2;
      var __rest2;
      var __decorate2;
      var __param2;
      var __metadata2;
      var __awaiter2;
      var __generator2;
      var __exportStar2;
      var __values2;
      var __read2;
      var __spread2;
      var __spreadArrays2;
      var __spreadArray2;
      var __await2;
      var __asyncGenerator2;
      var __asyncDelegator2;
      var __asyncValues2;
      var __makeTemplateObject2;
      var __importStar2;
      var __importDefault2;
      var __classPrivateFieldGet2;
      var __classPrivateFieldSet2;
      var __classPrivateFieldIn2;
      var __createBinding2;
      (function (factory) {
        var root =
          typeof global === 'object'
            ? global
            : typeof self === 'object'
            ? self
            : typeof this === 'object'
            ? this
            : {};
        if (typeof define === 'function' && define.amd) {
          define('tslib', ['exports'], function (exports2) {
            factory(createExporter(root, createExporter(exports2)));
          });
        } else if (
          typeof module === 'object' &&
          typeof module.exports === 'object'
        ) {
          factory(createExporter(root, createExporter(module.exports)));
        } else {
          factory(createExporter(root));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root) {
            if (typeof Object.create === 'function') {
              Object.defineProperty(exports2, '__esModule', { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function (id, v) {
            return (exports2[id] = previous ? previous(id, v) : v);
          };
        }
      })(function (exporter) {
        var extendStatics =
          Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array &&
            function (d, b) {
              d.__proto__ = b;
            }) ||
          function (d, b) {
            for (var p in b)
              if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };
        __extends2 = function (d, b) {
          if (typeof b !== 'function' && b !== null)
            throw new TypeError(
              'Class extends value ' +
                String(b) +
                ' is not a constructor or null',
            );
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype =
            b === null
              ? Object.create(b)
              : ((__.prototype = b.prototype), new __());
        };
        __assign2 =
          Object.assign ||
          function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
          };
        __rest2 = function (s, e) {
          var t = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === 'function')
            for (
              var i = 0, p = Object.getOwnPropertySymbols(s);
              i < p.length;
              i++
            ) {
              if (
                e.indexOf(p[i]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(s, p[i])
              )
                t[p[i]] = s[p[i]];
            }
          return t;
        };
        __decorate2 = function (decorators, target, key, desc) {
          var c = arguments.length,
            r =
              c < 3
                ? target
                : desc === null
                ? (desc = Object.getOwnPropertyDescriptor(target, key))
                : desc,
            d;
          if (
            typeof Reflect === 'object' &&
            typeof Reflect.decorate === 'function'
          )
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if ((d = decorators[i]))
                r =
                  (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) ||
                  r;
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };
        __param2 = function (paramIndex, decorator) {
          return function (target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata2 = function (metadataKey, metadataValue) {
          if (
            typeof Reflect === 'object' &&
            typeof Reflect.metadata === 'function'
          )
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter2 = function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator['throw'](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
        __generator2 = function (thisArg, body) {
          var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: [],
            },
            f,
            y,
            t,
            g;
          return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === 'function' &&
              (g[Symbol.iterator] = function () {
                return this;
              }),
            g
          );
          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f) throw new TypeError('Generator is already executing.');
            while (_)
              try {
                if (
                  ((f = 1),
                  y &&
                    (t =
                      op[0] & 2
                        ? y['return']
                        : op[0]
                        ? y['throw'] || ((t = y['return']) && t.call(y), 0)
                        : y.next) &&
                    !(t = t.call(y, op[1])).done)
                )
                  return t;
                if (((y = 0), t)) op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (
                      !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                      (op[0] === 6 || op[0] === 2)
                    ) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar2 = function (m, o) {
          for (var p in m)
            if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p))
              __createBinding2(o, m, p);
        };
        __createBinding2 = Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              var desc = Object.getOwnPropertyDescriptor(m, k);
              if (
                !desc ||
                ('get' in desc
                  ? !m.__esModule
                  : desc.writable || desc.configurable)
              ) {
                desc = {
                  enumerable: true,
                  get: function () {
                    return m[k];
                  },
                };
              }
              Object.defineProperty(o, k2, desc);
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            };
        __values2 = function (o) {
          var s = typeof Symbol === 'function' && Symbol.iterator,
            m = s && o[s],
            i = 0;
          if (m) return m.call(o);
          if (o && typeof o.length === 'number')
            return {
              next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
              },
            };
          throw new TypeError(
            s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.',
          );
        };
        __read2 = function (o, n) {
          var m = typeof Symbol === 'function' && o[Symbol.iterator];
          if (!m) return o;
          var i = m.call(o),
            r,
            ar = [],
            e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r && !r.done && (m = i['return'])) m.call(i);
            } finally {
              if (e) throw e.error;
            }
          }
          return ar;
        };
        __spread2 = function () {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read2(arguments[i]));
          return ar;
        };
        __spreadArrays2 = function () {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
          return r;
        };
        __spreadArray2 = function (to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
          return to.concat(ar || Array.prototype.slice.call(from));
        };
        __await2 = function (v) {
          return this instanceof __await2
            ? ((this.v = v), this)
            : new __await2(v);
        };
        __asyncGenerator2 = function (thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError('Symbol.asyncIterator is not defined.');
          var g = generator.apply(thisArg, _arguments || []),
            i,
            q = [];
          return (
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i
          );
          function verb(n) {
            if (g[n])
              i[n] = function (v) {
                return new Promise(function (a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await2
              ? Promise.resolve(r.value.v).then(fulfill, reject)
              : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume('next', value);
          }
          function reject(value) {
            resume('throw', value);
          }
          function settle(f, v) {
            if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator2 = function (o) {
          var i, p;
          return (
            (i = {}),
            verb('next'),
            verb('throw', function (e) {
              throw e;
            }),
            verb('return'),
            (i[Symbol.iterator] = function () {
              return this;
            }),
            i
          );
          function verb(n, f) {
            i[n] = o[n]
              ? function (v) {
                  return (p = !p)
                    ? { value: __await2(o[n](v)), done: n === 'return' }
                    : f
                    ? f(v)
                    : v;
                }
              : f;
          }
        };
        __asyncValues2 = function (o) {
          if (!Symbol.asyncIterator)
            throw new TypeError('Symbol.asyncIterator is not defined.');
          var m = o[Symbol.asyncIterator],
            i;
          return m
            ? m.call(o)
            : ((o =
                typeof __values2 === 'function'
                  ? __values2(o)
                  : o[Symbol.iterator]()),
              (i = {}),
              verb('next'),
              verb('throw'),
              verb('return'),
              (i[Symbol.asyncIterator] = function () {
                return this;
              }),
              i);
          function verb(n) {
            i[n] =
              o[n] &&
              function (v) {
                return new Promise(function (resolve, reject) {
                  (v = o[n](v)), settle(resolve, reject, v.done, v.value);
                });
              };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function (v2) {
              resolve({ value: v2, done: d });
            }, reject);
          }
        };
        __makeTemplateObject2 = function (cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, 'raw', { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create
          ? function (o, v) {
              Object.defineProperty(o, 'default', {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o['default'] = v;
            };
        __importStar2 = function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== 'default' &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault2 = function (mod) {
          return mod && mod.__esModule ? mod : { default: mod };
        };
        __classPrivateFieldGet2 = function (receiver, state, kind, f) {
          if (kind === 'a' && !f)
            throw new TypeError(
              'Private accessor was defined without a getter',
            );
          if (
            typeof state === 'function'
              ? receiver !== state || !f
              : !state.has(receiver)
          )
            throw new TypeError(
              'Cannot read private member from an object whose class did not declare it',
            );
          return kind === 'm'
            ? f
            : kind === 'a'
            ? f.call(receiver)
            : f
            ? f.value
            : state.get(receiver);
        };
        __classPrivateFieldSet2 = function (receiver, state, value, kind, f) {
          if (kind === 'm')
            throw new TypeError('Private method is not writable');
          if (kind === 'a' && !f)
            throw new TypeError(
              'Private accessor was defined without a setter',
            );
          if (
            typeof state === 'function'
              ? receiver !== state || !f
              : !state.has(receiver)
          )
            throw new TypeError(
              'Cannot write private member to an object whose class did not declare it',
            );
          return (
            kind === 'a'
              ? f.call(receiver, value)
              : f
              ? (f.value = value)
              : state.set(receiver, value),
            value
          );
        };
        __classPrivateFieldIn2 = function (state, receiver) {
          if (
            receiver === null ||
            (typeof receiver !== 'object' && typeof receiver !== 'function')
          )
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === 'function'
            ? receiver === state
            : state.has(receiver);
        };
        exporter('__extends', __extends2);
        exporter('__assign', __assign2);
        exporter('__rest', __rest2);
        exporter('__decorate', __decorate2);
        exporter('__param', __param2);
        exporter('__metadata', __metadata2);
        exporter('__awaiter', __awaiter2);
        exporter('__generator', __generator2);
        exporter('__exportStar', __exportStar2);
        exporter('__createBinding', __createBinding2);
        exporter('__values', __values2);
        exporter('__read', __read2);
        exporter('__spread', __spread2);
        exporter('__spreadArrays', __spreadArrays2);
        exporter('__spreadArray', __spreadArray2);
        exporter('__await', __await2);
        exporter('__asyncGenerator', __asyncGenerator2);
        exporter('__asyncDelegator', __asyncDelegator2);
        exporter('__asyncValues', __asyncValues2);
        exporter('__makeTemplateObject', __makeTemplateObject2);
        exporter('__importStar', __importStar2);
        exporter('__importDefault', __importDefault2);
        exporter('__classPrivateFieldGet', __classPrivateFieldGet2);
        exporter('__classPrivateFieldSet', __classPrivateFieldSet2);
        exporter('__classPrivateFieldIn', __classPrivateFieldIn2);
      });
    },
  });

  // node_modules/tslib/modules/index.js
  var import_tslib,
    __extends,
    __assign,
    __rest,
    __decorate,
    __param,
    __metadata,
    __awaiter,
    __generator,
    __exportStar,
    __createBinding,
    __values,
    __read,
    __spread,
    __spreadArrays,
    __spreadArray,
    __await,
    __asyncGenerator,
    __asyncDelegator,
    __asyncValues,
    __makeTemplateObject,
    __importStar,
    __importDefault,
    __classPrivateFieldGet,
    __classPrivateFieldSet,
    __classPrivateFieldIn;
  var init_modules = __esm({
    'node_modules/tslib/modules/index.js'() {
      import_tslib = __toESM(require_tslib(), 1);
      ({
        __extends,
        __assign,
        __rest,
        __decorate,
        __param,
        __metadata,
        __awaiter,
        __generator,
        __exportStar,
        __createBinding,
        __values,
        __read,
        __spread,
        __spreadArrays,
        __spreadArray,
        __await,
        __asyncGenerator,
        __asyncDelegator,
        __asyncValues,
        __makeTemplateObject,
        __importStar,
        __importDefault,
        __classPrivateFieldGet,
        __classPrivateFieldSet,
        __classPrivateFieldIn,
      } = import_tslib.default);
    },
  });

  // node_modules/rxjs/dist/esm5/internal/util/isFunction.js
  function isFunction(value) {
    return typeof value === 'function';
  }
  var init_isFunction = __esm({
    'node_modules/rxjs/dist/esm5/internal/util/isFunction.js'() {},
  });

  // node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
  function createErrorClass(createImpl) {
    var _super = function (instance) {
      Error.call(instance);
      instance.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
  }
  var init_createErrorClass = __esm({
    'node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js'() {},
  });

  // node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
  var UnsubscriptionError;
  var init_UnsubscriptionError = __esm({
    'node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js'() {
      init_createErrorClass();
      UnsubscriptionError = createErrorClass(function (_super) {
        return function UnsubscriptionErrorImpl(errors) {
          _super(this);
          this.message = errors
            ? errors.length +
              ' errors occurred during unsubscription:\n' +
              errors
                .map(function (err, i) {
                  return i + 1 + ') ' + err.toString();
                })
                .join('\n  ')
            : '';
          this.name = 'UnsubscriptionError';
          this.errors = errors;
        };
      });
    },
  });

  // node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
  function arrRemove(arr, item) {
    if (arr) {
      var index = arr.indexOf(item);
      0 <= index && arr.splice(index, 1);
    }
  }
  var init_arrRemove = __esm({
    'node_modules/rxjs/dist/esm5/internal/util/arrRemove.js'() {},
  });

  // node_modules/rxjs/dist/esm5/internal/Subscription.js
  function isSubscription(value) {
    return (
      value instanceof Subscription ||
      (value &&
        'closed' in value &&
        isFunction(value.remove) &&
        isFunction(value.add) &&
        isFunction(value.unsubscribe))
    );
  }
  function execFinalizer(finalizer) {
    if (isFunction(finalizer)) {
      finalizer();
    } else {
      finalizer.unsubscribe();
    }
  }
  var Subscription, EMPTY_SUBSCRIPTION;
  var init_Subscription = __esm({
    'node_modules/rxjs/dist/esm5/internal/Subscription.js'() {
      init_modules();
      init_isFunction();
      init_UnsubscriptionError();
      init_arrRemove();
      Subscription = (function () {
        function Subscription2(initialTeardown) {
          this.initialTeardown = initialTeardown;
          this.closed = false;
          this._parentage = null;
          this._finalizers = null;
        }
        Subscription2.prototype.unsubscribe = function () {
          var e_1, _a, e_2, _b;
          var errors;
          if (!this.closed) {
            this.closed = true;
            var _parentage = this._parentage;
            if (_parentage) {
              this._parentage = null;
              if (Array.isArray(_parentage)) {
                try {
                  for (
                    var _parentage_1 = __values(_parentage),
                      _parentage_1_1 = _parentage_1.next();
                    !_parentage_1_1.done;
                    _parentage_1_1 = _parentage_1.next()
                  ) {
                    var parent_1 = _parentage_1_1.value;
                    parent_1.remove(this);
                  }
                } catch (e_1_1) {
                  e_1 = { error: e_1_1 };
                } finally {
                  try {
                    if (
                      _parentage_1_1 &&
                      !_parentage_1_1.done &&
                      (_a = _parentage_1.return)
                    )
                      _a.call(_parentage_1);
                  } finally {
                    if (e_1) throw e_1.error;
                  }
                }
              } else {
                _parentage.remove(this);
              }
            }
            var initialFinalizer = this.initialTeardown;
            if (isFunction(initialFinalizer)) {
              try {
                initialFinalizer();
              } catch (e) {
                errors = e instanceof UnsubscriptionError ? e.errors : [e];
              }
            }
            var _finalizers = this._finalizers;
            if (_finalizers) {
              this._finalizers = null;
              try {
                for (
                  var _finalizers_1 = __values(_finalizers),
                    _finalizers_1_1 = _finalizers_1.next();
                  !_finalizers_1_1.done;
                  _finalizers_1_1 = _finalizers_1.next()
                ) {
                  var finalizer = _finalizers_1_1.value;
                  try {
                    execFinalizer(finalizer);
                  } catch (err) {
                    errors = errors !== null && errors !== void 0 ? errors : [];
                    if (err instanceof UnsubscriptionError) {
                      errors = __spreadArray(
                        __spreadArray([], __read(errors)),
                        __read(err.errors),
                      );
                    } else {
                      errors.push(err);
                    }
                  }
                }
              } catch (e_2_1) {
                e_2 = { error: e_2_1 };
              } finally {
                try {
                  if (
                    _finalizers_1_1 &&
                    !_finalizers_1_1.done &&
                    (_b = _finalizers_1.return)
                  )
                    _b.call(_finalizers_1);
                } finally {
                  if (e_2) throw e_2.error;
                }
              }
            }
            if (errors) {
              throw new UnsubscriptionError(errors);
            }
          }
        };
        Subscription2.prototype.add = function (teardown) {
          var _a;
          if (teardown && teardown !== this) {
            if (this.closed) {
              execFinalizer(teardown);
            } else {
              if (teardown instanceof Subscription2) {
                if (teardown.closed || teardown._hasParent(this)) {
                  return;
                }
                teardown._addParent(this);
              }
              (this._finalizers =
                (_a = this._finalizers) !== null && _a !== void 0
                  ? _a
                  : []).push(teardown);
            }
          }
        };
        Subscription2.prototype._hasParent = function (parent) {
          var _parentage = this._parentage;
          return (
            _parentage === parent ||
            (Array.isArray(_parentage) && _parentage.includes(parent))
          );
        };
        Subscription2.prototype._addParent = function (parent) {
          var _parentage = this._parentage;
          this._parentage = Array.isArray(_parentage)
            ? (_parentage.push(parent), _parentage)
            : _parentage
            ? [_parentage, parent]
            : parent;
        };
        Subscription2.prototype._removeParent = function (parent) {
          var _parentage = this._parentage;
          if (_parentage === parent) {
            this._parentage = null;
          } else if (Array.isArray(_parentage)) {
            arrRemove(_parentage, parent);
          }
        };
        Subscription2.prototype.remove = function (teardown) {
          var _finalizers = this._finalizers;
          _finalizers && arrRemove(_finalizers, teardown);
          if (teardown instanceof Subscription2) {
            teardown._removeParent(this);
          }
        };
        Subscription2.EMPTY = (function () {
          var empty = new Subscription2();
          empty.closed = true;
          return empty;
        })();
        return Subscription2;
      })();
      EMPTY_SUBSCRIPTION = Subscription.EMPTY;
    },
  });

  // node_modules/rxjs/dist/esm5/internal/config.js
  var config;
  var init_config = __esm({
    'node_modules/rxjs/dist/esm5/internal/config.js'() {
      config = {
        onUnhandledError: null,
        onStoppedNotification: null,
        Promise: void 0,
        useDeprecatedSynchronousErrorHandling: false,
        useDeprecatedNextContext: false,
      };
    },
  });

  // node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
  var timeoutProvider;
  var init_timeoutProvider = __esm({
    'node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js'() {
      init_modules();
      timeoutProvider = {
        setTimeout: function (handler, timeout) {
          var args = [];
          for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
          }
          var delegate = timeoutProvider.delegate;
          if (
            delegate === null || delegate === void 0
              ? void 0
              : delegate.setTimeout
          ) {
            return delegate.setTimeout.apply(
              delegate,
              __spreadArray([handler, timeout], __read(args)),
            );
          }
          return setTimeout.apply(
            void 0,
            __spreadArray([handler, timeout], __read(args)),
          );
        },
        clearTimeout: function (handle) {
          var delegate = timeoutProvider.delegate;
          return (
            (delegate === null || delegate === void 0
              ? void 0
              : delegate.clearTimeout) || clearTimeout
          )(handle);
        },
        delegate: void 0,
      };
    },
  });

  // node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
  function reportUnhandledError(err) {
    timeoutProvider.setTimeout(function () {
      var onUnhandledError = config.onUnhandledError;
      if (onUnhandledError) {
        onUnhandledError(err);
      } else {
        throw err;
      }
    });
  }
  var init_reportUnhandledError = __esm({
    'node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js'() {
      init_config();
      init_timeoutProvider();
    },
  });

  // node_modules/rxjs/dist/esm5/internal/util/noop.js
  function noop() {}
  var init_noop = __esm({
    'node_modules/rxjs/dist/esm5/internal/util/noop.js'() {},
  });

  // node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
  function errorNotification(error) {
    return createNotification('E', void 0, error);
  }
  function nextNotification(value) {
    return createNotification('N', value, void 0);
  }
  function createNotification(kind, value, error) {
    return {
      kind,
      value,
      error,
    };
  }
  var COMPLETE_NOTIFICATION;
  var init_NotificationFactories = __esm({
    'node_modules/rxjs/dist/esm5/internal/NotificationFactories.js'() {
      COMPLETE_NOTIFICATION = (function () {
        return createNotification('C', void 0, void 0);
      })();
    },
  });

  // node_modules/rxjs/dist/esm5/internal/util/errorContext.js
  function errorContext(cb) {
    if (config.useDeprecatedSynchronousErrorHandling) {
      var isRoot = !context;
      if (isRoot) {
        context = { errorThrown: false, error: null };
      }
      cb();
      if (isRoot) {
        var _a = context,
          errorThrown = _a.errorThrown,
          error = _a.error;
        context = null;
        if (errorThrown) {
          throw error;
        }
      }
    } else {
      cb();
    }
  }
  function captureError(err) {
    if (config.useDeprecatedSynchronousErrorHandling && context) {
      context.errorThrown = true;
      context.error = err;
    }
  }
  var context;
  var init_errorContext = __esm({
    'node_modules/rxjs/dist/esm5/internal/util/errorContext.js'() {
      init_config();
      context = null;
    },
  });

  // node_modules/rxjs/dist/esm5/internal/Subscriber.js
  function bind(fn, thisArg) {
    return _bind.call(fn, thisArg);
  }
  function handleUnhandledError(error) {
    if (config.useDeprecatedSynchronousErrorHandling) {
      captureError(error);
    } else {
      reportUnhandledError(error);
    }
  }
  function defaultErrorHandler(err) {
    throw err;
  }
  function handleStoppedNotification(notification, subscriber) {
    var onStoppedNotification = config.onStoppedNotification;
    onStoppedNotification &&
      timeoutProvider.setTimeout(function () {
        return onStoppedNotification(notification, subscriber);
      });
  }
  var Subscriber, _bind, ConsumerObserver, SafeSubscriber, EMPTY_OBSERVER;
  var init_Subscriber = __esm({
    'node_modules/rxjs/dist/esm5/internal/Subscriber.js'() {
      init_modules();
      init_isFunction();
      init_Subscription();
      init_config();
      init_reportUnhandledError();
      init_noop();
      init_NotificationFactories();
      init_timeoutProvider();
      init_errorContext();
      Subscriber = (function (_super) {
        __extends(Subscriber2, _super);
        function Subscriber2(destination) {
          var _this = _super.call(this) || this;
          _this.isStopped = false;
          if (destination) {
            _this.destination = destination;
            if (isSubscription(destination)) {
              destination.add(_this);
            }
          } else {
            _this.destination = EMPTY_OBSERVER;
          }
          return _this;
        }
        Subscriber2.create = function (next, error, complete) {
          return new SafeSubscriber(next, error, complete);
        };
        Subscriber2.prototype.next = function (value) {
          if (this.isStopped) {
            handleStoppedNotification(nextNotification(value), this);
          } else {
            this._next(value);
          }
        };
        Subscriber2.prototype.error = function (err) {
          if (this.isStopped) {
            handleStoppedNotification(errorNotification(err), this);
          } else {
            this.isStopped = true;
            this._error(err);
          }
        };
        Subscriber2.prototype.complete = function () {
          if (this.isStopped) {
            handleStoppedNotification(COMPLETE_NOTIFICATION, this);
          } else {
            this.isStopped = true;
            this._complete();
          }
        };
        Subscriber2.prototype.unsubscribe = function () {
          if (!this.closed) {
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
            this.destination = null;
          }
        };
        Subscriber2.prototype._next = function (value) {
          this.destination.next(value);
        };
        Subscriber2.prototype._error = function (err) {
          try {
            this.destination.error(err);
          } finally {
            this.unsubscribe();
          }
        };
        Subscriber2.prototype._complete = function () {
          try {
            this.destination.complete();
          } finally {
            this.unsubscribe();
          }
        };
        return Subscriber2;
      })(Subscription);
      _bind = Function.prototype.bind;
      ConsumerObserver = (function () {
        function ConsumerObserver2(partialObserver) {
          this.partialObserver = partialObserver;
        }
        ConsumerObserver2.prototype.next = function (value) {
          var partialObserver = this.partialObserver;
          if (partialObserver.next) {
            try {
              partialObserver.next(value);
            } catch (error) {
              handleUnhandledError(error);
            }
          }
        };
        ConsumerObserver2.prototype.error = function (err) {
          var partialObserver = this.partialObserver;
          if (partialObserver.error) {
            try {
              partialObserver.error(err);
            } catch (error) {
              handleUnhandledError(error);
            }
          } else {
            handleUnhandledError(err);
          }
        };
        ConsumerObserver2.prototype.complete = function () {
          var partialObserver = this.partialObserver;
          if (partialObserver.complete) {
            try {
              partialObserver.complete();
            } catch (error) {
              handleUnhandledError(error);
            }
          }
        };
        return ConsumerObserver2;
      })();
      SafeSubscriber = (function (_super) {
        __extends(SafeSubscriber2, _super);
        function SafeSubscriber2(observerOrNext, error, complete) {
          var _this = _super.call(this) || this;
          var partialObserver;
          if (isFunction(observerOrNext) || !observerOrNext) {
            partialObserver = {
              next:
                observerOrNext !== null && observerOrNext !== void 0
                  ? observerOrNext
                  : void 0,
              error: error !== null && error !== void 0 ? error : void 0,
              complete:
                complete !== null && complete !== void 0 ? complete : void 0,
            };
          } else {
            var context_1;
            if (_this && config.useDeprecatedNextContext) {
              context_1 = Object.create(observerOrNext);
              context_1.unsubscribe = function () {
                return _this.unsubscribe();
              };
              partialObserver = {
                next:
                  observerOrNext.next && bind(observerOrNext.next, context_1),
                error:
                  observerOrNext.error && bind(observerOrNext.error, context_1),
                complete:
                  observerOrNext.complete &&
                  bind(observerOrNext.complete, context_1),
              };
            } else {
              partialObserver = observerOrNext;
            }
          }
          _this.destination = new ConsumerObserver(partialObserver);
          return _this;
        }
        return SafeSubscriber2;
      })(Subscriber);
      EMPTY_OBSERVER = {
        closed: true,
        next: noop,
        error: defaultErrorHandler,
        complete: noop,
      };
    },
  });

  // node_modules/rxjs/dist/esm5/internal/symbol/observable.js
  var observable;
  var init_observable = __esm({
    'node_modules/rxjs/dist/esm5/internal/symbol/observable.js'() {
      observable = (function () {
        return (
          (typeof Symbol === 'function' && Symbol.observable) || '@@observable'
        );
      })();
    },
  });

  // node_modules/rxjs/dist/esm5/internal/util/identity.js
  function identity(x) {
    return x;
  }
  var init_identity = __esm({
    'node_modules/rxjs/dist/esm5/internal/util/identity.js'() {},
  });

  // node_modules/rxjs/dist/esm5/internal/util/pipe.js
  function pipeFromArray(fns) {
    if (fns.length === 0) {
      return identity;
    }
    if (fns.length === 1) {
      return fns[0];
    }
    return function piped(input) {
      return fns.reduce(function (prev, fn) {
        return fn(prev);
      }, input);
    };
  }
  var init_pipe = __esm({
    'node_modules/rxjs/dist/esm5/internal/util/pipe.js'() {
      init_identity();
    },
  });

  // node_modules/rxjs/dist/esm5/internal/Observable.js
  function getPromiseCtor(promiseCtor) {
    var _a;
    return (_a =
      promiseCtor !== null && promiseCtor !== void 0
        ? promiseCtor
        : config.Promise) !== null && _a !== void 0
      ? _a
      : Promise;
  }
  function isObserver(value) {
    return (
      value &&
      isFunction(value.next) &&
      isFunction(value.error) &&
      isFunction(value.complete)
    );
  }
  function isSubscriber(value) {
    return (
      (value && value instanceof Subscriber) ||
      (isObserver(value) && isSubscription(value))
    );
  }
  var Observable;
  var init_Observable = __esm({
    'node_modules/rxjs/dist/esm5/internal/Observable.js'() {
      init_Subscriber();
      init_Subscription();
      init_observable();
      init_pipe();
      init_config();
      init_isFunction();
      init_errorContext();
      Observable = (function () {
        function Observable2(subscribe) {
          if (subscribe) {
            this._subscribe = subscribe;
          }
        }
        Observable2.prototype.lift = function (operator) {
          var observable2 = new Observable2();
          observable2.source = this;
          observable2.operator = operator;
          return observable2;
        };
        Observable2.prototype.subscribe = function (
          observerOrNext,
          error,
          complete,
        ) {
          var _this = this;
          var subscriber = isSubscriber(observerOrNext)
            ? observerOrNext
            : new SafeSubscriber(observerOrNext, error, complete);
          errorContext(function () {
            var _a = _this,
              operator = _a.operator,
              source = _a.source;
            subscriber.add(
              operator
                ? operator.call(subscriber, source)
                : source
                ? _this._subscribe(subscriber)
                : _this._trySubscribe(subscriber),
            );
          });
          return subscriber;
        };
        Observable2.prototype._trySubscribe = function (sink) {
          try {
            return this._subscribe(sink);
          } catch (err) {
            sink.error(err);
          }
        };
        Observable2.prototype.forEach = function (next, promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function (resolve, reject) {
            var subscriber = new SafeSubscriber({
              next: function (value) {
                try {
                  next(value);
                } catch (err) {
                  reject(err);
                  subscriber.unsubscribe();
                }
              },
              error: reject,
              complete: resolve,
            });
            _this.subscribe(subscriber);
          });
        };
        Observable2.prototype._subscribe = function (subscriber) {
          var _a;
          return (_a = this.source) === null || _a === void 0
            ? void 0
            : _a.subscribe(subscriber);
        };
        Observable2.prototype[observable] = function () {
          return this;
        };
        Observable2.prototype.pipe = function () {
          var operations = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
          }
          return pipeFromArray(operations)(this);
        };
        Observable2.prototype.toPromise = function (promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(
              function (x) {
                return (value = x);
              },
              function (err) {
                return reject(err);
              },
              function () {
                return resolve(value);
              },
            );
          });
        };
        Observable2.create = function (subscribe) {
          return new Observable2(subscribe);
        };
        return Observable2;
      })();
    },
  });

  // node_modules/rxjs/dist/esm5/internal/util/lift.js
  function hasLift(source) {
    return isFunction(
      source === null || source === void 0 ? void 0 : source.lift,
    );
  }
  function operate(init) {
    return function (source) {
      if (hasLift(source)) {
        return source.lift(function (liftedSource) {
          try {
            return init(liftedSource, this);
          } catch (err) {
            this.error(err);
          }
        });
      }
      throw new TypeError('Unable to lift unknown Observable type');
    };
  }
  var init_lift = __esm({
    'node_modules/rxjs/dist/esm5/internal/util/lift.js'() {
      init_isFunction();
    },
  });

  // node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
  function createOperatorSubscriber(
    destination,
    onNext,
    onComplete,
    onError,
    onFinalize,
  ) {
    return new OperatorSubscriber(
      destination,
      onNext,
      onComplete,
      onError,
      onFinalize,
    );
  }
  var OperatorSubscriber;
  var init_OperatorSubscriber = __esm({
    'node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js'() {
      init_modules();
      init_Subscriber();
      OperatorSubscriber = (function (_super) {
        __extends(OperatorSubscriber2, _super);
        function OperatorSubscriber2(
          destination,
          onNext,
          onComplete,
          onError,
          onFinalize,
          shouldUnsubscribe,
        ) {
          var _this = _super.call(this, destination) || this;
          _this.onFinalize = onFinalize;
          _this.shouldUnsubscribe = shouldUnsubscribe;
          _this._next = onNext
            ? function (value) {
                try {
                  onNext(value);
                } catch (err) {
                  destination.error(err);
                }
              }
            : _super.prototype._next;
          _this._error = onError
            ? function (err) {
                try {
                  onError(err);
                } catch (err2) {
                  destination.error(err2);
                } finally {
                  this.unsubscribe();
                }
              }
            : _super.prototype._error;
          _this._complete = onComplete
            ? function () {
                try {
                  onComplete();
                } catch (err) {
                  destination.error(err);
                } finally {
                  this.unsubscribe();
                }
              }
            : _super.prototype._complete;
          return _this;
        }
        OperatorSubscriber2.prototype.unsubscribe = function () {
          var _a;
          if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
            var closed_1 = this.closed;
            _super.prototype.unsubscribe.call(this);
            !closed_1 &&
              ((_a = this.onFinalize) === null || _a === void 0
                ? void 0
                : _a.call(this));
          }
        };
        return OperatorSubscriber2;
      })(Subscriber);
    },
  });

  // node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
  var isArrayLike;
  var init_isArrayLike = __esm({
    'node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js'() {
      isArrayLike = function (x) {
        return x && typeof x.length === 'number' && typeof x !== 'function';
      };
    },
  });

  // node_modules/rxjs/dist/esm5/internal/util/isPromise.js
  function isPromise(value) {
    return isFunction(value === null || value === void 0 ? void 0 : value.then);
  }
  var init_isPromise = __esm({
    'node_modules/rxjs/dist/esm5/internal/util/isPromise.js'() {
      init_isFunction();
    },
  });

  // node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js
  function isInteropObservable(input) {
    return isFunction(input[observable]);
  }
  var init_isInteropObservable = __esm({
    'node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js'() {
      init_observable();
      init_isFunction();
    },
  });

  // node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js
  function isAsyncIterable(obj) {
    return (
      Symbol.asyncIterator &&
      isFunction(
        obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator],
      )
    );
  }
  var init_isAsyncIterable = __esm({
    'node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js'() {
      init_isFunction();
    },
  });

  // node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
  function createInvalidObservableTypeError(input) {
    return new TypeError(
      'You provided ' +
        (input !== null && typeof input === 'object'
          ? 'an invalid object'
          : "'" + input + "'") +
        ' where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.',
    );
  }
  var init_throwUnobservableError = __esm({
    'node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js'() {},
  });

  // node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
  function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
      return '@@iterator';
    }
    return Symbol.iterator;
  }
  var iterator;
  var init_iterator = __esm({
    'node_modules/rxjs/dist/esm5/internal/symbol/iterator.js'() {
      iterator = getSymbolIterator();
    },
  });

  // node_modules/rxjs/dist/esm5/internal/util/isIterable.js
  function isIterable(input) {
    return isFunction(
      input === null || input === void 0 ? void 0 : input[iterator],
    );
  }
  var init_isIterable = __esm({
    'node_modules/rxjs/dist/esm5/internal/util/isIterable.js'() {
      init_iterator();
      init_isFunction();
    },
  });

  // node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js
  function readableStreamLikeToAsyncGenerator(readableStream) {
    return __asyncGenerator(
      this,
      arguments,
      function readableStreamLikeToAsyncGenerator_1() {
        var reader, _a, value, done;
        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              reader = readableStream.getReader();
              _b.label = 1;
            case 1:
              _b.trys.push([1, , 9, 10]);
              _b.label = 2;
            case 2:
              if (false) return [3, 8];
              return [4, __await(reader.read())];
            case 3:
              (_a = _b.sent()), (value = _a.value), (done = _a.done);
              if (!done) return [3, 5];
              return [4, __await(void 0)];
            case 4:
              return [2, _b.sent()];
            case 5:
              return [4, __await(value)];
            case 6:
              return [4, _b.sent()];
            case 7:
              _b.sent();
              return [3, 2];
            case 8:
              return [3, 10];
            case 9:
              reader.releaseLock();
              return [7];
            case 10:
              return [2];
          }
        });
      },
    );
  }
  function isReadableStreamLike(obj) {
    return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
  }
  var init_isReadableStreamLike = __esm({
    'node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js'() {
      init_modules();
      init_isFunction();
    },
  });

  // node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
  function innerFrom(input) {
    if (input instanceof Observable) {
      return input;
    }
    if (input != null) {
      if (isInteropObservable(input)) {
        return fromInteropObservable(input);
      }
      if (isArrayLike(input)) {
        return fromArrayLike(input);
      }
      if (isPromise(input)) {
        return fromPromise(input);
      }
      if (isAsyncIterable(input)) {
        return fromAsyncIterable(input);
      }
      if (isIterable(input)) {
        return fromIterable(input);
      }
      if (isReadableStreamLike(input)) {
        return fromReadableStreamLike(input);
      }
    }
    throw createInvalidObservableTypeError(input);
  }
  function fromInteropObservable(obj) {
    return new Observable(function (subscriber) {
      var obs = obj[observable]();
      if (isFunction(obs.subscribe)) {
        return obs.subscribe(subscriber);
      }
      throw new TypeError(
        'Provided object does not correctly implement Symbol.observable',
      );
    });
  }
  function fromArrayLike(array) {
    return new Observable(function (subscriber) {
      for (var i = 0; i < array.length && !subscriber.closed; i++) {
        subscriber.next(array[i]);
      }
      subscriber.complete();
    });
  }
  function fromPromise(promise) {
    return new Observable(function (subscriber) {
      promise
        .then(
          function (value) {
            if (!subscriber.closed) {
              subscriber.next(value);
              subscriber.complete();
            }
          },
          function (err) {
            return subscriber.error(err);
          },
        )
        .then(null, reportUnhandledError);
    });
  }
  function fromIterable(iterable) {
    return new Observable(function (subscriber) {
      var e_1, _a;
      try {
        for (
          var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next();
          !iterable_1_1.done;
          iterable_1_1 = iterable_1.next()
        ) {
          var value = iterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))
            _a.call(iterable_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      subscriber.complete();
    });
  }
  function fromAsyncIterable(asyncIterable) {
    return new Observable(function (subscriber) {
      process(asyncIterable, subscriber).catch(function (err) {
        return subscriber.error(err);
      });
    });
  }
  function fromReadableStreamLike(readableStream) {
    return fromAsyncIterable(
      readableStreamLikeToAsyncGenerator(readableStream),
    );
  }
  function process(asyncIterable, subscriber) {
    var asyncIterable_1, asyncIterable_1_1;
    var e_2, _a;
    return __awaiter(this, void 0, void 0, function () {
      var value, e_2_1;
      return __generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            _b.trys.push([0, 5, 6, 11]);
            asyncIterable_1 = __asyncValues(asyncIterable);
            _b.label = 1;
          case 1:
            return [4, asyncIterable_1.next()];
          case 2:
            if (!((asyncIterable_1_1 = _b.sent()), !asyncIterable_1_1.done))
              return [3, 4];
            value = asyncIterable_1_1.value;
            subscriber.next(value);
            if (subscriber.closed) {
              return [2];
            }
            _b.label = 3;
          case 3:
            return [3, 1];
          case 4:
            return [3, 11];
          case 5:
            e_2_1 = _b.sent();
            e_2 = { error: e_2_1 };
            return [3, 11];
          case 6:
            _b.trys.push([6, , 9, 10]);
            if (
              !(
                asyncIterable_1_1 &&
                !asyncIterable_1_1.done &&
                (_a = asyncIterable_1.return)
              )
            )
              return [3, 8];
            return [4, _a.call(asyncIterable_1)];
          case 7:
            _b.sent();
            _b.label = 8;
          case 8:
            return [3, 10];
          case 9:
            if (e_2) throw e_2.error;
            return [7];
          case 10:
            return [7];
          case 11:
            subscriber.complete();
            return [2];
        }
      });
    });
  }
  var init_innerFrom = __esm({
    'node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js'() {
      init_modules();
      init_isArrayLike();
      init_isPromise();
      init_Observable();
      init_isInteropObservable();
      init_isAsyncIterable();
      init_throwUnobservableError();
      init_isIterable();
      init_isReadableStreamLike();
      init_isFunction();
      init_reportUnhandledError();
      init_observable();
    },
  });

  // node_modules/rxjs/dist/esm5/internal/operators/map.js
  function map(project, thisArg) {
    return operate(function (source, subscriber) {
      var index = 0;
      source.subscribe(
        createOperatorSubscriber(subscriber, function (value) {
          subscriber.next(project.call(thisArg, value, index++));
        }),
      );
    });
  }
  var init_map = __esm({
    'node_modules/rxjs/dist/esm5/internal/operators/map.js'() {
      init_lift();
      init_OperatorSubscriber();
    },
  });

  // node_modules/rxjs/dist/esm5/internal/observable/defer.js
  function defer(observableFactory) {
    return new Observable(function (subscriber) {
      innerFrom(observableFactory()).subscribe(subscriber);
    });
  }
  var init_defer = __esm({
    'node_modules/rxjs/dist/esm5/internal/observable/defer.js'() {
      init_Observable();
      init_innerFrom();
    },
  });

  // node_modules/rxjs/dist/esm5/internal/types.js
  var init_types = __esm({
    'node_modules/rxjs/dist/esm5/internal/types.js'() {},
  });

  // node_modules/rxjs/dist/esm5/index.js
  var init_esm5 = __esm({
    'node_modules/rxjs/dist/esm5/index.js'() {
      init_defer();
      init_types();
    },
  });

  // node_modules/rxjs/dist/esm5/operators/index.js
  var init_operators = __esm({
    'node_modules/rxjs/dist/esm5/operators/index.js'() {
      init_map();
    },
  });

  // libs/flutter-js/src/lib/neo4j-api.ts
  var require_neo4j_api = __commonJS({
    'libs/flutter-js/src/lib/neo4j-api.ts'(exports) {
      var import_neo4j_driver = __toESM(require_lib3());
      init_esm5();
      init_operators();
      var neo4jUsername = 'neo4j';
      var neo4jPassword = 'LoaFhpCe4xTAvjTxBV4qh60POy4Hi7pC9n2DhhKPQdU';
      var neo4jUri = 'neo4j+s://cf48806f.databases.neo4j.io';
      var driver = import_neo4j_driver.default.driver(
        neo4jUri,
        import_neo4j_driver.default.auth.basic(neo4jUsername, neo4jPassword),
      );
      var session = driver.session({ database: 'neo4j' });
      var hikeSearchInCircle = () =>
        __async(exports, null, function* () {
          return yield defer(() =>
            session.writeTransaction(tx =>
              tx.run(`
        match (w:Waypoint) where point.distance(point({latitude: w.latitude, longitude: w.longitude}), point({latitude: 47.858627, longitude: 19.99034})) < 20000
        match (h:Hike)-[:GOES_ON]->(:Route)-[:CONTAINS]->(w)
        return collect(distinct h) limit 25
`),
            ),
          )
            .pipe(map(x => JSON.stringify(x)))
            .toPromise();
        });
      global.hikeSearchInCircle = hikeSearchInCircle;
    },
  });
  require_neo4j_api();
})();
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
