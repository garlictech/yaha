input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
}

## ------ Generic types -----------------------------------------------------
enum PublicationState {
  draft
  published
  archived
}

enum LengthUnit {
  imperial
  metric
}

# ------ TEXTUAL DESCRIPTION -----------------------------------------------------
enum TextualDescriptionType {
  markdown
  html
}

type TextualDescription {
  languageKey: String!
  title: String
  summary: String
  fullDescription: String
  type: TextualDescriptionType!
}

# ------ IMAGES -----------------------------------------------------
type ImageInfo {
  url: String!
  width: Int
  height: Int
}

type Image
  @model
  @searchable
  @auth(rules: [{ allow: public }, { allow: public, provider: iam }]) {
  id: ID!
  location: Location!
  original: ImageInfo!
  card: ImageInfo!
  thumbnail: ImageInfo!
  sourceObject: PoiSourceObject!
  attributions: String
  labels: [String!]
  tagged: Boolean
  banned: Boolean
}

# ------ POIS -----------------------------------------------------
enum PoiSource {
  google
  wikipedia
  osmAmenity
  osmNatural
  osmRoute
  osmPublicTransport
  osmEmergency
  osmHistoric
  osmLeisure
  osmManMade
  osmMilitary
  osmShop
  osmTourism
  mapillary
  flickr
}

type PoiSourceObject {
  objectType: PoiSource!
  languageKey: String
  objectId: String!
  url: String
}

type Poi
  @model
  @searchable
  @auth(rules: [{ allow: public }, { allow: public, provider: iam }]) {
  id: ID!
  elevation: Float
  location: Location!
  types: [String!]
  description: [TextualDescription]
  tags: [String!]
  sourceObject: [PoiSourceObject!]
  address: String
  phoneNumber: String
  openingHours: String
}

# ------ ROUTES -----------------------------------------------------
type Point {
  lat: Float!
  lon: Float!
  elevation: Float
}

type Location {
  lat: Float!
  lon: Float!
}

type BoundingBox {
  NorthEast: Point!
  SouthWest: Point!
}

# ------ GEO SEARCH -----------------------------------------------------
enum PlaceType {
  poi
  hike
  message
  image
}

# ------ HIKES -----------------------------------------------------
type HikeStopData {
  poiId: ID!
  description: [TextualDescription!]
}

type Checkpoint {
  poiId: String
  point: Point
}

type RouteData {
  distance: Int!
  uphill: Int!
  downhill: Int!
  averageTime: Int!
  score: Int!
  difficulty: Int!
  bounds: BoundingBox!
  isRoundTrip: Boolean!
  poiSearchBox: BoundingBox!
}

type LineString {
  type: String!
  coordinates: [[Float!]!]!
}

type GeoShape {
  type: String!
  coordinates: [[[Float]]]!
}

input GeoShapeInput {
  type: String!
  coordinates: [[[Float]]]!
}

type Hike
  @model
  @searchable
  @auth(rules: [{ allow: public }, { allow: public, provider: iam }]) {
  id: ID!
  description: [TextualDescription]
  route: LineString!
  publicationState: PublicationState
  featured: Boolean
  rate: String
  featuredStops: [HikeStopData]
  checkpoints: [Checkpoint]
  tags: [String]
  closestPlace: String
  location: Location
}

# ------ PROFILES -----------------------------------------------------
type Profile {
  username: String!
  birthDate: String
  firstName: String
  lastName: String
  languages: [String!]
  picture: String
  phone: String
}

type Settings {
  averageSpeed: Int
  lengthUnit: LengthUnit
}

type Customer {
  profile: Profile
  settings: Settings
  bookmarkedHikes: [ID]
}

input LocationInput {
  lon: Float!
  lat: Float!
}

enum GeoSearchableObjectType {
  poi
  hike
  image
}

input SearchByRadiusInput {
  location: LocationInput!
  radiusInMeters: Float!
  objectType: GeoSearchableObjectType!
  limit: Int
  nextToken: String
}

input SearchInShapeInput {
  shape: GeoShapeInput!
  objectType: GeoSearchableObjectType!
  limit: Int
  nextToken: String
}

input SearchInMultipolygonInput {
  coordinates: [[[[Float!]]]]!
  objectType: GeoSearchableObjectType!
  limit: Int
  nextToken: String
}

input SearchInEnvelopeInput {
  envelope: [[Float]]!
  objectType: GeoSearchableObjectType!
  limit: Int
  nextToken: String
}

input SearchAroundHikeInput {
  hikeId: String!
  distanceInMeters: Float!
  objectType: GeoSearchableObjectType!
  limit: Int
  nextToken: String
}

input SearchSafeImagesAroundHikeInput {
  hikeId: String!
  distanceInMeters: Float!
  limit: Int
  nextToken: String
}

type GeoSearchConnection {
  items: [String!]
    @auth(rules: [{ allow: public }, { allow: public, provider: iam }])

  nextToken: String
    @auth(rules: [{ allow: public }, { allow: public, provider: iam }])

  total: Int @auth(rules: [{ allow: public }, { allow: public, provider: iam }])
}

type Query {
  searchByRadius(query: SearchByRadiusInput!): GeoSearchConnection
    @auth(rules: [{ allow: public }, { allow: public, provider: iam }])
    @function(name: "dev-yaha-amplify-resolvers")

  searchInEnvelope(query: SearchInEnvelopeInput!): GeoSearchConnection
    @auth(rules: [{ allow: public }, { allow: public, provider: iam }])
    @function(name: "dev-yaha-amplify-resolvers")

  searchInShape(query: SearchInShapeInput!): GeoSearchConnection
    @auth(rules: [{ allow: public }, { allow: public, provider: iam }])
    @function(name: "dev-yaha-amplify-resolvers")

  searchInMultipolygon(query: SearchInMultipolygonInput!): GeoSearchConnection
    @auth(rules: [{ allow: public }, { allow: public, provider: iam }])
    @function(name: "dev-yaha-amplify-resolvers")

  searchAroundHike(query: SearchAroundHikeInput!): GeoSearchConnection
    @auth(rules: [{ allow: public }, { allow: public, provider: iam }])
    @function(name: "dev-yaha-amplify-resolvers")

  searchSafeImagesAroundHike(
    query: SearchSafeImagesAroundHikeInput!
  ): GeoSearchConnection
    @auth(rules: [{ allow: public }, { allow: public, provider: iam }])
    @function(name: "dev-yaha-amplify-resolvers")
}
