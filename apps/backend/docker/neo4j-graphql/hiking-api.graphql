## ------ Generic types -----------------------------------------------------
enum PublicationState {
  draft
  published
  archived
}

enum LengthUnit {
  imperial
  metric
}

# ------ TEXTUAL DESCRIPTION -----------------------------------------------------
enum DescriptionType {
  markdown
  html
  plaintext
}

type Description {
  languageKey: String!
  title: String
  summary: String
  fullDescription: String
  type: DescriptionType!
}

# ------ IMAGES -----------------------------------------------------
type Image {
  id: String!
  original: String!
  card: String!
  thumbnail: String!
  attributions: String
  labels: [String]
  tagged: Boolean
  banned: Boolean
}

# ------ POIS -----------------------------------------------------
enum PoiSource {
  google
  wikipedia
  osmAmenity
  osmNatural
  osmRoute
  osmPublicTransport
  osmEmergency
  osmHistoric
  osmLeisure
  osmManMade
  osmMilitary
  osmShop
  osmTourism
  mapillary
  flickr
}

type Poi {
  id: String
  type: String
  tags: [String!]
  address: String
  phone: String
  openingHours: String
  infoUrl: String
  descriptions: [Description]!
    @cypher(
      statement: """
      match (d:Description)-[:EXPLAINS]->(this)
      return distinct d
      """
    )

  images: [Image]!
    @cypher(
      statement: """
      match (i:Image)-[:TAKEN_AT]->(this)
      where i.banned = false
      return distinct i
      """
    )

  location: Waypoint!
    @cypher(
      statement: """
      match (this)-[:LOCATED_AT]->(w:Waypoint)
      return w
      """
    )
}

# ------ HIKES -----------------------------------------------------
type Waypoint {
  location: Point!
}

interface WaypointIndex @relationshipProperties {
  orderIndex: [Int!]
}

type Route {
  id: String
  coordinates: [Waypoint!]!
    @cypher(
      statement: """
      match (this)-[c:CONTAINS]->(w:Waypoint)
      with w order by c.orderIndex
      return w
      """
    )
  onroutePois: [Poi]!
    @cypher(
      statement: """
      match (poi:Poi)-[:ON_ROUTE]->(this)
      return distinct poi
      """
    )
  offroutePois: [Poi]!
    @cypher(
      statement: """
      match (poi:Poi)-[:OFF_ROUTE]->(this)
      return distinct poi
      """
    )
  images: [Image]!
    @cypher(
      statement: """
      match (image:Image)-[:TAKEN_AT]->(this)
      where image.banned = false
      return distinct image
      """
    )
}

type Hike {
  id: String
  publicationState: PublicationState
  featured: Boolean
  rate: String
  tags: [String]
  route: Route! @relationship(type: "GOES_ON", direction: OUT)
  descriptions: [Description!]! @relationship(type: "EXPLAINS", direction: IN)
}

# ------ PROFILES -----------------------------------------------------
type Profile {
  username: String!
  birthDate: String
  firstName: String
  lastName: String
  languages: [String!]
  picture: String
  phone: String
}

type Settings {
  averageSpeed: Int
  lengthUnit: LengthUnit
}

type Customer {
  profile: Profile
  settings: Settings
  bookmarkedHikes: [ID]
}

enum GeoSearchableObjectType {
  poi
  hike
  image
}

input SearchByRadiusInput {
  origin: PointInput!
  radiusInMeters: Int!
}

input SearchByContentInput {
  content: String!
}

input SearchImagesAroundRoute {
  routeId: String!
}

type TypeWithPoint {
  location: Point!
}

type Query {
  searchHikeByRadius(params: SearchByRadiusInput!): [String]!
    @cypher(
      statement: """
      match (w:Waypoint) where point.distance(w.location, Point({latitude: $params.origin.latitude,
      longitude: $params.origin.longitude, height: 0.0})) < $params.radiusInMeters
      match (h:Hike)-[:GOES_ON]->(:Route)-[:CONTAINS]->(w)
      return collect(distinct h.id)
      """
    )

  searchHikeByContent(params: String!): [String]!
    @cypher(
      statement: """
      CALL db.index.fulltext.queryNodes('descriptions', $params) YIELD node
      match (node)-[:EXPLAINS]->(h:Hike)
      RETURN collect(distinct h.id)
      """
    )
}
